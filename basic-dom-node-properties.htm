<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="ui.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Документ, события, интерфейсы</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="document.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Документ и объекты страницы</span></a></li></ol><h1 class="main__header-title">Свойства узлов: тип, тег и содержимое</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Свойства узлов: тип, тег и содержимое"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>В этой главе мы познакомимся с основными, самыми важными свойствами, которые отвечают за тип DOM-узла, тег и содержимое.</p>
<h2><a class="main__anchor" name="классы-иерархия-dom" href="#классы-иерархия-dom">Классы, иерархия DOM</a></h2><p>Самое главное различие между DOM-узлами – разные узлы являются объектами различных классов.</p>
<p>Поэтому, к примеру, у узла, соответствующего тегу <code>&lt;td&gt;</code> – одни свойства, у <code>&lt;form&gt;</code> – другие, у <code>&lt;a&gt;</code> – третьи.</p>
<p>Есть и кое-что общее, за счёт наследования.</p>
<p>Классы DOM образуют иерархию.</p>
<p>Основной объект в ней: <a href="http://dom.spec.whatwg.org/#interface-node">Node</a>, от которого наследуют остальные:</p>
<figure><div class="image" style="width:558px">
      <div class="image__ratio" style="padding-top:52.32974910394266%"></div>
      <img src="article/basic-dom-node-properties/hierarchy.png" alt="" width="558" height="292" class="image__image">
      </div></figure><p>На рисунке выше изображены основные классы:</p>
<ul>
<li>Прямо от <code>Node</code> наследуют текстовые узлы <code>Text</code>, комментарии <code>Comment</code> и элементы <code>Element</code>.</li>
<li>Элементы <code>Element</code> – это ещё не HTML-элементы, а более общий тип, который используется в том числе в XML. От него наследует <code>SVGElement</code> для SVG-графики и, конечно, <code>HTMLElement</code>.</li>
<li>От <code>HTMLElement</code> уже наследуют разнообразные узлы HTML:
<ul>
<li>Для <code>&lt;input&gt;</code> – <code>HTMLInputElement</code></li>
<li>Для <code>&lt;body&gt;</code> – <code>HTMLBodyElement</code></li>
<li>Для <code>&lt;a&gt;</code> – <code>HTMLAnchorElement</code>… и так далее.</li>
</ul>
</li>
</ul>
<p>Узнать класс узла очень просто – достаточно привести его к строке, к примеру, вывести:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( document.body ); // [object HTMLBodyElement]</code></pre>
        </div>
      </div>
      
      </div><p>Можно и проверить при помощи <code>instanceof</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( document.body instanceof HTMLBodyElement ); // true
alert( document.body instanceof HTMLElement ); // true
alert( document.body instanceof Element ); // true
alert( document.body instanceof Node ); // true</code></pre>
        </div>
      </div>
      
      </div><p>Как видно, DOM-узлы – обычные JavaScript-объекты. Их классы заданы в прототипном стиле. В этом легко убедиться, если вывести в консоли любой элемент через <code>console.dir(elem)</code>. Или даже можно напрямую обратиться к методам, которые хранятся в <code>Node.prototype</code>, <code>Element.prototype</code> и так далее.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type"><code>console.dir(elem)</code> против <code>console.log(elem)</code></span></div>
            <div class="important__content"><p>Вывод <code>console.log(elem)</code> и <code>console.dir(elem)</code> различен.</p>
<ul>
<li><code>console.log</code> выводит элемент в виде, удобном для исследования HTML-структуры.</li>
<li><code>console.dir</code> выводит элемент в виде JavaScript-объекта, удобно для анализа его свойств.</li>
</ul>
<p>Попробуйте сами на <code>document.body</code>.</p>
</div></div>
<p>Детальное описание свойств и методов каждого DOM-класса дано в <a href="https://html.spec.whatwg.org/multipage/">спецификации</a>.</p>
<p>Например, <a href="https://html.spec.whatwg.org/multipage/forms.html#the-input-element">The input element</a> описывает класс, соответствующий <code>&lt;input&gt;</code>, включая <a href="https://html.spec.whatwg.org/multipage/forms.html#htmlinputelement">interface HTMLInputElement</a>, который нас как раз и интересует.</p>
<p>При описании свойств и методов используется не JavaScript, а специальный язык <a href="https://ru.wikipedia.org/wiki/%D0%AF%D0%B7%D1%8B%D0%BA_%D0%BE%D0%BF%D0%B8%D1%81%D0%B0%D0%BD%D0%B8%D1%8F_%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D0%BE%D0%B2">IDL</a> (Interface Definition Language), который достаточно легко понять «с ходу».</p>
<p>Вот из него выдержка, с комментариями:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// Объявлен HTMLInputElement
// двоеточие означает, что он наследует от HTMLElement
interface HTMLInputElement: HTMLElement {

  // у всех таких элементов есть строковые свойства
  // accept, alt, autocomplete, value
  attribute DOMString accept;
  attribute DOMString alt;
  attribute DOMString autocomplete;
  attribute DOMString value;

  // и логическое свойство autofocus
  attribute boolean autofocus;
  ...
  // а также метод select, который значение не возвращает (void)
  void select();
  ...
}</code></pre>
        </div>
      </div>
      
      </div><p>Далее в этом разделе мы поговорим о самых главных свойствах узлов DOM, которые используются наиболее часто.</p>
<h2><a class="main__anchor" name="тип-nodetype" href="#тип-nodetype">Тип: nodeType</a></h2><p>Тип узла содержится в его свойстве <code>nodeType</code>.</p>
<p>Как правило, мы работаем всего с двумя типами узлов:</p>
<ul>
<li>Элемент.</li>
<li>Текстовый узел.</li>
</ul>
<p>На самом деле типов узлов гораздо больше. Строго говоря, их 12, и они описаны в спецификации с древнейших времён, см. <a href="http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-1950641247">DOM Уровень 1</a>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">interface Node {
  // Всевозможные значения nodeType
  const unsigned short ELEMENT_NODE = 1;
  const unsigned short ATTRIBUTE_NODE = 2;
  const unsigned short TEXT_NODE = 3;
  const unsigned short CDATA_SECTION_NODE = 4;
  const unsigned short ENTITY_REFERENCE_NODE = 5;
  const unsigned short ENTITY_NODE = 6;
  const unsigned short PROCESSING_INSTRUCTION_NODE = 7;
  const unsigned short COMMENT_NODE = 8;
  const unsigned short DOCUMENT_NODE = 9;
  const unsigned short DOCUMENT_TYPE_NODE = 10;
  const unsigned short DOCUMENT_FRAGMENT_NODE = 11;
  const unsigned short NOTATION_NODE = 12;
  ...
}</code></pre>
        </div>
      </div>
      
      </div><p>В частности, тип «Элемент» <code>ELEMENT_NODE</code> имеет номер 1, а «Текст» <code>TEXT_NODE</code> – номер 3.</p>
<p>Например, выведем все узлы-потомки <code>document.body</code>, <em>являющиеся элементами</em>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="14-15">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;body&gt;
  &lt;div&gt;Читатели:&lt;/div&gt;
  &lt;ul&gt;
    &lt;li&gt;Вася&lt;/li&gt;
    &lt;li&gt;Петя&lt;/li&gt;
  &lt;/ul&gt;

  &lt;!-- комментарий --&gt;

  &lt;script&gt;
    var childNodes = document.body.childNodes;

    for (var i = 0; i &lt; childNodes.length; i++) {

      // отфильтровать не-элементы
      if (childNodes[i].nodeType != 1) continue;

      alert( childNodes[i] );

    }
  &lt;/script&gt;
&lt;/body&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Тип узла можно только читать, изменить его невозможно.</p>
<h2><a class="main__anchor" name="тег-nodename-и-tagname" href="#тег-nodename-и-tagname">Тег: nodeName и tagName</a></h2><p>Существует целых два свойства: <code>nodeName</code> и <code>tagName</code>, которые содержат название(тег) элемента узла.</p>
<p><strong>Название HTML-тега всегда находится в верхнем регистре.</strong></p>
<p>Например, для <code>document.body</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( document.body.nodeName ); // BODY
alert( document.body.tagName ); // BODY</code></pre>
        </div>
      </div>
      
      </div><div class="important important_smart">
            <div class="important__header"><span class="important__type">В XHTML <code>nodeName</code> может быть не в верхнем регистре</span></div>
            <div class="important__content"><p>У браузера есть два режима обработки документа: HTML и XML-режим. Обычно используется режим HTML.</p>
<p>XML-режим включается, когда браузер получает XML-документ через <code>XMLHttpRequest</code>(технология AJAX) или при наличии заголовка <code>Content-Type: application/xml+xhtml</code>.</p>
<p>В XML-режиме сохраняется регистр и <code>nodeName</code> может выдать «body» или даже «bOdY» – в точности как указано в документе. XML-режим используют очень редко.</p>
</div></div>
<h3><a class="main__anchor" name="какая-разница-между-tagname-и-nodename" href="#какая-разница-между-tagname-и-nodename">Какая разница между tagName и nodeName ?</a></h3><p>Разница отражена в названиях свойств, но неочевидна.</p>
<ul>
<li>Свойство <code>tagName</code> есть только у элементов <code>Element</code> (в IE8- также у комментариев, но это ошибка в браузере).</li>
<li>Свойство <code>nodeName</code> определено для любых узлов <code>Node</code>, для элементов оно равно <code>tagName</code>, а для не-элементов обычно содержит строку с типом узла.</li>
</ul>
<p>Таким образом, при помощи <code>tagName</code> мы можем работать только с элементами, а <code>nodeName</code> может что-то сказать и о других типах узлов.</p>
<p>Например, сравним <code>tagName</code> и <code>nodeName</code> на примере узла-комментария и объекта <code>document</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;body&gt;&lt;!-- комментарий --&gt;

  &lt;script&gt;
    // для комментария
    alert( document.body.firstChild.nodeName ); // #comment
    alert( document.body.firstChild.tagName ); // undefined (в IE8- воскл. знак &quot;!&quot;)

    // для документа
    alert( document.nodeName ); // #document, т.к. корень DOM -- не элемент
    alert( document.tagName ); // undefined
  &lt;/script&gt;
&lt;/body&gt;</code></pre>
        </div>
      </div>
      
      </div><p>При работе с элементами, как это обычно бывает, имеет смысл использовать свойство <code>tagName</code> – оно короче.</p>
<h2><a class="main__anchor" name="innerhtml-содержимое-элемента" href="#innerhtml-содержимое-элемента">innerHTML: содержимое элемента</a></h2><p>Свойство <code>innerHTML</code> описано в спецификации HTML 5 – <a href="http://www.w3.org/TR/html5/embedded-content-0.html">embedded content</a>.</p>
<p>Оно позволяет получить HTML-содержимое элемента в виде строки. В <code>innerHTML</code> можно и читать и писать.</p>
<p>Пример выведет на экран все содержимое <code>document.body</code>, а затем заменит его на другое:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;body&gt;
  &lt;p&gt;Параграф&lt;/p&gt;
  &lt;div&gt;Div&lt;/div&gt;

  &lt;script&gt;
    alert( document.body.innerHTML ); // читаем текущее содержимое
    document.body.innerHTML = 'Новый BODY!'; // заменяем содержимое
  &lt;/script&gt;

&lt;/body&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Значение, возвращаемое <code>innerHTML</code> – всегда валидный HTML-код. При записи можно попробовать записать  что угодно, но браузер исправит ошибки:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;body&gt;

  &lt;script&gt;
    document.body.innerHTML = '&lt;b&gt;тест'; // незакрытый тег
    alert( document.body.innerHTML ); // &lt;b&gt;тест&lt;/b&gt; (исправлено)
  &lt;/script&gt;

&lt;/body&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Свойство <code>innerHTML</code> – одно из самых часто используемых.</p>
<h3><a class="main__anchor" name="тонкости-innerhtml" href="#тонкости-innerhtml">Тонкости innerHTML</a></h3><p><code>innerHTML</code> не так прост, как может показаться, и таит в себе некоторые тонкости, которые могут сбить с толку новичка, а иногда и опытного программиста.</p>
<p>Ознакомьтесь с ними. Даже если этих сложностей у вас <em>пока</em> нет, эта информация отложится где-то в голове и поможет, когда проблема появится.</p>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">Для таблиц в IE9- – <code>innerHTML</code> только для чтения</span></div>
            <div class="important__content"><p>В Internet Explorer версии 9 и ранее, <a href="http://msdn.microsoft.com/en-us/library/ms533897.aspx">innerHTML</a> доступно только для чтения для элементов <code>COL</code>, <code>COLGROUP</code>, <code>FRAMESET</code>, <code>HEAD</code>, <code>HTML</code>, <code>STYLE</code>, <code>TABLE</code>, <code>TBODY</code>, <code>TFOOT</code>, <code>THEAD</code>, <code>TITLE</code>, <code>TR</code>.</p>
<p>В частности, в IE9- запрещена запись в <code>innerHTML</code> для любых табличных элементов, кроме ячеек (<code>TD/TH</code>).</p>
</div></div>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">Добавление <code>innerHTML+=</code> осуществляет перезапись</span></div>
            <div class="important__content"><p>Синтаксически, можно добавить текст к <code>innerHTML</code> через <code>+=</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">chatDiv.innerHTML += &quot;&lt;div&gt;Привет&lt;img src='smile.gif'/&gt; !&lt;/div&gt;&quot;;
chatDiv.innerHTML += &quot;Как дела?&quot;;</code></pre>
        </div>
      </div>
      
      </div><p>На практике этим следует пользоваться с большой осторожностью, так как фактически происходит не добавление, а перезапись:</p>
<ol>
<li>Удаляется старое содержание</li>
<li>На его место становится новое значение <code>innerHTML</code>.</li>
</ol>
<p>Так как новое значение записывается с нуля, то <strong>все изображения и другие ресурсы будут перезагружены</strong>. В примере выше вторая строчка перезагрузит <code>smile.gif</code>, который был до неё. Если в <code>chatDiv</code> много текста, то эта перезагрузка будет очень заметна.</p>
<p>Есть и другие побочные эффекты, например если существующий текст был выделен мышкой, то в большинстве браузеров это выделение пропадёт. Если в HTML был <code>&lt;input&gt;</code>, в который посетитель что-то ввёл, то введённое значение пропадёт. И тому подобное.</p>
<p>К счастью, есть и другие способы добавить содержимое, не использующие <code>innerHTML</code>.</p>
</div></div>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">Скрипты не выполняются</span></div>
            <div class="important__content"><p>Если в <code>innerHTML</code> есть тег <code>script</code> – он не будет выполнен.</p>
<p>К примеру:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div id=&quot;my&quot;&gt;&lt;/div&gt;

&lt;script&gt;
  var elem = document.getElementById('my');
  elem.innerHTML = 'ТЕСТ&lt;script&gt;alert( 1 );&lt;/scr' + 'ipt&gt;';
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>В примере закрывающий тег <code>&lt;/scr'+'ipt&gt;</code> разбит на две строки, т.к. иначе браузер подумает, что это конец скрипта. Вставленный скрипт не выполнится.</p>
<p>Исключение – IE9-, в нем вставляемый скрипт выполняется, если у него есть атрибут <code>defer</code>. Но это нестандартная возможность, которой не следует пользоваться.</p>
</div></div>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">IE8- обрезает <code>style</code> и <code>script</code> в начале <code>innerHTML</code></span></div>
            <div class="important__content"><p>Если в начале <code>innerHTML</code> находятся стили <code>&lt;style&gt;</code>, то старый IE проигнорирует их. То есть, иными словами, они не применятся.</p>
<p>Смотрите также <a href="http://msdn.microsoft.com/en-us/library/ms533897%28v=vs.85%29.aspx">innerHTML на MSDN</a> на эту тему.</p>
</div></div>
<h2><a class="main__anchor" name="outerhtml-html-элемента-целиком" href="#outerhtml-html-элемента-целиком">outerHTML: HTML элемента целиком</a></h2><p>Свойство <code>outerHTML</code> содержит HTML элемента целиком.</p>
<p>Пример чтения <code>outerHTML</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div&gt;Привет &lt;b&gt;Мир&lt;/b&gt;&lt;/div&gt;

&lt;script&gt;
  var div = document.body.children[0];

  alert( div.outerHTML ); // &lt;div&gt;Привет &lt;b&gt;Мир&lt;/b&gt;&lt;/div&gt;
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p><strong>Изменить <code>outerHTML</code> элемента невозможно.</strong></p>
<p>Здесь мы остановимся чуть подробнее. Дело в том, что технически свойство <code>outerHTML</code> доступно на запись. Но при этом элемент не меняется, а <em>заменяется на новый</em>, который тут же создаётся из нового <code>outerHTML</code>.</p>
<p>При этом переменная, в которой изначально был старый элемент, и в которой мы «перезаписали» <code>outerHTML</code>, остаётся со старым элементом.</p>
<p>Это легко может привести к ошибкам, что видно на примере:</p>
<div data-trusted="1" class="code-example" data-highlight-block="5-5,8-8">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div&gt;Привет, Мир!&lt;/div&gt;

&lt;script&gt;
  var div = document.body.children[0];

  // заменяем div.outerHTML на &lt;p&gt;...&lt;/p&gt;
  div.outerHTML = '&lt;p&gt;Новый элемент!&lt;/p&gt;';

  // ... но содержимое div.outerHTML осталось тем же, несмотря на &quot;перезапись&quot;
  alert( div.outerHTML ); // &lt;div&gt;Привет, Мир!&lt;/div&gt;
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>То, что произошло в примере выше – так это замена <code>div</code> в документе на новый узел <code>&lt;p&gt;...&lt;/p&gt;</code>. При этом переменная <code>div</code> не получила этот новый узел! Она сохранила старое значение, чтение из неё это отлично показывает.</p>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">Записал <code>outerHTML</code>? Понимай последствия!</span></div>
            <div class="important__content"><p>Иногда начинающие делают здесь ошибку: сначала заменяют <code>div.outerHTML</code>, а потом продолжают работать с <code>div</code>, как будто это изменившийся элемент. Такое возможно с <code>innerHTML</code>, но не с <code>outerHTML</code>.</p>
<p>Записать новый HTML в <code>outerHTML</code> можно, но нужно понимать, что это никакое не изменение свойств узла, а создание нового.</p>
<p>Новосозданный узел не доступен сразу в переменной, хотя его, конечно, можно получить из DOM.</p>
</div></div>
<h2><a class="main__anchor" name="nodevalue-data-содержимое-текстового-узла" href="#nodevalue-data-содержимое-текстового-узла">nodeValue/data: содержимое текстового узла</a></h2><p>Свойство <code>innerHTML</code> есть только у узлов-элементов.</p>
<p><strong>Содержимое других узлов, например, текстовых или комментариев, доступно на чтение и запись через свойство <code>data</code>.</strong></p>
<p>Его тоже можно читать и обновлять. Следующий пример демонстрирует это:</p>
<div data-trusted="1" class="code-example" data-demo-height="50" data-highlight-block="5-5">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;body&gt;
  Привет
  &lt;!-- Комментарий --&gt;
  &lt;script&gt;
    for (var i = 0; i &lt; document.body.childNodes.length; i++) {
      alert( document.body.childNodes[i].data );
    }
  &lt;/script&gt;
  Пока
&lt;/body&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Если вы запустите этот пример, то увидите, как выводятся последовательно:</p>
<ol>
<li><code>Привет</code> – это содержимое первого узла (текстового).</li>
<li><code>Комментарий</code> – это содержимое второго узла (комментария).</li>
<li><code>Пробелы</code> – это содержимое небольшого пробельного узла после комментария до скрипта.</li>
<li><code>undefined</code> – далее цикл дошёл до <code>&lt;script&gt;</code>, но это узел-элемент, у него нет <code>data</code>.</li>
</ol>
<p>Вообще говоря, после <code>&lt;script&gt;…&lt;/script&gt;</code> и до закрытия <code>&lt;/body&gt;</code> в документе есть еще один текстовый узел. Однако, на момент работы скрипта браузер ещё не знает о нём, поэтому не выведет.</p>
<p><strong>Свойство <code>nodeValue</code> мы использовать не будем.</strong></p>
<p>Оно работает так же, как <code>data</code>, но на некоторых узлах, где <code>data</code> нет, <code>nodeValue</code> есть и имеет значение <code>null</code>. Как-то использовать это тонкое отличие обычно нет причин.</p>
<p><strong>Два свойства существуют по историческим причинам, мы будем использовать лишь <code>data</code>, поскольку оно короче.</strong></p>
<h2><a class="main__anchor" name="текст-textcontent" href="#текст-textcontent">Текст: textContent</a></h2><p>Свойство <code>textContent</code> содержит только текст внутри элемента, за вычетом всех <code>&lt;тегов&gt;</code>.</p>
<p>Оно поддерживается везде, кроме IE8-.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div&gt;
  &lt;h1&gt;Срочно в номер!&lt;/h1&gt;
  &lt;p&gt;Марсиане атакуют людей!&lt;/p&gt;
&lt;/div&gt;

&lt;script&gt;
  var news = document.body.children[0];

  // \n  Срочно в номер!\n  Марсиане атакуют людей!\n
  alert( news.textContent );
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Как видно из примера выше, возвращается в точности весь текст, включая переводы строк и пробелы, но без тегов.</p>
<p><strong>Иными словами, <code>elem.textContent</code> возвращает конкатенацию всех текстовых узлов внутри <code>elem</code>.</strong></p>
<p>Не сказать, чтобы эта информация была часто востребована.</p>
<p><strong>Гораздо полезнее возможность записать текст в элемент, причём именно как текст!</strong></p>
<p>В этом примере имя посетителя попадёт в первый <code>div</code> как <code>innerHTML</code>, а во второй – как текст:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;

&lt;script&gt;
  var name = prompt(&quot;Введите имя?&quot;, &quot;&lt;b&gt;Винни-пух&lt;/b&gt;&quot;);

  document.body.children[0].innerHTML = name;
  document.body.children[1].textContent = name;
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>При запуске примера мы увидим, что в первый <code>DIV</code> текст от посетителя вставился именно как HTML, то есть теги стали именно тегами, а во второй – как обычный текст.</p>
<p>Вряд ли мы <em>действительно</em> хотим, чтобы посетители вставляли в наш сайт произвольный HTML-код. Присваивание через <code>textContent</code> – один из способов от этого защититься.</p>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">Нестандартное свойство <code>innerText</code></span></div>
            <div class="important__content"><p>Всеми браузерами, кроме Firefox 44- (согласно <a href="http://caniuse.com/#feat=innertext">CanIUse.Com</a>), поддерживается нестандартное свойство <a href="http://msdn.microsoft.com/en-us/library/ie/ms533899.aspx">innerText</a>.</p>
<p>У него, в некотором роде, преимущество перед <code>textContent</code> в том, что оно по названию напоминает <code>innerHTML</code>, его проще запомнить.</p>
<p>Однако, свойство <code>innerText</code> не следует использовать, так как оно не стандартное и не будет стандартным.</p>
<p>Это свойство возвращает текст не в том виде, в котором он в DOM, а в том, в котором он виден – как если бы мы выбрали содержимое элемента мышкой и скопировали его. В частности, если элемент невидим, то его текст возвращён не будет. Это довольно странная особенность существует по историческим причинам и скорее мешает, чем помогает.</p>
<p>Впрочем, при записи значения <code>innerText</code> работает так же, как и <code>textContent</code>.</p>
</div></div>
<h2><a class="main__anchor" name="свойство-hidden" href="#свойство-hidden">Свойство hidden</a></h2><p>Как правило, видим или невидим узел, определяется через CSS, свойствами <code>display</code> или <code>visibility</code>.</p>
<p>В стандарте HTML5 предусмотрен специальный атрибут и свойство для этого: <code>hidden</code>.</p>
<p>Его поддерживают все современные браузеры, кроме IE10-.</p>
<p>В примере ниже второй и третий <code>&lt;div&gt;</code> скрыты:</p>
<div data-trusted="1" class="code-example" data-demo-height="80">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div&gt;Текст&lt;/div&gt;
&lt;div hidden&gt;С атрибутом hidden&lt;/div&gt;
&lt;div&gt;Со свойством hidden&lt;/div&gt;

&lt;script&gt;
  var lastDiv = document.body.children[2];
  lastDiv.hidden = true;
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Технически, атрибут <code>hidden</code> работает так же, как <code>style=&quot;display:none&quot;</code>. Но его проще поставить через JavaScript (меньше букв), и могут быть преимущества для скринридеров и прочих нестандартных браузеров.</p>
<p>Для старых IE тоже можно сделать, чтобы свойство поддерживалось, мы ещё вернёмся к этому далее в учебнике.</p>
<h2><a class="main__anchor" name="исследование-элементов" href="#исследование-элементов">Исследование элементов</a></h2><p>У DOM-узлов есть и другие свойства, зависящие от типа, например:</p>
<ul>
<li><code>value</code> – значение для <code>INPUT</code>, <code>SELECT</code> или <code>TEXTAREA</code></li>
<li><code>id</code> – идентификатор</li>
<li><code>href</code> – адрес ссылки</li>
<li>…многие другие…</li>
</ul>
<p>Например:</p>
<div data-trusted="1" class="code-example" data-demo-height="80">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input type=&quot;text&quot; id=&quot;elem&quot; value=&quot;значение&quot;&gt;

&lt;script&gt;
  var input = document.body.children[0];

  alert( input.type ); // &quot;text&quot;
  alert( input.id ); // &quot;elem&quot;
  alert( input.value ); // значение
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Как узнать, какие свойства есть у данного типа элементов?</p>
<p>Это просто. Нужно либо посмотреть <a href="http://dev.w3.org/html5/markup/elements.html">список элементов HTML5</a> и найти в нём интересующий вас элемент и прочитать секцию с <code>interface</code>.</p>
<p>Если же недосуг или интересуют особенности конкретного браузера – элемент всегда можно вывести в консоль вызовом <code>console.dir(элемент)</code>.</p>
<p>Метод <code>console.dir</code> выводит аргумент не в «красивом» виде, а как объект, который можно развернуть и исследовать.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// в консоли можно будет увидеть все свойства DOM-объекта document
console.dir(document);</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><p>Основные свойства DOM-узлов:</p>
<dl>
<dt><code>nodeType</code></dt>
<dd>Тип узла. Самые популярные типы: <code>&quot;1&quot;</code> – для элементов и <code>&quot;3&quot;</code> – для текстовых узлов. Только для чтения.</dd>
<dt><code>nodeName/tagName</code></dt>
<dd>Название тега заглавными буквами. <code>nodeName</code> имеет специальные значения для узлов-неэлементов. Только для чтения.</dd>
<dt><code>innerHTML</code></dt>
<dd>Внутреннее содержимое узла-элемента в виде HTML. Можно изменять.</dd>
<dt><code>outerHTML</code></dt>
<dd>Полный HTML узла-элемента. При записи в <code>elem.outerHTML</code> переменная <code>elem</code> сохраняет старый узел.</dd>
<dt><code>nodeValue/data</code></dt>
<dd>Содержимое текстового узла или комментария. Свойство <code>nodeValue</code> также определено и для других типов узлов. Можно изменять. На некоторых узлах, где <code>data</code> нет, <code>nodeValue</code> есть и имеет значение null, поэтому лучше использовать <code>data</code>.</dd>
<dt><code>textContent</code></dt>
<dd>Содержит только текст внутри элемента, за вычетом всех тегов. Можно использовать для защиты от вставки произвольного HTML кода</dd>
<dt>Свойство и атрибут <code>hidden</code></dt>
<dd>Скрыть элемент можно с помощью установки свойства <code>hidden</code> в <code>true</code> или с помощью атрибута</dd>
</dl>
<p>Узлы DOM также имеют другие свойства, в зависимости от тега. Например, у <code>INPUT</code> есть свойства <code>value</code> и <code>checked</code>, а у <code>A</code> есть <code>href</code> и т.д. Мы рассмотрим их далее.</p>
</div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#что-выведет-код-в-консоли" name="что-выведет-код-в-консоли" class="main__anchor">Что выведет код в консоли?</a></h3><a href="task/console-firstchild-innerhtml/default.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>В браузере Chrome открыт HTML-документ.</p>
<p>Вы зашли во вкладку Elements и видите такую картинку:
<img src="task/console-firstchild-innerhtml/console-innerhtml.png" alt="" width="375" height="264"></p>
<p>В настоящий момент выбран элемент <code>&lt;body&gt;</code>.</p>
<p>Что выведет код <code>$0.firstChild.innerHTML</code> в консоли?</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p><strong>Однозначно правильный ответ невозможен.</strong></p>
<p>В консоли не выводятся пробельные узлы. Если перед <code>&lt;h1&gt;</code> находится пробельный узел, то будет <code>undefined</code>, а если нет – то текст внутри <code>&lt;h1&gt;</code>.</p>
<p>Пример с <code>undefined</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;body&gt;
  &lt;h1&gt;Привет, мир!&lt;/h1&gt;

  &lt;script&gt;
    alert( document.body.firstChild.innerHTML ); // undefined
  &lt;/script&gt;
&lt;/body&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Если убрать из него перевод строки перед <code>&lt;h1&gt;</code>, то было бы <code>&quot;Привет, мир!&quot;</code>.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#в-инлайн-скрипте-lastchild-nodetype" name="в-инлайн-скрипте-lastchild-nodetype" class="main__anchor">В инлайн скрипте lastChild.nodeType</a></h3><a href="task/lastchild-nodetype-inline.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Что выведет скрипт на этой странице?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;

&lt;body&gt;
  &lt;script&gt;
    alert( document.body.lastChild.nodeType );
  &lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Небольшой подвох – в том, что во время выполнения скрипта последним тегом является <code>SCRIPT</code>. Браузер не может обработать страницу дальше, пока не выполнит скрипт.</p>
<p>Так что результат будет <code>1</code> (узел-элемент).</p>
<div data-trusted="1" class="code-example" data-demo-height="60">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;

&lt;body&gt;
  &lt;script&gt;
    alert( document.body.lastChild.nodeType );
  &lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;</code></pre>
        </div>
      </div>
      
      </div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#тег-в-комментарии" name="тег-в-комментарии" class="main__anchor">Тег в комментарии</a></h3><a href="task/tag-in-comment.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 3</span></div><div class="task__content"><p>Что выведет этот код?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script&gt;
  var body = document.body;

  body.innerHTML = &quot;&lt;!--&quot; + body.tagName + &quot;--&gt;&quot;;

  alert( body.firstChild.data ); // что выведет?
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Ответ: <strong><code>BODY</code></strong>.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script&gt;
  var body = document.body;

  body.innerHTML = &quot;&lt;!--&quot; + body.tagName + &quot;--&gt;&quot;;

  alert( body.firstChild.data ); // BODY
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Происходящее по шагам:</p>
<ol>
<li>Заменяем содержимое <code>&lt;body&gt;</code> на комментарий. Он будет иметь вид <code>&lt;!–BODY–&gt;</code>, так как <code>body.tagName == &quot;BODY&quot;</code>. Как мы помним, свойство <code>tagName</code> в HTML всегда находится в верхнем регистре.</li>
<li>Этот комментарий теперь является первым и единственным потомком <code>body.firstChild</code>.</li>
<li>Получим значение <code>data</code> для комментария <code>body.firstChild</code>. Оно равно содержимому узла для всех узлов, кроме элементов. Содержимое комментария: <code>&quot;BODY&quot;</code>.</li>
</ol>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#где-в-dom-иерархии-document" name="где-в-dom-иерархии-document" class="main__anchor">Где в DOM-иерархии document?</a></h3><a href="task/where-document-in-hierarchy.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 4</span></div><div class="task__content"><p>Объектом какого класса является <code>document</code>?</p>
<p>Какое место он занимает в DOM-иерархии?</p>
<p>Наследует ли он <code>Node</code> или <code>Element</code>?</p>
<p>Воспользуйтесь для решения тем фактом, что DOM-узлы образуют стандартную прототипную иерархию классов.</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Объектом какого класса является <code>document</code>, можно выяснить так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert(document); // [object HTMLDocument]</code></pre>
        </div>
      </div>
      
      </div><p>Или так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert(document.constructor); // function HTMLDocument() { ... }</code></pre>
        </div>
      </div>
      
      </div><p>Итак, <code>document</code> – объект класса <code>HTMLDocument</code>.</p>
<p>Какое место <code>HTMLDocument</code> занимает в иерархии?</p>
<p>Можно поискать в документации. Но попробуем выяснить это самостоятельно.</p>
<p>Вопрос не такой простой и требует хорошего понимания <a href="class-inheritance.htm">прототипного наследования</a>.</p>
<p>Вспомним, как оно устроено:</p>
<ul>
<li>Методы объекта <code>document</code> находятся в <code>prototype</code> конструктора, в данном случае – <code>HTMLDocument.prototype</code>.</li>
<li>У <code>HTMLDocument.prototype</code> есть ссылка <code>__proto__</code> на прототип-родитель.</li>
<li>У прототипа-родителя может быть ссылка <code>__proto__</code> на его родитель, и так далее.</li>
</ul>
<p>При поиске свойства в <code>document</code>, если его там нет, оно ищется в <code>document.__proto__</code>, затем в <code>document.__proto__.__proto__</code> и так далее, пока не найдём, или пока цепочка <code>__proto__</code> не закончится. Это обычное устройство класса, без наследования.</p>
<p>Нам нужно лишь узнать, что находится в этих самых <code>__proto__</code>.</p>
<p>Строго говоря, там могут быть любые объекты. Вовсе не обязательно, чтобы объектам из цепочки прототипов соответствовали какие-то конструкторы.</p>
<p>Вполне может быть цепочка, где родители – просто обычные JS-объекты:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">document -&gt; HTMLDocument.prototype -&gt; obj1 -&gt; obj2 -&gt; ...</code></pre>
        </div>
      </div>
      
      </div><p>Однако, здесь мы знаем, что наследование – «на классах», то есть, эти объекты <code>obj1</code>, <code>obj2</code> являются <code>prototype</code> неких функций-конструкторов:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">document -&gt; HTMLDocument.prototype -&gt; F1.prototype -&gt; F2.prototype -&gt; ...</code></pre>
        </div>
      </div>
      
      </div><p>Что стоит на месте <code>F1</code>, <code>F2</code>?</p>
<p>Опять же, если говорить про некие абстрактные объекты, то откуда нам знать, какие функции на них ссылаются через <code>prototype</code>? Ниоткуда. Один объект может быть в <code>prototype</code> хоть у десятка функций.</p>
<p>Но в стандартном прототипном наследовании один объект является <code>prototype</code> ровно у одной функции. Причём при создании функции в её <code>prototype</code> уже есть объект со свойством <code>constructor</code>, которое ссылается обратно на функцию:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">F.prototype = { constructor: F }</code></pre>
        </div>
      </div>
      
      </div><p>Это свойство <code>constructor</code>, если конечно его не удалить или не перезаписать нечаянно (чего делать не следует), и позволяет из прототипа узнать соответствующий ему конструктор.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// цепочка наследования:
alert(HTMLDocument.prototype.constructor); // function HTMLDocument
alert(HTMLDocument.prototype.__proto__.constructor); // function Document
alert(HTMLDocument.prototype.__proto__.__proto__.constructor); // function Node</code></pre>
        </div>
      </div>
      
      </div><p>При выводе объекта через <code>console.dir(document)</code> в Google Chrome, мы тоже можем, раскрывая <code>__proto__</code>, увидеть эти названия (<code>HTMLDocument</code>, <code>Document</code>, <code>Node</code>).</p>
<p>Браузерная консоль их берёт как раз из свойства <code>constructor</code>.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>