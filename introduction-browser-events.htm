<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="ui.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Документ, события, интерфейсы</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="events-and-interfaces.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Основы работы с событиями</span></a></li></ol><h1 class="main__header-title">Введение в браузерные события</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Введение в браузерные события"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Для реакции на действия посетителя и внутреннего взаимодействия скриптов существуют <em>события</em>.</p>
<p><em>Событие</em> – это сигнал от браузера о том, что что-то произошло. Существует много видов событий. Посмотрим список самых часто используемых, пока просто для ознакомления:</p>
<p><strong>События мыши:</strong></p>
<ul>
<li><code>click</code> – происходит, когда кликнули на элемент левой кнопкой мыши</li>
<li><code>contextmenu</code> – происходит, когда кликнули на элемент правой кнопкой мыши</li>
<li><code>mouseover</code> – возникает, когда на элемент наводится мышь</li>
<li><code>mousedown</code> и <code>mouseup</code> – когда кнопку мыши нажали или отжали</li>
<li><code>mousemove</code> – при движении мыши</li>
</ul>
<p><strong>События на элементах управления:</strong></p>
<ul>
<li><code>submit</code> – посетитель отправил форму <code>&lt;form&gt;</code></li>
<li><code>focus</code> –  посетитель фокусируется на элементе, например нажимает на <code>&lt;input&gt;</code></li>
</ul>
<p><strong>Клавиатурные события:</strong></p>
<ul>
<li><code>keydown</code> – когда посетитель нажимает клавишу</li>
<li><code>keyup</code> – когда посетитель отпускает клавишу</li>
</ul>
<p><strong>События документа:</strong></p>
<ul>
<li><code>DOMContentLoaded</code> – когда HTML загружен и обработан, DOM документа полностью построен и доступен.</li>
</ul>
<p><strong>События CSS:</strong></p>
<ul>
<li><code>transitionend</code> – когда CSS-анимация завершена.</li>
</ul>
<p>Также есть и много других событий.</p>
<h2><a class="main__anchor" name="назначение-обработчиков-событий" href="#назначение-обработчиков-событий">Назначение обработчиков событий</a></h2><p>Событию можно назначить <em>обработчик</em>, то есть функцию, которая сработает, как только событие произошло.</p>
<p>Именно благодаря обработчикам JavaScript-код может реагировать на действия посетителя.</p>
<p>Есть несколько способов назначить событию обработчик. Сейчас мы их рассмотрим, начиная от самого простого.</p>
<h3><a class="main__anchor" name="использование-атрибута-html" href="#использование-атрибута-html">Использование атрибута HTML</a></h3><p>Обработчик может быть назначен прямо в разметке, в атрибуте, который называется <code>on&lt;событие&gt;</code>.</p>
<p>Например, чтобы прикрепить <code>click</code>-событие к <code>input</code> кнопке, можно присвоить обработчик <code>onclick</code>, вот так:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:26-50">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input value=&quot;Нажми меня&quot; onclick=&quot;alert('Клик!')&quot; type=&quot;button&quot;&gt;</code></pre>
        </div>
      </div>
      
      </div><p>При клике мышкой на кнопке выполнится код, указанный в атрибуте <code>onclick</code>.</p>
<p>В действии: <input value="Нажми меня" onclick="alert('Клик!');" type="button"></p>
<p>Обратите внимание, для содержимого атрибута <code>onclick</code> используются <em>одинарные кавычки</em>, так как сам атрибут находится в двойных.</p>
<p>Частая ошибка новичков в том, что они забывают, что код находится внутри атрибута. Запись вида <code>onclick=&quot;alert(&quot;Клик!&quot;)&quot;</code>, с двойными кавычками внутри, не будет работать. Если вам действительно нужно использовать именно двойные кавычки, то это можно сделать, заменив их на <code>&amp;quot;</code>, то есть так: <code>onclick=&quot;alert(&amp;quot;Клик!&amp;quot;)&quot;</code>.</p>
<p>Однако, обычно этого не требуется, так как прямо в разметке пишутся только очень простые обработчики. Если нужно сделать что-то сложное, то имеет смысл описать это в функции, и в обработчике вызвать уже её.</p>
<p>Следующий пример по клику запускает функцию <code>countRabbits()</code>.</p>
<div data-trusted="1" class="code-example" data-demo-height="80" data-highlight-inline="14:23-47">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;

  &lt;script&gt;
    function countRabbits() {
      for(var i=1; i&lt;=3; i++) {
        alert(&quot;Кролик номер &quot; + i);
      }
    }
  &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;input type=&quot;button&quot; onclick=&quot;countRabbits()&quot; value=&quot;Считать кроликов!&quot;/&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Как мы помним, атрибут HTML-тега не чувствителен к регистру, поэтому <code>ONCLICK</code> будет работать так же, как <code>onClick</code> или <code>onCLICK</code>… Но, как правило, атрибуты пишут в нижнем регистре: <code>onclick</code>.</p>
<h3><a class="main__anchor" name="использование-свойства-dom-объекта" href="#использование-свойства-dom-объекта">Использование свойства DOM-объекта</a></h3><p>Можно назначать обработчик, используя свойство DOM-элемента <code>on&lt;событие&gt;</code>.</p>
<p>Пример установки обработчика <code>click</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="2-4">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input id=&quot;elem&quot; type=&quot;button&quot; value=&quot;Нажми меня&quot; /&gt;
&lt;script&gt;
  elem.onclick = function() {
    alert( 'Спасибо' );
  };
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Если обработчик задан через атрибут, то браузер читает HTML-разметку, создаёт новую функцию из содержимого атрибута и записывает в свойство <code>onclick</code>.</p>
<p><strong>Этот способ, по сути, аналогичен предыдущему.</strong></p>
<p>Обработчик хранится именно в DOM-свойстве, а атрибут – лишь один из способов его инициализации.</p>
<p>Эти два примера кода работают одинаково:</p>
<ol>
<li>
<p>Только HTML:</p>
<div data-trusted="1" class="code-example" data-demo-height="50" data-highlight-inline="0:21-45">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input type=&quot;button&quot; onclick=&quot;alert('Клик!')&quot; value=&quot;Кнопка&quot;/&gt;</code></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p>HTML + JS:</p>
<div data-trusted="1" class="code-example" data-demo-height="50" data-highlight-block="2-4">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input type=&quot;button&quot; id=&quot;button&quot; value=&quot;Кнопка&quot; /&gt;
&lt;script&gt;
  button.onclick = function() {
    alert( 'Клик!' );
  };
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div></li>
</ol>
<p><strong>Так как DOM-свойство <code>onclick</code>, в итоге, одно, то назначить более одного обработчика так нельзя.</strong></p>
<p>В примере ниже назначение через JavaScript перезапишет обработчик из атрибута:</p>
<div data-trusted="1" class="code-example" data-demo-height="50" data-autorun="true" data-highlight-block="2-4">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input type=&quot;button&quot; id=&quot;elem&quot; onclick=&quot;alert('До')&quot; value=&quot;Нажми меня&quot; /&gt;
&lt;script&gt;
  elem.onclick = function() { // перезапишет существующий обработчик
    alert( 'После' ); // выведется только это
  };
&lt;/script&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-ctorns"
          style="height:50px"
          src="about:blank"></iframe>
      </div>
      </div><p>Кстати, обработчиком можно назначить и уже существующую функцию:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function sayThanks() {
  alert( 'Спасибо!' );
}

elem.onclick = sayThanks;</code></pre>
        </div>
      </div>
      
      </div><p>Если обработчик надоел – его всегда можно убрать назначением <code>elem.onclick = null</code>.</p>
<h2><a class="main__anchor" name="доступ-к-элементу-через-this" href="#доступ-к-элементу-через-this">Доступ к элементу через this</a></h2><p>Внутри обработчика события <code>this</code> ссылается на текущий элемент, то есть на тот, на котором он сработал.</p>
<p>Это можно использовать, чтобы получить свойства или изменить элемент.</p>
<p>В коде ниже <code>button</code> выводит свое содержимое, используя <code>this.innerHTML</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;button onclick=&quot;alert(this.innerHTML)&quot;&gt;Нажми меня&lt;/button&gt;</code></pre>
        </div>
      </div>
      
      </div><p>В действии: <button onclick="alert(this.innerHTML)">Нажми меня</button></p>
<h2><a class="main__anchor" name="частые-ошибки" href="#частые-ошибки">Частые ошибки</a></h2><p>Если вы только начинаете работать с событиями – обратите внимание на следующие особенности.</p>
<p><strong>Функция должна быть присвоена как <code>sayThanks</code>, а не <code>sayThanks()</code>.</strong></p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">button.onclick = sayThanks;</code></pre>
        </div>
      </div>
      
      </div><p>Если добавить скобки, то <code>sayThanks()</code> –  будет уже <em>результат</em> выполнения функции (а так как в ней нет <code>return</code>, то в <code>onclick</code> попадёт <code>undefined</code>). Нам же нужна именно функция.</p>
<p>…А вот в разметке как раз скобки нужны:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input type=&quot;button&quot; id=&quot;button&quot; onclick=&quot;sayThanks()&quot; /&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Это различие просто объяснить. При создании обработчика браузером из атрибута, он автоматически создает функцию из его содержимого. Поэтому последний пример – фактически то же самое, что:</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">button.onclick = function() {
  sayThanks(); // содержимое атрибута
};</code></pre>
        </div>
      </div>
      
      </div><p><strong>Используйте именно функции, а не строки.</strong></p>
<p>Назначение обработчика строкой <code>elem.onclick = &quot;alert(1)&quot;</code> можно иногда увидеть в древнем коде. Это будет работать, но не рекомендуется, могут быть проблемы при сжатии JavaScript. Да и вообще, передавать код в виде строки по меньшей мере странно в языке, который поддерживает Function Expressions. Это возможно лишь по соображениям совместимости, не делайте так.</p>
<p><strong>Не используйте <code>setAttribute</code>.</strong></p>
<p>Такой вызов работать не будет:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// при нажатии на body будут ошибки
// потому что при назначении в атрибут функция будет преобразована в строку
document.body.setAttribute('onclick', function() { alert(1) });</code></pre>
        </div>
      </div>
      
      </div><p><strong>Регистр DOM-свойства имеет значение.</strong></p>
<p>При назначении через DOM нужно использовать свойство <code>onclick</code>, а не <code>ONCLICK</code>.</p>
<h2><a class="main__anchor" name="недостаток-назначения-через-свойство" href="#недостаток-назначения-через-свойство">Недостаток назначения через свойство</a></h2><p>Фундаментальный недостаток описанных выше способов назначения обработчика – невозможность повесить <em>несколько</em> обработчиков на одно событие.</p>
<p>Например, одна часть кода хочет при клике на кнопку делать ее подсвеченной, а другая – выдавать сообщение. Нужно в разных местах два обработчика повесить.</p>
<p>При этом новый обработчик будет затирать предыдущий. Например, следующий код на самом деле назначает один обработчик – последний:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">input.onclick = function() { alert(1); }
// ...
input.onclick = function() { alert(2); } // заменит предыдущий обработчик</code></pre>
        </div>
      </div>
      
      </div><p>Разработчики стандартов достаточно давно это поняли и предложили альтернативный способ назначения обработчиков при помощи специальных методов, которые свободны от указанного недостатка.</p>
<h2><a class="main__anchor" name="addeventlistener-и-removeeventlistener" href="#addeventlistener-и-removeeventlistener">addEventListener и removeEventListener</a></h2><p>Методы <code>addEventListener</code> и <code>removeEventListener</code> являются современным способом назначить или удалить обработчик, и при этом позволяют использовать сколько угодно любых обработчиков.</p>
<p>Назначение обработчика осуществляется вызовом <code>addEventListener</code> с тремя аргументами:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">element.addEventListener(event, handler[, phase]);</code></pre>
        </div>
      </div>
      
      </div><dl>
<dt><code>event</code></dt>
<dd>Имя события, например <code>click</code></dd>
<dt><code>handler</code></dt>
<dd>Ссылка на функцию, которую надо поставить обработчиком.</dd>
<dt><code>phase</code></dt>
<dd>Необязательный аргумент, «фаза», на которой обработчик должен сработать. Этот аргумент редко нужен, мы его рассмотрим позже.</dd>
</dl>
<p>Удаление обработчика осуществляется вызовом <code>removeEventListener</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// передать те же аргументы, что были у addEventListener
element.removeEventListener(event, handler[, phase]);</code></pre>
        </div>
      </div>
      
      </div><div class="important important_warn">
            <div class="important__header"><span class="important__type">Удаление требует именно ту же функцию</span></div>
            <div class="important__content"><p>Для удаления нужно передать именно ту функцию-обработчик которая была назначена.</p>
<p>Вот так <code>removeEventListener</code> не сработает:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">elem.addEventListener( &quot;click&quot; , function() {alert('Спасибо!')});
// ....
elem.removeEventListener( &quot;click&quot;, function() {alert('Спасибо!')});</code></pre>
        </div>
      </div>
      
      </div><p>В <code>removeEventListener</code> передана не та же функция, а другая, с одинаковым кодом, но это не важно.</p>
<p>Вот так правильно:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function handler() {
  alert( 'Спасибо!' );
}

input.addEventListener(&quot;click&quot;, handler);
// ....
input.removeEventListener(&quot;click&quot;, handler);</code></pre>
        </div>
      </div>
      
      </div><p>Обратим внимание – если функцию не сохранить где-либо, а просто передать в <code>addEventListener</code>, как в предыдущем коде, то потом получить её обратно, чтобы снять обработчик, будет невозможно. Нет метода, который позволяет считать обработчики событий, назначенные через <code>addEventListener</code>.</p>
</div></div>
<p>Метод <code>addEventListener</code> позволяет добавлять несколько обработчиков на одно событие одного элемента, например:</p>
<div data-trusted="1" class="code-example" data-highlight-block="11-13">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input id=&quot;elem&quot; type=&quot;button&quot; value=&quot;Нажми меня&quot;/&gt;

&lt;script&gt;
  function handler1() {
    alert('Спасибо!');
  };

  function handler2() {
    alert('Спасибо ещё раз!');
  }

  elem.onclick = function() { alert(&quot;Привет&quot;); };
  elem.addEventListener(&quot;click&quot;, handler1); // Спасибо!
  elem.addEventListener(&quot;click&quot;, handler2); // Спасибо ещё раз!
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Как видно из примера выше, можно одновременно назначать обработчики и через DOM-свойство и через <code>addEventListener</code>. Однако, во избежание путаницы, рекомендуется выбрать один способ.</p>
<div class="important important_warn">
            <div class="important__header"><span class="important__type"><code>addEventListener</code> работает всегда, а DOM-свойство – нет</span></div>
            <div class="important__content"><p>У специальных методов есть ещё одно преимущество перед DOM-свойствами.</p>
<p>Есть некоторые события, которые нельзя назначить через DOM-свойство, но можно через <code>addEventListener</code>.</p>
<p>Например, таково событие <code>transitionend</code>, то есть окончание CSS-анимации. В большинстве браузеров оно требует назначения через <code>addEventListener</code>.</p>
<p>Вы можете проверить это, запустив код в примере ниже. Как правило, сработает лишь второй обработчик, но не первый.</p>
<div data-trusted="1" class="code-example" data-highlight-block="20-22">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;style&gt;
  button {
    transition: width 1s;
    width: 100px;
  }

  .wide {
    width: 300px;
  }
&lt;/style&gt;

&lt;button id=&quot;elem&quot; onclick=&quot;this.classList.toggle('wide');&quot;&gt;
  Нажми меня
&lt;/button&gt;

&lt;script&gt;
  elem.ontransitionend = function() {
    alert( &quot;ontransitionend&quot; ); // не сработает
  };

  elem.addEventListener(&quot;transitionend&quot;, function() {
    alert( &quot;addEventListener&quot; ); // сработает по окончании анимации
  });
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div></div></div>
<h2><a class="main__anchor" name="отличия-ie8" href="#отличия-ie8">Отличия IE8-</a></h2><p>При работе с событиями в IE8- есть много отличий. Как правило, они формальны – некое свойство или метод называются по-другому. Начиная с версии 9, также работают и стандартные свойства и методы.</p>
<p><strong>В IE8- вместо <code>addEventListener/removeEventListener</code> используются свои методы.</strong></p>
<p>Назначение обработчика осуществляется вызовом <code>attachEvent</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">element.attachEvent(&quot;on&quot; + event, handler);</code></pre>
        </div>
      </div>
      
      </div><p>Удаление обработчика – вызовом <code>detachEvent</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">element.detachEvent(&quot;on&quot; + event, handler);</code></pre>
        </div>
      </div>
      
      </div><p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function handler() {
  alert( 'Спасибо!' );
}
button.attachEvent(&quot;onclick&quot;, handler) // Назначение обработчика
  // ....
button.detachEvent(&quot;onclick&quot;, handler) // Удаление обработчика</code></pre>
        </div>
      </div>
      
      </div><p>Как видите, почти то же самое, только событие должно включать префикс <code>on</code>.</p>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">У обработчиков, назначенных с <code>attachEvent</code>, нет <code>this</code></span></div>
            <div class="important__content"><p>Обработчики, назначенные с <code>attachEvent</code> не получают <code>this</code>!</p>
<p>Это важная особенность и подводный камень старых IE.</p>
</div></div>
<p>Чтобы ваш код работал в старом IE, нужно либо использовать DOM-свойства, то есть <code>onclick</code>, либо подключить полифилл для современных методов, например <a href="https://gist.github.com/jonathantneal/3748027">такой</a> или с сервиса <a href="http://polyfill.webservices.ft.com/v1/docs/features/">polyfill.io</a> или какой-то другой.</p>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><p>Есть три способа назначения обработчиков событий:</p>
<ol>
<li>Атрибут HTML: <code>onclick=&quot;...&quot;</code>.</li>
<li>Свойство: <code>elem.onclick = function</code>.</li>
<li>Специальные методы:</li>
</ol>
<ul>
<li>Современные: <code>elem.addEventListener( событие, handler[, phase])</code>, удаление через <code>removeEventListener</code>.</li>
<li>Для старых IE8-: <code>elem.attachEvent( on+событие, handler )</code>, удаление через <code>detachEvent</code>.</li>
</ul>
<p>Сравнение <code>addEventListener</code> и <code>onclick</code>:</p>
<div class="balance"><div class="balance__pluses">
      <div class="balance__content">
      <div class="balance__title">Достоинства</div><ul class="balance__list"><li>Некоторые события можно назначить только через <code>addEventListener</code>.</li>
<li>Метод <code>addEventListener</code> позволяет назначить много обработчиков на одно событие.</li>
</ul></div></div><div class="balance__minuses">
      <div class="balance__content">
      <div class="balance__title">Недостатки</div><ul class="balance__list"><li>Обработчик, назначенный через <code>onclick</code>, проще удалить или заменить.</li>
<li>Метод <code>onclick</code> кросс-браузерный.</li>
</ul></div></div></div><p>Этим введением мы только открываем работу с событиями, но вы уже можете решать разнообразные задачи с их использованием.</p>
</div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#спрятать-при-клике" name="спрятать-при-клике" class="main__anchor">Спрятать при клике</a></h3><a href="task/hide-other.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Используя JavaScript, сделайте так, чтобы при клике на кнопку исчезал элемент с <code>id=&quot;text&quot;</code>.</p>
<p>Демо:</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:80px" src="https://js.cx/task/hide-other/solution/"></iframe>
  </div><p><a href="http://plnkr.co/edit/PvgR6Kt1SYYd0g7C03vk?p=preview" target="_blank" data-plunk-id="PvgR6Kt1SYYd0g7C03vk">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p><a href="http://plnkr.co/edit/qO0FACA4M9t28SzhSUFL?p=preview" target="_blank" data-plunk-id="qO0FACA4M9t28SzhSUFL">Открыть решение в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#спрятаться" name="спрятаться" class="main__anchor">Спрятаться</a></h3><a href="task/hide-self-onclick.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Создайте кнопку, при клике на которую, она будет скрывать сама себя.</p>
<p>Как эта:
<input type="button" onclick="this.style.display='none'" value="Нажми, чтобы меня спрятать"/></p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Решение задачи заключается в использовании <code>this</code> в обработчике.</p>
<div data-trusted="1" class="code-example" data-demo-height="50">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input type=&quot;button&quot; onclick=&quot;this.style.display='none'&quot; value=&quot;Нажми, чтобы меня спрятать&quot; /&gt;</code></pre>
        </div>
      </div>
      
      </div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#какие-обработчики-сработают" name="какие-обработчики-сработают" class="main__anchor">Какие обработчики сработают?</a></h3><a href="task/which-handlers-run.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>В переменной <code>button</code> находится кнопка.</p>
<p>Изначально обработчиков на ней нет.</p>
<p>Что будет выведено при клике после выполнения кода?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">button.addEventListener(&quot;click&quot;, function() { alert(&quot;1&quot;); });

button.removeEventListener(&quot;click&quot;, function() { alert(&quot;1&quot;); });

button.onclick = function() { alert(2); };</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Ответ: будет выведено <code>1</code> и <code>2</code>.</p>
<p>Первый обработчик сработает, так как он не убран вызовом <code>removeEventListener</code>. Для удаления обработчика нужно передать в точности ту же функцию (ссылку на нее), что была назначена, а в коде передается такая же с виду функция, но, тем не менее, это другой объект.</p>
<p>Для того, чтобы удалить функцию-обработчик, нужно где-то сохранить ссылку на неё, например так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function handler() {
  alert( &quot;1&quot; );
}

button.addEventListener(&quot;click&quot;, handler);
button.removeEventListener(&quot;click&quot;, handler);</code></pre>
        </div>
      </div>
      
      </div><p>Обработчик <code>button.onclick</code> сработает независимо и в дополнение к назначенному в <code>addEventListener</code>.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#раскрывающееся-меню" name="раскрывающееся-меню" class="main__anchor">Раскрывающееся меню</a></h3><a href="task/sliding-menu.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Создайте меню, которое раскрывается/сворачивается при клике:</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:100px" src="https://js.cx/task/sliding-menu/solution/"></iframe>
  </div><p>P.S. HTML/CSS исходного документа понадобится изменить.</p>
<p><a href="http://plnkr.co/edit/bG6JVYwmsYeLoUMP25nc?p=preview" target="_blank" data-plunk-id="bG6JVYwmsYeLoUMP25nc">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Для начала, зададим структуру HTML/CSS.</p>
<p>Меню является отдельным графическим компонентом, его лучше поместить в единый DOM-элемент.</p>
<p>Элементы меню с точки зрения семантики являются списком <code>UL/LI</code>. Заголовок должен быть отдельным кликабельным элементом.</p>
<p>Получаем структуру:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div class=&quot;menu&quot;&gt;
  &lt;span class=&quot;title&quot;&gt;Сладости (нажми меня)!&lt;/span&gt;
  &lt;ul&gt;
    &lt;li&gt;Пирог&lt;/li&gt;
    &lt;li&gt;Пончик&lt;/li&gt;
    &lt;li&gt;Мед&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Для заголовка лучше использовать именно <code>SPAN</code>, а не <code>DIV</code>, так как <code>DIV</code> постарается занять 100% ширины, и мы не сможем ловить <code>click</code> только на тексте:</p>
<div data-trusted="1" class="code-example" data-demo-height="50" data-autorun="true">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div style=&quot;border: solid red 1px&quot;&gt;[Сладости (нажми меня)!]&lt;/div&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-7ttwyv"
          style="height:50px"
          src="about:blank"></iframe>
      </div>
      </div><p>…А <code>SPAN</code> – это элемент с <code>display: inline</code>, поэтому он занимает ровно столько места, сколько занимает текст внутри него:</p>
<div data-trusted="1" class="code-example" data-demo-height="50" data-autorun="true">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;span style=&quot;border: solid red 1px&quot;&gt;[Сладости (нажми меня)!]&lt;/span&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-g0hyyn"
          style="height:50px"
          src="about:blank"></iframe>
      </div>
      </div><p>Раскрытие/закрытие сделаем путём добавления/удаления класса <code>.open</code> к меню, который отвечает за стрелочку и отображение <code>UL</code>.</p>
<p>Обычно меню будет закрыто:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-css"><code class="language-css">.menu ul {
  margin: 0;
  list-style: none;
  padding-left: 20px;
  display: none;
}

.menu .title::before {
  content: '▶ ';
  font-size: 80%;
  color: green;
}</code></pre>
        </div>
      </div>
      
      </div><p>Если же меню раскрыто, то есть имеет классы <code>.menu</code> и <code>.open</code>, то стрелочка слева заголовка меняется и список детей показывается:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-css"><code class="language-css">.menu.open .title::before {
  content: '▼ ';
}

.menu.open ul {
  display: block;
}</code></pre>
        </div>
      </div>
      
      </div><p>Для JavaScript остался минимум работы – только добавить/удалить класс при клике.</p>
<p><a href="http://plnkr.co/edit/oDrpWsrVRAZBJyFTnc41?p=preview" target="_blank" data-plunk-id="oDrpWsrVRAZBJyFTnc41">Открыть решение в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#спрятать-сообщение" name="спрятать-сообщение" class="main__anchor">Спрятать сообщение</a></h3><a href="task/hide-message.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Есть список сообщений. Добавьте каждому сообщению по кнопке для его скрытия.</p>
<p>Результат:</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:450px" src="https://js.cx/task/hide-message/solution/"></iframe>
  </div><p>P.S. Как лучше отобразить кнопку справа-сверху: через <code>position:absolute</code> или <code>float:right</code>? Почему?</p>
<p><a href="http://plnkr.co/edit/tMa8lvfLgm2f6Fz7gLRk?p=preview" target="_blank" data-plunk-id="tMa8lvfLgm2f6Fz7gLRk">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><ol>
<li>
<p>Изменим HTML/CSS, чтобы кнопка была в нужном месте сообщения. Кнопка – это тег <code>&lt;button&gt;</code>, поэтому понадобится несколько стилей.</p>
<p>Расположить кнопку справа можно при помощи <code>position:relative</code> для <code>pane</code>, а для кнопки <code>position:absolute + right/top</code>. Так как <code>position:absolute</code> вынимает элемент из потока, то кнопка может частично оказаться «сверху» текста заголовка, перекрыв его конец. Чтобы этого не произошло, можно добавить <code>padding-right</code> к заголовку.</p>
<p>Если использовать <code>float:right</code>, то кнопка никогда не перекроет текст. Это, пожалуй хорошо.</p>
<p>С другой стороны, потенциальным преимуществом способа с <code>position</code> по сравнению с <code>float</code> в данном случае является возможность поместить элемент кнопки в HTML <em>после текста</em>, а не до него.</p>
</li>
<li>
<p>Для того, чтобы получить кнопку из контейнера, используем <code>querySelectorAll</code>. На каждую кнопку повесим обработчик, который будет убирать родителя. Найти родителя можно через <code>parentNode</code>.</p>
</li>
</ol>
<p><a href="http://plnkr.co/edit/ZpAFre1IggAspSRZkzJ3?p=preview" target="_blank" data-plunk-id="ZpAFre1IggAspSRZkzJ3">Открыть решение в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#карусель" name="карусель" class="main__anchor">Карусель</a></h3><a href="task/carousel/default.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 4</span></div><div class="task__content"><p>Напишите «Карусель» – ленту изображений, которую можно листать влево-вправо нажатием на стрелочки.</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:200px" src="https://js.cx/task/carousel/solution/"></iframe>
  </div><p>В дальнейшем к ней можно легко добавить анимацию, динамическую подгрузку и другие возможности.</p>
<p>P.S. В этой задаче разработка HTML/CSS-структуры составляет 90% решения.</p>
<p><a href="http://plnkr.co/edit/0aep0ftqKRvuYpZQtz1N?p=preview" target="_blank" data-plunk-id="0aep0ftqKRvuYpZQtz1N">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Лента изображений в разметке должна быть представлена как список <code>&lt;ul&gt;</code> тегов <code>&lt;img&gt;</code>.</p>
<p>Нужно расположить его внутри <code>&lt;div&gt;</code> фиксированного размера, так чтобы в один момент была видна только нужная часть списка:</p>
<figure><div class="image" style="width:488px">
      <div class="image__ratio" style="padding-top:50.409836065573764%"></div>
      <img src="task/carousel/carousel1.png" alt="" width="488" height="246" class="image__image">
      </div></figure><p>Чтобы список был длинный и элементы не переходили вниз, ему ставится <code>width: 9999px</code>, а элементам <code>&lt;li&gt;</code>, соответственно, <code>float:left</code>, либо для элементов используется <code>display: inline-block</code>, как в этом решении.</p>
<p>Главное – не использовать <code>display:inline</code>, так как такие элементы имеют дополнительные отступы снизу для возможных «хвостов букв».</p>
<p>В частности, для <code>&lt;img&gt;</code> нужно поставить в стилях явно <code>display:block</code>, чтобы пространства под ними не оставалось.</p>
<p>Для «прокрутки» будем сдвигать <code>&lt;ul&gt;</code>. Это можно делать по-разному, например, назначением CSS-свойства <code>transform: translateX()</code> или <code>margin-left</code>:</p>
<figure><div class="image" style="width:639px">
      <div class="image__ratio" style="padding-top:38.497652582159624%"></div>
      <img src="task/carousel/carousel2.png" alt="" width="639" height="246" class="image__image">
      </div></figure><p>У внешнего <code>&lt;div&gt;</code> фиксированная ширина, поэтому «лишние» изображения обрезаются.</p>
<p>Снаружи окошка находятся стрелки и внешний контейнер.</p>
<p><a href="http://plnkr.co/edit/mmB7VI860TmlheRj7jlm?p=preview" target="_blank" data-plunk-id="mmB7VI860TmlheRj7jlm">Открыть решение в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>