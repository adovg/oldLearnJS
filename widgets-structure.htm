<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="ui.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Документ, события, интерфейсы</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="widgets.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Создание графических компонентов</span></a></li></ol><h1 class="main__header-title">Графические компоненты</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Графические компоненты"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Первый и главный шаг в наведении порядка – это оформить код в объекты, каждый из которых будет решать свою задачу.</p>
<p>Здесь мы сосредоточимся на графических компонентах, которые также называют «виджетами».</p>
<p>В браузерах есть встроенные виджеты, например <code>&lt;select&gt;</code>, <code>&lt;input&gt;</code> и другие элементы, о которых мы даже и не думаем, «как они работают». Они «просто работают»: показывают значение, вызывают события…</p>
<p>Наша задача – сделать то же самое на уровне выше. Мы будем создавать объекты, которые генерируют меню, диалог или другие компоненты интерфейса, и дают возможность удобно работать с ними.</p>
<h2><a class="main__anchor" name="виджет-menu" href="#виджет-menu">Виджет Menu</a></h2><p>Мы начнём работу с виджета, который предусматривает уже готовую разметку.</p>
<p>То есть, в нужном месте HTML находится DOM-структура для меню – заголовок и список опций:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div class=&quot;menu&quot; id=&quot;sweets-menu&quot;&gt;
  &lt;span class=&quot;title&quot;&gt;Сладости&lt;/span&gt;
  &lt;ul&gt;
    &lt;li&gt;Торт&lt;/li&gt;
    &lt;li&gt;Пончик&lt;/li&gt;
    &lt;li&gt;...&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Далее она может дополняться, изменяться, но в начале – она такая.</p>
<p>Обратим внимание на важные соглашения виджета:</p>
<dl>
<dt>Вся разметка заключена в корневой элемент <code>&lt;div class=&quot;menu&quot; id=&quot;sweets-menu&quot;&gt;</code>.</dt>
<dd>
<p>Это очень удобно: вынул этот элемент из DOM – нет меню, вставил в другое место – переместил меню. Кроме того, можно удобно искать подэлементы.</p>
</dd>
<dt>Внутри корневого элемента – только классы, не <code>id</code>.</dt>
<dd>
<p>Документ вполне может содержать много различных меню. Они не должны конфликтовать между собой, поэтому для разметки везде используются классы.</p>
<p>Исключение – корневой элемент. В данном случае мы предполагаем, что данное конкретное «меню сладостей» в документе только одно, поэтому даём ему <code>id</code>.</p>
</dd>
</dl>
<h1><a class="main__anchor" name="класс-виджета" href="#класс-виджета">Класс виджета</a></h1><p>Для работы с разметкой будем создавать объект <code>new Menu</code> и передавать ему корневой элемент. В конструкторе он поставит необходимые обработчики:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Menu(options) {
  var elem = options.elem;

  elem.onmousedown = function() {
    return false;
  }

  elem.onclick = function(event) {
    if (event.target.closest('.title')) {
      elem.classList.toggle('open');
    }
  };

}

// использование
var menu = new Menu({
  elem: document.getElementById('sweets-menu')
});</code></pre>
        </div>
      </div>
      
      </div><p>Меню:</p>
<div class="code-tabs code-tabs_result_on"><div class="code-tabs__tools"><div class="code-tabs__scroll-wrap"><button title="&amp;larr;" data-code-tabs-left class="code-tabs__scroll-button code-tabs__scroll-button_left"></button></div><div class="code-tabs__switches-wrap"><div data-code-tabs-switches class="code-tabs__switches"><div class="code-tabs__switches-items"><div class="code-tabs__switch code-tabs__switch_current">Результат</div><div class="code-tabs__switch">menu.js</div><div class="code-tabs__switch">style.css</div><div class="code-tabs__switch">index.html</div></div></div></div><div class="code-tabs__scroll-wrap"><button title="&amp;rarr;" data-code-tabs-right class="code-tabs__scroll-button code-tabs__scroll-button_right"></button></div><div class="code-tabs__buttons"><a target="_blank" title="открыть в отдельном окне" href="article/widgets-structure/menu/default.htm" class="code-tabs__button code-tabs__button_external"></a><a target="_blank" title="редактировать в песочнице" href="http://plnkr.co/edit/wcdXjYE7iO4plB4DJIxd?p=preview" class="code-tabs__button code-tabs__button_edit"></a></div></div><div data-code-tabs-content style="height:200px" class="code-tabs__content"><div class="code-tabs__section code-tabs__section_current"><iframe src="article/widgets-structure/menu/default.htm" class="code-tabs__result"></iframe></div><div class="code-tabs__section"><pre class="language-javascript line-numbers"><code>function Menu(options) {
  var elem = options.elem;

  elem.onmousedown = function() {
    return false;
  }

  elem.onclick = function(event) {
    if (event.target.closest('.title')) {
      elem.classList.toggle('open');
    }
  };

}</code></pre></div><div class="code-tabs__section"><pre class="language-css line-numbers"><code>.menu ul {
  display: none;
  margin: 0;
}

.menu .title {
  font-weight: bold;
  cursor: pointer;
}

.menu .title:before {
  content: '▶';
  padding-right: 6px;
  color: green;
}

.menu.open ul {
  display: block;
}

.menu.open .title:before {
  content: '▼';
}</code></pre></div><div class="code-tabs__section"><pre class="language-markup line-numbers"><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;
  &lt;script src=&quot;https://cdn.polyfill.io/v1/polyfill.js?features=Element.prototype.closest&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;menu.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;

  &lt;div id=&quot;sweets-menu&quot; class=&quot;menu&quot;&gt;
    &lt;span class=&quot;title&quot;&gt;Сладости&lt;/span&gt;
    &lt;ul&gt;
      &lt;li&gt;Торт&lt;/li&gt;
      &lt;li&gt;Пончик&lt;/li&gt;
      &lt;li&gt;Пирожное&lt;/li&gt;
      &lt;li&gt;Шоколадка&lt;/li&gt;
      &lt;li&gt;Мороженое&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;

  &lt;script&gt;
    var menu = new Menu({
      elem: document.getElementById('sweets-menu')
    });
  &lt;/script&gt;

&lt;/body&gt;

&lt;/html&gt;</code></pre></div></div></div><p>Это, конечно, только первый шаг, но уже здесь видны некоторые важные соглашения в коде.</p>
<dl>
<dt>У конструктора только один аргумент – объект <code>options</code>.</dt>
<dd>
<p>Это удобно, так как у графических компонентов обычно много настроек, большинство из которых имеют разумные значения «по умолчанию». Если передавать аргументы через запятую – их будет слишком много.</p>
</dd>
<dt>Обработчики назначаются через делегирование.</dt>
<dd>
<p>Вместо того, чтобы найти элемент и поставить обработчик на него:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var titleElem = elem.querySelector('.title');

titleElem.onclick = function() {
  elem.classList.toggle('open');
}</code></pre>
        </div>
      </div>
      
      </div><p>…Мы ставим обработчик на корневой <code>elem</code> и используем делегирование:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">elem.onclick = function(event) {
  if (event.target.closest('.title')) {
    elem.classList.toggle('open');
  }
};</code></pre>
        </div>
      </div>
      
      </div><p>Это ускоряет инициализацию, так как не надо искать элементы, и даёт возможность в любой момент менять DOM внутри, в том числе через <code>innerHTML</code>, без необходимости переставлять обработчик.</p>
</dd>
</dl>
<p>В этот код лучше добавить дополнительную проверку на то, что найденный <code>.title</code> находится внутри <code>elem</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">elem.onclick = function(event) {
  var closestTitle = event.target.closest('.title');
  if (closestTitle &amp;&amp; elem.contains(closestTitle)) {
    elem.classList.toggle('open');
  }
};</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="публичные-методы" href="#публичные-методы">Публичные методы</a></h2><p>Уважающий себя компонент обычно имеет публичные методы, которые позволяют управлять им снаружи.</p>
<p>Рассмотрим повнимательнее этот фрагмент:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">if (event.target.closest('.title')) {
  elem.classList.toggle('open');
}</code></pre>
        </div>
      </div>
      
      </div><p>Здесь в обработчике события сразу код работы с элементом. Пока одна строка – всё понятно, но если их будет много, то при чтении понадобится долго и упорно вникать: «А что же, всё-таки, такое делается при клике?»</p>
<p>Для улучшения читаемости выделим обработчик в отдельную функцию <code>toggle</code>, которая к тому же станет полезным публичным методом:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Menu(options) {
  var elem = options.elem;

  elem.onmousedown = function() {
    return false;
  }

  elem.onclick = function(event) {
    if (event.target.closest('.title')) {
      toggle();
    }
  };

  function toggle() {
    elem.classList.toggle('open');
  }

  this.toggle = toggle;
}</code></pre>
        </div>
      </div>
      
      </div><p>Теперь метод <code>toggle</code> можно использовать и снаружи:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var menu = new Menu(...);
menu.toggle();</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="генерация-dom-элемента" href="#генерация-dom-элемента">Генерация DOM-элемента</a></h2><p>До этого момента меню «оживляло» уже существующий HTML.</p>
<p>Но далеко не всегда в HTML уже есть готовая разметка. В сложных интерфейсах намного чаще её нет, а есть данные, на основе которых компонент генерирует разметку.</p>
<p>В случае меню, данные – это набор пунктов меню, которые передаются конструктору.</p>
<p>Для генерации DOM добавим меню три метода:</p>
<ul>
<li><code>render()</code> – генерирует корневой DOM-элемент и заголовок меню.</li>
<li><code>renderItems()</code> – генерирует DOM для списка опций <code>ul/li</code>.</li>
<li><code>getElem()</code> – возвращает DOM-элемент меню, при необходимости запуская генерацию, публичный метод.</li>
</ul>
<p>Функция генерации корневого элемента с заголовком <code>render</code> отделена от генерации списка <code>renderItems</code>. Почему – будет видно чуть далее.</p>
<p>Новый способ использования меню:</p>
<div data-trusted="1" class="code-example" data-highlight-block="0-0,12-12,15-15">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// создать объект меню с данным заголовком и опциями
var menu = new Menu({
  title: &quot;Сладости&quot;,
  items: [
    &quot;Торт&quot;,
    &quot;Пончик&quot;,
    &quot;Пирожное&quot;,
    &quot;Шоколадка&quot;,
    &quot;Мороженое&quot;
  ]
});

// получить сгенерированный DOM-элемент меню
var elem = menu.getElem();

// вставить меню в нужное место страницы
document.body.appendChild(elem);</code></pre>
        </div>
      </div>
      
      </div><p>Код <code>Menu</code> с новыми методами:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Menu(options) {
  var elem;

  function getElem() {
    if (!elem) render();
    return elem;
  }

  function render() {
    elem = document.createElement('div');
    elem.className = &quot;menu&quot;;

    var titleElem = document.createElement('span');
    elem.appendChild(titleElem);
    titleElem.className = &quot;title&quot;;
    titleElem.textContent = options.title;

    elem.onmousedown = function() {
      return false;
    };

    elem.onclick = function(event) {
      if (event.target.closest('.title')) {
        toggle();
      }
    }

  }

  function renderItems() {
    var items = options.items || [];
    var list = document.createElement('ul');
    items.forEach(function(item) {
      var li = document.createElement('li');
      li.textContent = item;
      list.appendChild(li);
    });
    elem.appendChild(list);
  }

  function open() {
    if (!elem.querySelector('ul')) {
      renderItems();
    }
    elem.classList.add('open');
  };

  function close() {
    elem.classList.remove('open');
  };

  function toggle() {
    if (elem.classList.contains('open')) close();
    else open();
  };

  this.getElem = getElem;
  this.toggle = toggle;
  this.close = close;
  this.open = open;
}</code></pre>
        </div>
      </div>
      
      </div><p>Отметим некоторые особенности этого кода.</p>
<dl>
<dt>Обработчики отделяются от реальных действий.</dt>
<dd>
<p>В обработчике <code>onclick</code> мы «ловим» событие и выясняем, что именно произошло. Возможно, нужно проверить  <code>event.target</code>, координаты, клавиши-модификаторы, и т.п. Это всё можно делать здесь же.</p>
<p>Выяснив, что нужно сделать, обработчик <code>onclick</code> не делает это сам, а вызывает для этого соответствующий метод. Этот метод уже не знает ничего о событии, он просто делает что-то с виджетом. Его можно вызвать и отдельно, не из обработчика.</p>
<p>Здесь есть ряд важных плюсов:</p>
</dd>
</dl>
<ul>
<li>Обработчик <code>onclick</code> не «распухает» чрезмерно.</li>
<li>Код гораздо лучше читается.</li>
<li>Метод можно повторно использовать, в том числе и сделать публичным, как в коде выше.</li>
</ul>
<dl>
<dt>Генерация DOM, по возможности, должна быть «ленивой».</dt>
<dd>
<p>Мы стараемся откладывать работу до момента, когда она реально нужна. Например, когда <code>new Menu</code> создаётся, то переменная <code>elem</code> лишь объявляется. DOM-дерево будет сгенерировано только при вызове <code>getElem()</code> функцией <code>render()</code>.</p>
<p>Более того! Пока меню закрыто – достаточно заголовка. Кроме того, возможно, посетитель вообще никогда не раскроет это меню, так зачем генерировать список раньше времени? А при первом открытии <code>open()</code> вызовет функцию <code>renderItems()</code>, которая специально для этого выделена отдельно от <code>render()</code>.</p>
<p><strong>Фаза инициализации очень чувствительна к производительности, так как обычно в сложном интерфейсе создаётся много всего.</strong></p>
<p>Если изначально подходить к оптимизации на этой фазе «спустя рукава», то потом поправить долгий старт может быть сложно. Тем более, что инициализация – это фундамент, начало работы виджета, её оптимизация в будущем может потребовать сильных изменений кода.</p>
<p>Конечно, здесь, как и везде в оптимизации – без фанатизма. Бывают ситуации, когда гораздо удобнее что-то сделать сразу. Если это один элемент, то оптимизация здесь ни к чему. А если большой фрагмент DOM, который, как в случае с меню, прямо сейчас не нужен – то лучше отложить.</p>
</dd>
</dl>
<p>В действии:</p>
<div class="code-tabs code-tabs_result_on"><div class="code-tabs__tools"><div class="code-tabs__scroll-wrap"><button title="&amp;larr;" data-code-tabs-left class="code-tabs__scroll-button code-tabs__scroll-button_left"></button></div><div class="code-tabs__switches-wrap"><div data-code-tabs-switches class="code-tabs__switches"><div class="code-tabs__switches-items"><div class="code-tabs__switch code-tabs__switch_current">Результат</div><div class="code-tabs__switch">menu.js</div><div class="code-tabs__switch">style.css</div><div class="code-tabs__switch">index.html</div></div></div></div><div class="code-tabs__scroll-wrap"><button title="&amp;rarr;" data-code-tabs-right class="code-tabs__scroll-button code-tabs__scroll-button_right"></button></div><div class="code-tabs__buttons"><a target="_blank" title="открыть в отдельном окне" href="article/widgets-structure/menu-dom/default.htm" class="code-tabs__button code-tabs__button_external"></a><a target="_blank" title="редактировать в песочнице" href="http://plnkr.co/edit/9x4j3By1tOgZXIv5W1l8?p=preview" class="code-tabs__button code-tabs__button_edit"></a></div></div><div data-code-tabs-content style="height:200px" class="code-tabs__content"><div class="code-tabs__section code-tabs__section_current"><iframe src="article/widgets-structure/menu-dom/default.htm" class="code-tabs__result"></iframe></div><div class="code-tabs__section"><pre class="language-javascript line-numbers"><code>function Menu(options) {
  var elem;

  function getElem() {
    if (!elem) render();
    return elem;
  }

  function render() {
    elem = document.createElement('div');
    elem.className = &quot;menu&quot;;

    var titleElem = document.createElement('span');
    elem.appendChild(titleElem);
    titleElem.className = &quot;title&quot;;
    titleElem.textContent = options.title;

    elem.onmousedown = function() {
      return false;
    };

    elem.onclick = function(event) {
      if (event.target.closest('.title')) {
        toggle();
      }
    }

  }

  function renderItems() {
    var items = options.items || [];
    var list = document.createElement('ul');
    items.forEach(function(item) {
      var li = document.createElement('li');
      li.textContent = item;
      list.appendChild(li);
    });
    elem.appendChild(list);
  }

  function open() {
    if (!elem.querySelector('ul')) {
      renderItems();
    }
    elem.classList.add('open');
  };

  function close() {
    elem.classList.remove('open');
  };

  function toggle() {
    if (elem.classList.contains('open')) close();
    else open();
  };

  this.getElem = getElem;
  this.toggle = toggle;
  this.close = close;
  this.open = open;
}</code></pre></div><div class="code-tabs__section"><pre class="language-css line-numbers"><code>.menu ul {
  display: none;
  margin: 0;
}

.menu .title {
  font-weight: bold;
  cursor: pointer;
}

.menu .title:before {
  content: '▶';
  padding-right: 6px;
  color: green;
}

.menu.open ul {
  display: block;
}

.menu.open .title:before {
  content: '▼';
}</code></pre></div><div class="code-tabs__section"><pre class="language-markup line-numbers"><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;
  &lt;script src=&quot;https://cdn.polyfill.io/v1/polyfill.js?features=Element.prototype.closest&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;menu.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;

  &lt;button onclick=&quot;menu.toggle()&quot;&gt;menu.toggle()&lt;/button&gt;
  &lt;button onclick=&quot;menu.open()&quot;&gt;menu.open()&lt;/button&gt;
  &lt;button onclick=&quot;menu.close()&quot;&gt;menu.close()&lt;/button&gt;

  &lt;script&gt;
    var menu = new Menu({
      title: &quot;Сладости&quot;,
      items: [
        &quot;Торт&quot;,
        &quot;Пончик&quot;,
        &quot;Пирожное&quot;,
        &quot;Шоколадка&quot;,
        &quot;Мороженое&quot;
      ]
    });

    document.body.appendChild(menu.getElem());
  &lt;/script&gt;

&lt;/body&gt;

&lt;/html&gt;</code></pre></div></div></div><h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><p>Мы начали создавать компонент «с чистого листа», пока без дополнительных библиотек.</p>
<p>Основные принципы:</p>
<ul>
<li>Виджет – это объект, который либо контролирует готовое дерево DOM, либо создаёт своё.</li>
<li>В конструктор виджета передаётся объект аргументов <code>options</code>.</li>
<li>Виджет при необходимости создаёт элемент или «оживляет» готовый. Внутри в разметке не используются <code>id</code>.</li>
<li>Обработчики назначаются через делегирование – для производительности и упрощения виджета.</li>
<li>Обработчики событий вызывают соответствующий метод, не пытаются делать всё сами.</li>
<li>При инициализации, если существенный участок работы можно отложить до реального задействования виджета – откладываем его.</li>
</ul>
</div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#часики" name="часики" class="main__anchor">Часики</a></h3><a href="task/clock.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Создайте компонент «Часы» (Clock).</p>
<p>Интерфейс:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var clock = new Clock({
  elem: элемент
});

clock.start(); // старт
clock.stop(); // стоп</code></pre>
        </div>
      </div>
      
      </div><p>Остальные методы, если нужны, должны быть приватными.</p>
<p>При нажатии на <code>alert</code> часы должны приостанавливаться, а затем продолжать идти с правильным временем.</p>
<p>Пример результата:</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:80px" src="https://js.cx/task/clock/solution/"></iframe>
  </div><p><a href="http://plnkr.co/edit/ptePT6EYAIi6DAUbzNkp?p=preview" target="_blank" data-plunk-id="ptePT6EYAIi6DAUbzNkp">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p><a href="http://plnkr.co/edit/QR4RGzitn1xHvcpeppUf?p=preview" target="_blank" data-plunk-id="QR4RGzitn1xHvcpeppUf">Открыть решение в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#слайдер-компонент" name="слайдер-компонент" class="main__anchor">Слайдер-компонент</a></h3><a href="task/slider-widget.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Перепишите слайдер в виде компонента:</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:60px" src="https://js.cx/task/slider-widget/solution/"></iframe>
  </div><p>Исходный документ возьмите из решения задачи <a href="task/slider.htm">Слайдер</a>.</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p><a href="http://plnkr.co/edit/PzYIXszc5fxXZ3KLWHzJ?p=preview" target="_blank" data-plunk-id="PzYIXszc5fxXZ3KLWHzJ">Открыть решение в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#компонент-список-с-выделением" name="компонент-список-с-выделением" class="main__anchor">Компонент: список с выделением</a></h3><a href="task/selectable-list-component.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Перепишите решение задачи <a href="task/selectable-list.htm">Список с выделением</a> в виде компонента.</p>
<p>У компонента должен быть единственный публичный метод <code>getSelected()</code>, который возвращает выбранные значения в виде массива.</p>
<p>Использование:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var listSelect = new ListSelect({
  elem: document.querySelector('ul')
});
// listSelect.getSelected()</code></pre>
        </div>
      </div>
      
      </div><p>Демо:</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:300px" src="https://js.cx/task/selectable-list-component/solution/"></iframe>
  </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p><a href="http://plnkr.co/edit/aZh8zsnFXLSqqD8K1ihA?p=preview" target="_blank" data-plunk-id="aZh8zsnFXLSqqD8K1ihA">Открыть решение в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#голосовалка" name="голосовалка" class="main__anchor">Голосовалка</a></h3><a href="task/voter.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Напишите функцию-конструктор <code>new Voter(options)</code> для голосовалки.
Она должна получать элемент в <code>options.elem</code>, в следующей разметке:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div id=&quot;voter&quot; class=&quot;voter&quot;&gt;
  &lt;span class=&quot;down&quot;&gt;—&lt;/span&gt;
  &lt;span class=&quot;vote&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;up&quot;&gt;+&lt;/span&gt;
&lt;/div&gt;</code></pre>
        </div>
      </div>
      
      </div><p>По клику на <code>+</code> и <code>—</code> число должно увеличиваться или уменьшаться.</p>
<p>Публичный метод <code>voter.setVote(vote)</code> должен устанавливать текущее число – значение голоса.</p>
<p>Все остальные методы и свойства пусть будут приватными.</p>
<p>Результат:</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:60px" src="https://js.cx/task/voter/solution/"></iframe>
  </div><p><a href="http://plnkr.co/edit/MxPN96AW8lblZ0vBmoAk?p=preview" target="_blank" data-plunk-id="MxPN96AW8lblZ0vBmoAk">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p><a href="http://plnkr.co/edit/SUbFeHu3fLPfIRcrlYoA?p=preview" target="_blank" data-plunk-id="SUbFeHu3fLPfIRcrlYoA">Открыть решение в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#голосовалка-в-прототипном-стиле-ооп" name="голосовалка-в-прототипном-стиле-ооп" class="main__anchor">Голосовалка в прототипном стиле ООП</a></h3><a href="task/voter-proto.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Поменяйте стиль ООП в голосовалке, созданной в задаче <a href="task/voter.htm">Голосовалка</a> на прототипный.</p>
<p>Внешний код, использующий класс <code>Voter</code>, не должен измениться.</p>
<p>В качестве исходного кода возьмите решение задачи <a href="task/voter.htm">Голосовалка</a>.</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p><a href="http://plnkr.co/edit/XH6nO64OHzw60aYTGYmE?p=preview" target="_blank" data-plunk-id="XH6nO64OHzw60aYTGYmE">Открыть решение в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#добавить-двойной-голос-в-голосовалку" name="добавить-двойной-голос-в-голосовалку" class="main__anchor">Добавить двойной голос в голосовалку</a></h3><a href="task/voter-add-step.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Создайте функцию-конструктор <code>StepVoter</code>, которая наследует от голосовалки, созданной в задаче <a href="task/voter-proto.htm">Голосовалка в прототипном стиле ООП</a> и добавляет голосовалке опцию <code>options.step</code>, которая задаёт «шаг» голоса.</p>
<p>Пример:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var voter = new StepVoter({
  elem: document.getElementById('voter'),
  step: 2 // увеличивать/уменьшать сразу на 2 пункта
});</code></pre>
        </div>
      </div>
      
      </div><p>Результат:</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:60px" src="https://js.cx/task/voter-add-step/solution/"></iframe>
  </div><p>В реальном проекте влияние клика на голосовалку может зависеть от полномочий или репутации посетителя.</p>
<p>В качестве исходного кода используйте решение задачи <a href="task/voter-proto.htm">Голосовалка в прототипном стиле ООП</a>.</p>
<p>P.S. Код <code>voter.js</code> изменять нельзя, нужно не переписать <code>Voter</code>, а отнаследовать от него.</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p><a href="http://plnkr.co/edit/8E0Hd7byFsJGu5wKduOW?p=preview" target="_blank" data-plunk-id="8E0Hd7byFsJGu5wKduOW">Открыть решение в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>