<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="optimize.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Оптимизация</span></a></li></ol><h1 class="main__header-title">Улучшаем сжатие кода</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Улучшаем сжатие кода"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Здесь мы обсудим разные приёмы, которые используются, чтобы улучшить сжатие кода.</p>
<h2><a class="main__anchor" name="больше-локальных-переменных" href="#больше-локальных-переменных">Больше локальных переменных</a></h2><p>Например, код jQuery обёрнут в  функцию, запускаемую «на месте».</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">(function(window, undefined) {
  // ...
  var jQuery = ...

  window.jQuery = jQuery; // сделать переменную глобальной

})(window);</code></pre>
        </div>
      </div>
      
      </div><p>Переменные <code>window</code> и <code>undefined</code> стали локальными. Это позволит сжимателю заменить их на более короткие.</p>
<h2><a class="main__anchor" name="ооп-без-прототипов" href="#ооп-без-прототипов">ООП без прототипов</a></h2><p>Приватные переменные будут сжаты и заинлайнены.</p>
<p>Например, этот код хорошо сожмётся:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function User(firstName, lastName) {
  var fullName = firstName + ' ' + lastName;

  this.sayHi = function() {
    showMessage(fullName);
  }

  function showMessage(msg) {
    alert( '**' + msg + '**' );
  }
}</code></pre>
        </div>
      </div>
      
      </div><p>…А этот – плохо:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function User(firstName, lastName) {
  this._firstName = firstName;
  this._lastName = lastName;
}

User.prototype.sayHi = function() {
  this._showMessage(this._fullName);
}

User.prototype._showMessage = function(msg) {
  alert( '**' + msg + '**' );
}</code></pre>
        </div>
      </div>
      
      </div><p>Сжимаются только локальные переменные, свойства объектов не сжимаются, поэтому эффект от сжатия для второго кода будет совсем небольшим.</p>
<p>При этом, конечно, нужно иметь в виду общий стиль ООП проекта, достоинства и недостатки такого подхода.</p>
<h2><a class="main__anchor" name="сжатие-под-платформу-define" href="#сжатие-под-платформу-define">Сжатие под платформу, define</a></h2><p>Можно делать разные сборки в зависимости от платформы (мобильная/десктоп) и браузера.</p>
<p>Ведь не секрет, что ряд функций могут быть реализованы по разному, в зависимости от того, поддерживает ли среда выполнения нужную возможность.</p>
<h3><a class="main__anchor" name="способ-1-локальная-переменная" href="#способ-1-локальная-переменная">Способ 1: локальная переменная</a></h3><p>Проще всего это сделать локальной переменной в модуле:</p>
<div data-trusted="1" class="code-example" data-highlight-block="2-3">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">(function($) {

  /** @const */
  var platform = 'IE';

  // .....

  if (platform == 'IE') {
    alert( 'IE' );
  } else {
    alert( 'NON-IE' );
  }

})(jQuery);</code></pre>
        </div>
      </div>
      
      </div><p>Нужное значение директивы можно вставить при подготовке JavaScript к сжатию.</p>
<p>Сжиматель заинлайнит её и оптимизирует соответствующие IE.</p>
<h3><a class="main__anchor" name="способ-2-define" href="#способ-2-define">Способ 2: define</a></h3><p>UglifyJS и GCC позволяют задать значение глобальной переменной из командной строки.</p>
<p>В GCC эта возможность доступна лишь в «продвинутом режиме» работы оптимизатора, который мы рассмотрим далее (он редко используется).</p>
<p>Удобнее в этом плане устроен UglifyJS. В нём можно указать флаг <code>-d SYMBOL[=VALUE]</code>, который заменит все переменные <code>SYMBOL</code> на указанное значение <code>VALUE</code>. Если <code>VALUE</code> не указано, то оно считается равным <code>true</code>.</p>
<p>Флаг не работает, если переменная определена явно.</p>
<p>Например, рассмотрим код:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// my.js
if (isIE) {
  alert( &quot;Привет от IE&quot; );
} else {
  alert( &quot;Не IE :)&quot; );
}</code></pre>
        </div>
      </div>
      
      </div><p>Сжатие вызовом <code>uglifyjs -d isIE my.js</code> даст:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( &quot;Привет от IE&quot; );</code></pre>
        </div>
      </div>
      
      </div><p>…Ну а чтобы код работал в обычном окружении, нужно определить в нём значение переменной по умолчанию. Это обычно делается в каком-то другом файле (на весь проект), так как если объявить <code>var isIE</code> в этом, то флаг <code>-d isIE</code> не сработает.</p>
<p>Но можно и «хакнуть» сжиматель, объявив переменную так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// объявит переменную при отсутствии сжатия
// при сжатии не повредит
window.isIE = window.isIE || getBrowserVersion();</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="убираем-вызовы-console" href="#убираем-вызовы-console">Убираем вызовы console.*</a></h2><p>Минификатор имеет в своём распоряжении дерево кода и может удалить ненужные вызовы.</p>
<p>Для UglifyJS это делают опции компилятора:</p>
<ul>
<li><code>drop_debugger</code> – убирает вызовы <code>debugger</code>.</li>
<li><code>drop_console</code> – убирает вызовы <code>console.*</code>.</li>
</ul>
<p>Можно написать и дополнительную функцию преобразования, которая убирает другие вызовы, например для <code>log.*</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var uglify = require('uglify-js');
var pro = uglify.uglify;

function ast_squeeze_console(ast) {
  var w = pro.ast_walker(),
    walk = w.walk,
    scope;
  return w.with_walkers({
    &quot;stat&quot;: function(stmt) {
      if (stmt[0] === &quot;call&quot; &amp;&amp; stmt[1][0] == &quot;dot&quot; &amp;&amp; stmt[1][1] instanceof Array &amp;&amp; stmt[1][1][0] == 'name' &amp;&amp; stmt[1][1][1] == &quot;log&quot;) {
        return [&quot;block&quot;];
      }
      return [&quot;stat&quot;, walk(stmt)];
    },
    &quot;call&quot;: function(expr, args) {
      if (expr[0] == &quot;dot&quot; &amp;&amp; expr[1] instanceof Array &amp;&amp; expr[1][0] == 'name' &amp;&amp; expr[1][1] == &quot;console&quot;) {
        return [&quot;atom&quot;, &quot;0&quot;];
      }
    }
  }, function() {
    return walk(ast);
  });
};</code></pre>
        </div>
      </div>
      
      </div><p>Эту функцию следует вызвать на результате <code>parse</code>, и она пройдётся по дереву и удалит все вызовы <code>log.*</code>.</p>
</div></article></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>