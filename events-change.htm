<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="ui.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Документ, события, интерфейсы</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="forms-controls.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Формы, элементы управления</span></a></li></ol><h1 class="main__header-title">Изменение: change, input, cut, copy, paste</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Изменение: change, input, cut, copy, paste"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>На элементах формы происходят события клавиатуры и мыши, но есть и несколько других, особенных событий.</p>
<h2><a class="main__anchor" name="событие-change" href="#событие-change">Событие change</a></h2><p>Событие <a href="http://www.w3.org/TR/html5/forms.html#event-input-change">change</a> происходит по окончании изменения значения элемента формы, когда это изменение зафиксировано.</p>
<p>Для текстовых элементов это означает, что событие произойдёт не при каждом вводе, а при потере фокуса.</p>
<p>Например, пока вы набираете что-то в текстовом поле ниже – события нет. Но как только вы уведёте фокус на другой элемент, например, нажмёте кнопку – произойдет событие <code>onchange</code>.</p>
<div data-trusted="1" class="code-example" data-demo-height="40" data-autorun="true">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input type=&quot;text&quot; onchange=&quot;alert(this.value)&quot;&gt;
&lt;input type=&quot;button&quot; value=&quot;Кнопка&quot;&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-3g2bri"
          style="height:40px"
          src="about:blank"></iframe>
      </div>
      </div><p>Для остальных же элементов: <code>select</code>, <code>input type=checkbox/radio</code> оно срабатывает сразу при выборе значения.</p>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">Поздний <code>onchange</code> в IE8-</span></div>
            <div class="important__content"><p>В IE8- <code>checkbox/radio</code> при изменении мышью не инициируют событие сразу, а ждут потери фокуса.</p>
<p>Для того, чтобы видеть изменения <code>checkbox/radio</code> тут же – в IE8- нужно повесить обработчик на событие <code>click</code> (оно произойдет и при изменении значения с клавиатуры) или воспользоваться событием <code>propertychange</code>, описанным далее.</p>
</div></div>
<h2><a class="main__anchor" name="событие-input" href="#событие-input">Событие input</a></h2><p>Событие <code>input</code> срабатывает <em>тут же</em> при изменении значения текстового элемента и поддерживается всеми браузерами, кроме IE8-.</p>
<p>В IE9 оно поддерживается частично, а именно – <em>не возникает при удалении символов</em> (как и <code>onpropertychange</code>).</p>
<p>Пример использования (не работает в IE8-):</p>
<div data-trusted="1" class="code-example" data-demo-height="40" data-autorun="true">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input type=&quot;text&quot;&gt; oninput: &lt;span id=&quot;result&quot;&gt;&lt;/span&gt;
&lt;script&gt;
  var input = document.body.children[0];

  input.oninput = function() {
    document.getElementById('result').innerHTML = input.value;
  };
&lt;/script&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-duzxp5"
          style="height:40px"
          src="about:blank"></iframe>
      </div>
      </div><p>В современных браузерах <code>oninput</code> – самое главное событие для работы с элементом формы. Именно его, а не <code>keydown/keypress</code> следует использовать.</p>
<p>Если бы ещё не проблемы со старыми IE… Впрочем, их можно решить при помощи события <code>propertychange</code>.</p>
<h2><a class="main__anchor" name="ie10-событие-propertychange" href="#ie10-событие-propertychange">IE10-, событие propertychange</a></h2><p>Это событие происходит только в IE10-, при любом изменении свойства. Оно позволяет отлавливать изменение тут же. Оно нестандартное, и его основная область использования – исправление недочётов обработки событий в старых IE.</p>
<p>Если поставить его на <code>checkbox</code> в IE8-, то получится «правильное» событие <code>change</code>:</p>
<div data-trusted="1" class="code-example" data-demo-height="40" data-autorun="true" data-highlight-block="6-11">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input type=&quot;checkbox&quot;&gt; Чекбокс с &quot;onchange&quot;, работающим везде одинаково
&lt;script&gt;
  var checkbox = document.body.children[0];

  if (&quot;onpropertychange&quot; in checkbox) {
    // старый IE
    checkbox.onpropertychange = function() {
      // проверим имя изменённого свойства
      if (event.propertyName == &quot;checked&quot;) {
        alert( checkbox.checked );
      }
    };
  } else {
    // остальные браузеры
    checkbox.onchange = function() {
      alert( checkbox.checked );
    };
  }
&lt;/script&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-bfwtbn"
          style="height:40px"
          src="about:blank"></iframe>
      </div>
      </div><p>Это событие также срабатывает при изменении значения текстового элемента. Поэтому его можно использовать в старых IE вместо <code>oninput</code>.</p>
<p>К сожалению, в IE9 у него недочёт: оно не срабатывает при удалении символов. Поэтому сочетания <code>onpropertychange</code> + <code>oninput</code> недостаточно, чтобы поймать любое изменение поля в старых IE. Далее мы рассмотрим пример, как это можно сделать иначе.</p>
<h2><a class="main__anchor" name="события-cut-copy-paste" href="#события-cut-copy-paste">События cut, copy, paste</a></h2><p>Эти события используются редко. Они происходят при вырезании/вставке/копировании значения.</p>
<p>К сожалению, кросс-браузерного способа получить данные, которые вставляются/копируются, не существует, поэтому их основное применение – это отмена соответствующей операции.</p>
<p>Например, вот так:</p>
<div data-trusted="1" class="code-example" data-demo-height="40" data-autorun="true">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input type=&quot;text&quot; id=&quot;input&quot;&gt; event: &lt;span id=&quot;result&quot;&gt;&lt;/span&gt;
&lt;script&gt;
  input.oncut = input.oncopy = input.onpaste = function(event) {
    result.innerHTML = event.type + ' ' + input.value;
    return false;
  };
&lt;/script&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-7nd63i"
          style="height:40px"
          src="about:blank"></iframe>
      </div>
      </div><h2><a class="main__anchor" name="пример-поле-с-контролем-смс" href="#пример-поле-с-контролем-смс">Пример: поле с контролем СМС</a></h2><p>Как видим, событий несколько и они взаимно дополняют друг друга.</p>
<p>Посмотрим, как их использовать, на примере.</p>
<p>Сделаем поле для СМС, рядом с которым должно показываться число символов, обновляющееся при каждом изменении поля.</p>
<p>Как такое реализовать?</p>
<p>Событие <code>input</code> идеально решит задачу во всех браузерах, кроме IE9-. Собственно, если IE9- нам не нужен, то на этом можно и остановиться.</p>
<h3><a class="main__anchor" name="ie9" href="#ie9">IE9-</a></h3><p>В IE8- событие <code>input</code> не поддерживается, но, как мы видели ранее, есть <code>onpropertychange</code>, которое может заменить его.</p>
<p>Что же касается IE9 – там поддерживаются и <code>input</code> и <code>onpropertychange</code>, но они оба не работают при удалении символов. Поэтому мы будем отслеживать удаление при помощи <code>keyup</code> на <kbd class="shortcut">Delete</kbd>  и <kbd class="shortcut">BackSpace</kbd> . А вот удаление командой «вырезать» из меню – сможет отловить лишь <code>oncut</code>.</p>
<p>Получается вот такая комбинация:</p>
<div data-trusted="1" class="code-example" data-demo-height="60" data-autorun="true">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input type=&quot;text&quot; id=&quot;sms&quot;&gt; символов: &lt;span id=&quot;result&quot;&gt;&lt;/span&gt;
&lt;script&gt;
  function showCount() {
    result.innerHTML = sms.value.length;
  }

  sms.onkeyup = sms.oninput = showCount;
  sms.onpropertychange = function() {
    if (event.propertyName == &quot;value&quot;) showCount();
  }
  sms.oncut = function() {
    setTimeout(showCount, 0); // на момент oncut значение еще старое
  };
&lt;/script&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-2amtup"
          style="height:60px"
          src="about:blank"></iframe>
      </div>
      </div><p>Здесь мы добавили вызов <code>showCount</code> на все события, которые могут приводить к изменению значения. Да, иногда изменение будет обрабатываться несколько раз, но зато с гарантией. А лишние вызовы легко убрать, например, при помощи <code>throttle</code>-декоратора, описанного в задаче <a href="task/throttle.htm">Тормозилка</a>.</p>
<p><strong>Есть и совсем другой простой, но действенный вариант: через <code>setInterval</code> регулярно проверять значение и, если оно слишком длинное, обрезать его.</strong></p>
<p>Чтобы сэкономить ресурсы браузера, мы можем начинать отслеживание по <code>onfocus</code>, а прекращать – по <code>onblur</code>, вот так:</p>
<div data-trusted="1" class="code-example" data-demo-height="60" data-autorun="true">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input type=&quot;text&quot; id=&quot;sms&quot;&gt; символов: &lt;span id=&quot;result&quot;&gt;&lt;/span&gt;

&lt;script&gt;
  var timerId;

  sms.onfocus = function() {

    var lastValue = sms.value;
    timerId = setInterval(function() {
      if (sms.value != lastValue) {
        showCount();
        lastValue = sms.value;
      }
    }, 20);
  };

  sms.onblur = function() {
    clearInterval(timerId);
  };

  function showCount() {
    result.innerHTML = sms.value.length;
  }
&lt;/script&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-abo7k9"
          style="height:60px"
          src="about:blank"></iframe>
      </div>
      </div><p>Обратим внимание – весь этот «танец с бубном» нужен только для поддержки IE8-, в которых не поддерживается <code>oninput</code> и IE9, где <code>oninput</code> не работает при удалении.</p>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><p>События изменения данных:</p>
<table>
<thead>
<tr>
<th>Событие</th>
<th>Описание</th>
<th>Особенности</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>change</code></td>
<td>Изменение значения любого элемента формы. Для текстовых элементов срабатывает при потере фокуса.</td>
<td>В IE8- на чекбоксах ждет потери фокуса, поэтому для мгновенной реакции ставят также <code>onclick</code>-обработчик или <code>onpropertychange</code>.</td>
</tr>
<tr>
<td><code>input</code></td>
<td>Событие срабатывает только на текстовых элементах. Оно не ждет потери фокуса, в отличие от <code>change</code>.</td>
<td>В IE8- не поддерживается, в IE9 не работает при удалении символов.</td>
</tr>
<tr>
<td><code>propertychange</code></td>
<td>Только для IE10-. Универсальное событие для отслеживания изменения свойств элементов. Имя изменённого свойства содержится в <code>event.propertyName</code>. Используют для мгновенной реакции на изменение значения в старых IE.</td>
<td>В IE9 не срабатывает при удалении символов.</td>
</tr>
<tr>
<td><code>cut/copy/paste</code></td>
<td>Срабатывают при вставке/копировании/удалении текста. Если в их обработчиках отменить действие браузера, то вставки/копирования/удаления не произойдёт.</td>
<td>Вставляемое значение получить нельзя: на момент срабатывания события в элементе всё ещё <em>старое</em> значение, а новое недоступно.</td>
</tr>
</tbody>
</table>
<p>Ещё особенность: в IE8- события <code>change</code>, <code>propertychange</code>, <code>cut</code> и аналогичные не всплывают. То есть, обработчики нужно назначать на сам элемент, без делегирования.</p>
</div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#автовычисление-процентов-по-вкладу" name="автовычисление-процентов-по-вкладу" class="main__anchor">Автовычисление процентов по вкладу</a></h3><a href="task/calculate-capitalization.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Создайте интерфейс для автоматического вычисления процентов по вкладу.</p>
<p>Ставка фиксирована: 12% годовых. При включённом поле «капитализация» – проценты приплюсовываются к сумме вклада каждый месяц (<a href="http://damoney.ru/finance/slozniy-procent.php">сложный процент</a>).</p>
<p>Пример:</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:350px" src="https://js.cx/task/calculate-capitalization/solution/"></iframe>
  </div><p>Технические требования:</p>
<ul>
<li>В поле с суммой должно быть нельзя ввести не-цифру. При этом пусть в нём работают специальные клавиши и сочетания Ctrl-X/Ctrl-V.</li>
<li>Изменения в форме отражаются в результатах сразу.</li>
</ul>
<p><a href="http://plnkr.co/edit/KcLQ5c5EAlbAtGIH6UKt?p=preview" target="_blank" data-plunk-id="KcLQ5c5EAlbAtGIH6UKt">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Алгоритм решения такой.</p>
<p>Только численный ввод в поле с суммой разрешаем, повесив обработчик на <code>keypress</code>.</p>
<p>Отслеживаем события изменения для перевычисления результатов:</p>
<ul>
<li>На <code>input</code>: событие <code>input</code> и дополнительно <code>propertychange/keyup</code> для совместимости со старыми IE.</li>
<li>На <code>checkbox</code>: событие <code>click</code> вместо <code>change</code> для совместимости с IE8-.</li>
<li>На <code>select</code>: событие <code>change</code>.</li>
</ul>
<p><a href="http://plnkr.co/edit/bPIDQRkX6vWFYbDhBQpJ?p=preview" target="_blank" data-plunk-id="bPIDQRkX6vWFYbDhBQpJ">Открыть решение в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>