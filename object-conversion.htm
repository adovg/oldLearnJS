<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="js.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Язык JavaScript</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="objects-more.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Методы объектов и контекст вызова</span></a></li></ol><h1 class="main__header-title">Преобразование объектов: toString и valueOf</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Преобразование объектов: toString и valueOf"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Ранее, в главе <a href="types-conversion.htm">Преобразование типов для примитивов</a> мы рассматривали преобразование типов для примитивов. Теперь добавим в нашу картину мира объекты.</p>
<p>Бывают операции, при которых объект должен быть преобразован в примитив.</p>
<p>Например:</p>
<ul>
<li>Строковое преобразование – если объект выводится через <code>alert(obj)</code>.</li>
<li>Численное преобразование – при арифметических операциях, сравнении с примитивом.</li>
<li>Логическое преобразование – при <code>if(obj)</code> и других логических операциях.</li>
</ul>
<p>Рассмотрим эти преобразования по очереди.</p>
<h2><a class="main__anchor" name="логическое-преобразование" href="#логическое-преобразование">Логическое преобразование</a></h2><p>Проще всего – с логическим преобразованием.</p>
<p><strong>Любой объект в логическом контексте – <code>true</code>, даже если это пустой массив <code>[]</code> или объект <code>{}</code>.</strong></p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">if ({} &amp;&amp; []) {
  alert( &quot;Все объекты - true!&quot; ); // alert сработает
}</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="строковое-преобразование" href="#строковое-преобразование">Строковое преобразование</a></h2><p>Строковое преобразование проще всего увидеть, если вывести объект при помощи <code>alert</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = {
  firstName: 'Василий'
};

alert( user ); // [object Object]</code></pre>
        </div>
      </div>
      
      </div><p>Как видно, содержимое объекта не вывелось. Это потому, что стандартным строковым представлением пользовательского объекта является строка <code>&quot;[object Object]&quot;</code>.</p>
<p>Такой вывод объекта не содержит интересной информации. Поэтому имеет смысл его поменять на что-то более полезное.</p>
<p><strong>Если в объекте присутствует метод <code>toString</code>, который возвращает примитив, то он используется для преобразования.</strong></p>
<div data-trusted="1" class="code-example" data-highlight-inline="4:2-11">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = {

  firstName: 'Василий',

  toString: function() {
    return 'Пользователь ' + this.firstName;
  }
};

alert( user );  // Пользователь Василий</code></pre>
        </div>
      </div>
      
      </div><div class="important important_smart">
            <div class="important__header"><span class="important__type">Результатом <code>toString</code> может быть любой примитив</span></div>
            <div class="important__content"><p>Метод <code>toString</code> не обязан возвращать именно строку.</p>
<p>Его результат может быть любого примитивного типа. Например, это может быть число, как в примере ниже:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var obj = {
  toString: function() {
    return 123;
  }
};

alert( obj ); // 123</code></pre>
        </div>
      </div>
      
      </div><p>Поэтому мы и называем его здесь <em>«строковое преобразование»</em>, а не «преобразование к строке».</p>
</div></div>
<p>Все объекты, включая встроенные, имеют свои реализации метода <code>toString</code>, например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( [1, 2] ); // toString для массивов выводит список элементов &quot;1,2&quot;
alert( new Date ); // toString для дат выводит дату в виде строки
alert( function() {} ); // toString для функции выводит её код</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="численное-преобразование" href="#численное-преобразование">Численное преобразование</a></h2><p>Для численного преобразования объекта используется метод <code>valueOf</code>, а если его нет – то <code>toString</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="7:25-41,9:24-38,11:25-42">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var room = {
  number: 777,

  valueOf: function() { return this.number; },
  toString: function() { return this.number; }
};

alert( +room );  // 777, вызвался valueOf

delete room.valueOf; // valueOf удалён

alert( +room );  // 777, вызвался toString</code></pre>
        </div>
      </div>
      
      </div><p>Метод <code>valueOf</code> обязан возвращать примитивное значение, иначе его результат будет проигнорирован. При этом – не обязательно числовое.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">У большинства объектов нет <code>valueOf</code></span></div>
            <div class="important__content"><p>У большинства встроенных объектов такого <code>valueOf</code> нет, поэтому численное и строковое преобразования для них работают одинаково.</p>
<p>Исключением является объект <code>Date</code>, который поддерживает оба типа преобразований:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( new Date() ); // toString: Дата в виде читаемой строки
alert( +new Date() ); // valueOf: кол-во миллисекунд, прошедших с 01.01.1970</code></pre>
        </div>
      </div>
      
      </div></div></div>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Детали спецификации</span></div>
            <div class="important__content"><p>Если посмотреть в стандарт, то в пункте <a href="http://es5.github.com/x15.2.html#x15.2.4.4">15.2.4.4</a> говорится о том, что <code>valueOf</code> есть у любых объектов. Но он ничего не делает, просто возвращает сам объект (непримитивное значение!), а потому игнорируется.</p>
</div></div>
<h2><a class="main__anchor" name="две-стадии-преобразования" href="#две-стадии-преобразования">Две стадии преобразования</a></h2><p>Итак, объект преобразован в примитив при помощи <code>toString</code> или <code>valueOf</code>.</p>
<p>Но на этом преобразования не обязательно заканчиваются. Вполне возможно, что в процессе вычислений этот примитив будет преобразован во что-то другое.</p>
<p>Например, рассмотрим применение к объекту операции <code>==</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var obj = {
  valueOf: function() {
    return 1;
  }
};

alert( obj == true ); // true</code></pre>
        </div>
      </div>
      
      </div><p>Объект <code>obj</code> был сначала преобразован в примитив, используя численное преобразование, получилось <code>1 == true</code>.</p>
<p>Далее, так как значения всё ещё разных типов, применяются правила преобразования примитивов, результат: <code>true</code>.</p>
<p>То же самое – при сложении с объектом при помощи <code>+</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var obj = {
  valueOf: function() {
    return 1;
  }
};

alert( obj + &quot;test&quot; ); // 1test</code></pre>
        </div>
      </div>
      
      </div><p>Или вот, для разности объектов:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var a = {
  valueOf: function() {
    return &quot;1&quot;;
  }
};
var b = {
  valueOf: function() {
    return &quot;2&quot;;
  }
};

alert( a + b ); // &quot;12&quot;
alert( a - b ); // &quot;1&quot; - &quot;2&quot; = -1</code></pre>
        </div>
      </div>
      
      </div><div class="important important_warn">
            <div class="important__header"><span class="important__type">Исключение: <code>Date</code></span></div>
            <div class="important__content"><p>Объект <code>Date</code> по историческим причинам является исключением.</p>
<p>Бинарный оператор плюс <code>+</code> обычно использует численное преобразование и метод <code>valueOf</code>. Как мы уже знаем, если  подходящего <code>valueOf</code> нет (а его нет у большинства объектов), то используется <code>toString</code>, так что в итоге преобразование происходит к строке. Но если есть <code>valueOf</code>, то используется <code>valueOf</code>. Выше в примере как раз <code>a + b</code> это демонстрируют.</p>
<p>У объектов <code>Date</code> есть и <code>valueOf</code> – возвращает количество миллисекунд, и <code>toString</code> – возвращает строку с датой.</p>
<p>…Но оператор <code>+</code> для <code>Date</code> использует именно <code>toString</code> (хотя должен бы <code>valueOf</code>).</p>
<p>Это и есть исключение:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// бинарный плюс для даты toString, для остальных объектов valueOf
alert( new Date + &quot;&quot; ); // &quot;строка даты&quot;</code></pre>
        </div>
      </div>
      
      </div><p>Других подобных исключений нет.</p>
</div></div>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">Как испугать Java-разработчика</span></div>
            <div class="important__content"><p>В языке Java (это не JavaScript, другой язык, здесь приведён для примера) логические значения можно создавать, используя синтаксис <code>new Boolean(true/false)</code>, например <code>new Boolean(true)</code>.</p>
<p>В JavaScript тоже есть подобная возможность, которая возвращает «объектную обёртку» для логического значения.</p>
<p>Эта возможность давно существует лишь для совместимости, она и не используется на практике, поскольку приводит к странным результатам. Некоторые из них могут сильно удивить человека, не привыкшего к JavaScript, например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var value = new Boolean(false);
if (value) {
  alert( true ); // сработает!
}</code></pre>
        </div>
      </div>
      
      </div><p>Почему запустился <code>alert</code>? Ведь в <code>if</code> находится <code>false</code>… Проверим:</p>
<div data-trusted="1" class="code-example" data-highlight-block="2-2">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var value = new Boolean(false);

alert( value ); // выводит false, все ок..

if (value) {
  alert( true ); // ..но тогда почему выполняется alert в if ?!?
}</code></pre>
        </div>
      </div>
      
      </div><p>Дело в том, что <code>new Boolean</code> – это не примитивное значение, а объект. Поэтому в логическом контексте он преобразуется к <code>true</code>, в результате работает первый пример.</p>
<p>А второй пример вызывает <code>alert</code>, который преобразует объект к строке, и он становится <code>&quot;false&quot;</code>.</p>
<p><strong>В JavaScript вызовы <code>new Boolean/String/Number</code> не используются, а используются простые вызовы соответствующих функций, они преобразуют значение в примитив нужного типа, например <code>Boolean(val) === !!val</code>.</strong></p>
</div></div>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><ul>
<li>В логическом контексте объект – всегда <code>true</code>.</li>
<li>При строковом преобразовании объекта используется его метод <code>toString</code>. Он должен возвращать примитивное значение, причём не обязательно именно строку.</li>
<li>Для численного преобразования используется метод <code>valueOf</code>, который также может возвратить любое примитивное значение. У большинства объектов <code>valueOf</code> не работает (возвращает сам объект и потому игнорируется), при этом для численного преобразования используется <code>toString</code>.</li>
</ul>
<p>Полный алгоритм преобразований есть в спецификации ECMAScript, смотрите пункты <a href="http://es5.github.com/x11.html#x11.8.5">11.8.5</a>, <a href="http://es5.github.com/x11.html#x11.9.3">11.9.3</a>, а также <a href="http://es5.github.com/x9.html#x9.1">9.1</a> и <a href="http://es5.github.com/x9.html#x9.3">9.3</a>.</p>
<p>Заметим, для полноты картины, что некоторые тесты знаний в интернет предлагают вопросы типа:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">{}[0]  // чему равно?
{} + {} // а так?</code></pre>
        </div>
      </div>
      
      </div><p>Если вы запустите эти выражения в консоли, то результат может показаться странным. Подвох здесь в том, что если фигурные скобки <code>{...}</code> идут не в выражении, а в основном потоке кода, то JavaScript считает, что это не объект, а «блок кода» (как <code>if</code>, <code>for</code>, но без оператора просто группировка команд вместе используется редко).</p>
<p>Вот блок кода с командой:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">{
  alert(&quot;Блок&quot;)
}</code></pre>
        </div>
      </div>
      
      </div><p>А если команду изъять, то будет пустой блок <code>{}</code>, который ничего не делает. Два примера выше как раз содержат пустой блок в начале, который ничего не делает. Иначе говоря:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">{}[0]   // то же что и: [0]
{} + {} // то же что и: + {}</code></pre>
        </div>
      </div>
      
      </div><p>То есть, такие вопросы – не на преобразование типов, а на понимание, что если <code>{ ... }</code> находится вне выражений, то это не объект, а блок.</p>
</div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#x-x" name="x-x" class="main__anchor">['x'] == 'x'</a></h3><a href="task/array-equals-string.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Почему результат <code>true</code> ?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( ['x'] == 'x' );</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Если с одной стороны – объект, а с другой – нет, то сначала приводится объект.</p>
<p>В данном случае сравнение означает численное приведение. У массивов нет <code>valueOf</code>, поэтому вызывается <code>toString</code>, который возвращает список элементов через запятую.</p>
<p>В данном случае, элемент только один – он и возвращается. Так что <code>['x']</code> становится <code>'x'</code>. Получилось <code>'x' == 'x'</code>, верно.</p>
<p>P.S.
По той же причине верны равенства:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( ['x', 'y'] == 'x,y' ); // true
alert( [] == '' ); // true</code></pre>
        </div>
      </div>
      
      </div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#преобразование" name="преобразование" class="main__anchor">Преобразование</a></h3><a href="task/tostring-valueof.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Объявлен объект с <code>toString</code> и <code>valueOf</code>.</p>
<p>Какими будут результаты <code>alert</code>?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var foo = {
  toString: function() {
    return 'foo';
  },
  valueOf: function() {
    return 2;
  }
};

alert( foo );
alert( foo + 1 );
alert( foo + &quot;3&quot; );</code></pre>
        </div>
      </div>
      
      </div><p>Подумайте, прежде чем ответить.</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__step"><button type="button" class="task__step-show">Первый alert(foo)</button><div class="task__answer-content"><h4 class="task__step-title">Первый alert(foo)</h4><p>Возвращает строковое представление объекта, используя <code>toString</code>, т.е. <code>&quot;foo&quot;</code>.</p>
</div></div><div class="task__step"><button type="button" class="task__step-show">Второй alert(foo + 1)</button><div class="task__answer-content"><h4 class="task__step-title">Второй alert(foo + 1)</h4><p>Оператор <code>'+'</code> преобразует объект к примитиву, используя <code>valueOf</code>, так что результат: <code>3</code>.</p>
</div></div><div class="task__step"><button type="button" class="task__step-show">Третий alert(foo + „3“)</button><div class="task__answer-content"><h4 class="task__step-title">Третий alert(foo + „3“)</h4><p>То же самое, что и предыдущий случай, объект превращается в примитив <code>2</code>. Затем происходит сложение <code>2 + '3'</code>. Оператор <code>'+'</code> при сложении чего-либо со строкой приводит и второй операнд к строке, а затем применяет конкатенацию, так что результат – строка <code>&quot;23&quot;</code>.</p>
</div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#почему-неверно-а-верно" name="почему-неверно-а-верно" class="main__anchor">Почему [] == [] неверно, а [ ] == ![ ] верно?</a></h3><a href="task/compare-empty-arrays.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Почему первое равенство – неверно, а второе – верно?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( [] == [] ); // false
alert( [] == ![] ); // true</code></pre>
        </div>
      </div>
      
      </div><p>Какие преобразования происходят при вычислении?</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__step"><button type="button" class="task__step-show">Ответ по первому равенству</button><div class="task__answer-content"><h4 class="task__step-title">Ответ по первому равенству</h4><p>Два объекта равны только тогда, когда это один и тот же объект.</p>
<p>В первом равенстве создаются два массива, это разные объекты, так что они неравны.</p>
</div></div><div class="task__step"><button type="button" class="task__step-show">Ответ по второму равенству</button><div class="task__answer-content"><h4 class="task__step-title">Ответ по второму равенству</h4><ol>
<li>
<p>Первым делом, обе части сравнения вычисляются. Справа находится <code>![]</code>. Логическое НЕ <code>'!'</code> преобразует аргумент к логическому типу. Массив является объектом, так что это <code>true</code>. Значит, правая часть становится <code>![] = !true = false</code>. Так что получили:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( [] == false );</code></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p>Проверка равенства между объектом и примитивом вызывает численное преобразование объекта.</p>
<p>У массива нет <code>valueOf</code>, сработает <code>toString</code> и преобразует массив в список элементов, то есть – в пустую строку:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( '' == false );</code></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p>Сравнение различных типов вызывает численное преобразование слева и справа:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( 0 == 0 );</code></pre>
        </div>
      </div>
      
      </div><p>Теперь результат очевиден.</p>
</li>
</ol>
</div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#вопросник-по-преобразованиям-для-объектов" name="вопросник-по-преобразованиям-для-объектов" class="main__anchor">Вопросник по преобразованиям, для объектов</a></h3><a href="task/object-types-conversion-questions.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Подумайте, какой результат будет у выражений ниже. Когда закончите – сверьтесь с решением.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">new Date(0) - 0
new Array(1)[0] + &quot;&quot;
({})[0]
[1] + 1
[1,2] + [3,4]
[] + null + 1
[[0]][0][0]
({} + {})</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">new Date(0) - 0 = 0 // (1)
new Array(1)[0] + &quot;&quot; = &quot;undefined&quot; // (2)
({})[0] = undefined // (3)
[1] + 1 = &quot;11&quot; // (4)
[1,2] + [3,4] = &quot;1,23,4&quot; // (5)
[] + null + 1 = &quot;null1&quot; // (6)
[[0]][0][0] = 0 // (7)
({} + {}) = &quot;[object Object][object Object]&quot; // (8)</code></pre>
        </div>
      </div>
      
      </div><ol>
<li>
<p><code>new Date(0)</code> – дата, созданная по миллисекундам и соответствующая 0 мс от 1 января 1970 года 00:00:00 UTC. Оператор минус <code>-</code> преобразует дату обратно в число миллисекунд, то есть в <code>0</code>.</p>
</li>
<li>
<p><code>new Array(num)</code> при вызове с единственным аргументом-числом создаёт массив данной длины, без элементов. Поэтому его нулевой элемент равен <code>undefined</code>, при сложении со строкой получается строка <code>&quot;undefined&quot;</code>.</p>
</li>
<li>
<p>Фигурные скобки – это создание пустого объекта, у него нет свойства <code>'0'</code>. Так что значением будет <code>undefined</code>.
Обратите внимание на внешние, круглые скобки. Если их убрать и запустить <code>{}[0]</code> в отладочной консоли браузера – будет <code>0</code>, т.к. скобки <code>{}</code> будут восприняты как пустой блок кода, после которого идёт массив.</p>
</li>
<li>
<p>Массив преобразуется в строку <code>&quot;1&quot;</code>. Оператор <code>&quot;+&quot;</code> при сложении со строкой приводит второй аргумент к строке – значит будет <code>&quot;1&quot; + &quot;1&quot; = &quot;11&quot;</code>.</p>
</li>
<li>
<p>Массивы приводятся к строке и складываются.</p>
</li>
<li>
<p>Массив преобразуется в пустую строку <code>&quot;&quot; + null + 1</code>, оператор <code>&quot;+&quot;</code> видит, что слева строка и преобразует <code>null</code> к строке, получается <code>&quot;null&quot; + 1</code>, и в итоге <code>&quot;null1&quot;</code>.</p>
</li>
<li>
<p><code>[[0]]</code> – это вложенный массив <code>[0]</code>  внутри внешнего <code>[ ]</code>. Затем мы берём от него нулевой элемент, и потом еще раз.</p>
<p>Если это непонятно, то посмотрите на такой пример:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( [1,[0],2][1] );</code></pre>
        </div>
      </div>
      
      </div><p>Квадратные скобки после массива/объекта обозначают не другой массив, а взятие элемента.</p>
</li>
<li>
<p>Каждый объект преобразуется к примитиву. У встроенных объектов <code>Object</code> нет подходящего <code>valueOf</code>, поэтому используется <code>toString</code>, так что складываются в итоге строковые представления объектов.</p>
</li>
</ol>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#сумма-произвольного-количества-скобок" name="сумма-произвольного-количества-скобок" class="main__anchor">Сумма произвольного количества скобок</a></h3><a href="task/sum-many-brackets.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 2</span></div><div class="task__content"><p>Напишите функцию <code>sum</code>, которая будет работать так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">sum(1)(2) == 3; // 1 + 2
sum(1)(2)(3) == 6; // 1 + 2 + 3
sum(5)(-1)(2) == 6
sum(6)(-1)(-2)(-3) == 0
sum(0)(1)(2)(3)(4)(5) == 15</code></pre>
        </div>
      </div>
      
      </div><p>Количество скобок может быть любым.</p>
<p>Пример такой функции для двух аргументов – есть в решении задачи <a href="task/closure-sum.htm">Сумма через замыкание</a>.</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__step"><button type="button" class="task__step-show">Подсказка</button><div class="task__answer-content"><h4 class="task__step-title">Подсказка</h4><p>Чтобы <code>sum(1)</code>, а также <code>sum(1)(2)</code> можно было вызвать новыми скобками – результатом <code>sum</code> должна быть функция.</p>
<p>Но эта функция также должна уметь превращаться в число. Для этого нужно дать ей соответствующий <code>valueOf</code>. А если мы хотим, чтобы и в строковом контексте она вела себя так же – то <code>toString</code>.</p>
</div></div><div class="task__step"><button type="button" class="task__step-show">Решение</button><div class="task__answer-content"><h4 class="task__step-title">Решение</h4><p>Функция, которая возвращается <code>sum</code>, должна накапливать значение при каждом вызове.</p>
<p>Удобнее всего хранить его в замыкании, в переменной <code>currentSum</code>. Каждый вызов прибавляет к ней очередное значение:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function sum(a) {

  var currentSum = a;

  function f(b) {
    currentSum += b;
    return f;
  }

  f.toString = function() {
    return currentSum;
  };

  return f;
}

alert( sum(1)(2) ); // 3
alert( sum(5)(-1)(2) ); // 6
alert( sum(6)(-1)(-2)(-3) ); // 0
alert( sum(0)(1)(2)(3)(4)(5) ); // 15</code></pre>
        </div>
      </div>
      
      </div><p>При внимательном взгляде на решение легко заметить, что функция <code>sum</code> срабатывает только один раз. Она возвращает функцию <code>f</code>.</p>
<p>Затем, при каждом запуске функция <code>f</code> добавляет параметр к сумме <code>currentSum</code>, хранящейся в замыкании, и возвращает сама себя.</p>
<p><strong>В последней строчке <code>f</code> нет рекурсивного вызова.</strong></p>
<p>Вот так была бы рекурсия:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f(b) {
  currentSum += b;
  return f(); // &lt;-- подвызов
}</code></pre>
        </div>
      </div>
      
      </div><p>А в нашем случае, мы просто возвращаем саму функцию, ничего не вызывая.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f(b) {
  currentSum += b;
  return f; // &lt;-- не вызывает сама себя, а возвращает ссылку на себя
}</code></pre>
        </div>
      </div>
      
      </div><p>Эта <code>f</code> используется при следующем вызове, опять возвратит себя, и так сколько нужно раз. Затем, при использовании в строчном или численном контексте – сработает <code>toString</code>, который вернет текущую сумму <code>currentSum</code>.</p>
</div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>