<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="js.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Язык JavaScript</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="first-steps.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Основы JavaScript</span></a></li></ol><h1 class="main__header-title">Функции</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Функции"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Зачастую нам надо повторять одно и то же действие во многих частях программы.</p>
<p>Например, красиво вывести сообщение необходимо при приветствии посетителя, при выходе посетителя с сайта, ещё где-нибудь.</p>
<p>Чтобы не повторять один и тот же код во многих местах, придуманы функции. Функции являются основными «строительными блоками» программы.</p>
<p>Примеры встроенных функций вы уже видели – это <code>alert(message)</code>, <code>prompt(message, default)</code> и <code>confirm(question)</code>. Но можно создавать и свои.</p>
<h2><a class="main__anchor" name="объявление" href="#объявление">Объявление</a></h2><p>Пример объявления функции:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function showMessage() {
  alert( 'Привет всем присутствующим!' );
}</code></pre>
        </div>
      </div>
      
      </div><p>Вначале идет ключевое слово <code>function</code>, после него <em>имя функции</em>, затем <em>список параметров</em> в скобках (в примере выше он пустой) и <em>тело функции</em> – код, который выполняется при её вызове.</p>
<p>Объявленная функция доступна по имени, например:</p>
<div data-trusted="1" class="code-example" data-highlight-block="4-5">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function showMessage() {
  alert( 'Привет всем присутствующим!' );
}

showMessage();
showMessage();</code></pre>
        </div>
      </div>
      
      </div><p>Этот код выведет сообщение два раза. Уже здесь видна <strong>главная цель создания функций: избавление от дублирования кода</strong>.</p>
<p>Если понадобится поменять сообщение или способ его вывода – достаточно изменить его в одном месте: в функции, которая его выводит.</p>
<h2><a class="main__anchor" name="локальные-переменные" href="#локальные-переменные">Локальные переменные</a></h2><p>Функция может содержать <em>локальные</em> переменные, объявленные через <code>var</code>. Такие переменные видны только внутри функции:</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function showMessage() {
  var message = 'Привет, я - Вася!'; // локальная переменная

  alert( message );
}

showMessage(); // 'Привет, я - Вася!'

alert( message ); // &lt;-- будет ошибка, т.к. переменная видна только внутри</code></pre>
        </div>
      </div>
      
      </div><p><strong>Блоки <code>if/else</code>, <code>switch</code>, <code>for</code>, <code>while</code>, <code>do..while</code> не влияют на область видимости переменных.</strong></p>
<p>При объявлении переменной в таких блоках, она всё равно будет видна во всей функции.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example" data-highlight-block="6-7" data-highlight-inline="2:7-10,3:4-7">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function count() {
  // переменные i,j не будут уничтожены по окончании цикла
  for (var i = 0; i &lt; 3; i++) {
    var j = i * 2;
  }

  alert( i ); // i=3, последнее значение i, при нём цикл перестал работать
  alert( j ); // j=4, последнее значение j, которое вычислил цикл
}</code></pre>
        </div>
      </div>
      
      </div><p><strong>Неважно, где именно в функции и сколько раз объявляется переменная. Любое объявление срабатывает один раз и распространяется на всю функцию.</strong></p>
<p>Объявления переменных в примере выше можно передвинуть вверх, это ни на что не повлияет:</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function count() {
  var i, j; // передвинули объявления var в начало
  for (i = 0; i &lt; 3; i++) {
    j = i * 2;
  }

  alert( i ); // i=3
  alert( j ); // j=4
}</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="внешние-переменные" href="#внешние-переменные">Внешние переменные</a></h2><p>Функция может обратиться ко внешней переменной, например:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:4-12,3:31-39">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var userName = 'Вася';

function showMessage() {
  var message = 'Привет, я ' + userName;
  alert(message);
}

showMessage(); // Привет, я Вася</code></pre>
        </div>
      </div>
      
      </div><p>Доступ возможен не только на чтение, но и на запись. При этом, так как переменная внешняя, то изменения будут видны и снаружи функции:</p>
<div data-trusted="1" class="code-example" data-highlight-block="11-11">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var userName = 'Вася';

function showMessage() {
  userName = 'Петя'; // (1) присвоение во внешнюю переменную

  var message = 'Привет, я ' + userName;
  alert( message );
}

showMessage();

alert( userName ); // Петя, значение внешней переменной изменено функцией</code></pre>
        </div>
      </div>
      
      </div><p>Конечно, если бы внутри функции, в строке <code>(1)</code>, была бы объявлена своя локальная переменная <code>var userName</code>, то все обращения использовали бы её, и внешняя переменная осталась бы неизменной.</p>
<p><strong>Переменные, объявленные на уровне всего скрипта, называют <em>«глобальными переменными»</em>.</strong></p>
<p>В примере выше переменная <code>userName</code> – глобальная.</p>
<p>Делайте глобальными только те переменные, которые действительно имеют общее значение для вашего проекта, а нужные для решения конкретной задачи – пусть будут локальными в соответствующей функции.</p>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">Внимание: неявное объявление глобальных переменных!</span></div>
            <div class="important__content"><p>В старом стандарте JavaScript существовала возможность неявного объявления переменных присвоением значения.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function showMessage() {
  message = 'Привет'; // без var!
}

showMessage();

alert( message ); // Привет</code></pre>
        </div>
      </div>
      
      </div><p>В коде выше переменная <code>message</code> нигде не объявлена, а сразу присваивается. Скорее всего, программист просто забыл поставить <code>var</code>.</p>
<p>При <code>use strict</code> такой код привёл бы к ошибке, но без него переменная будет создана автоматически, причём в примере выше она создаётся не в функции, а на уровне всего скрипта.</p>
<p>Избегайте этого.</p>
<p>Здесь опасность даже не в автоматическом создании переменной, а в том, что глобальные переменные должны использоваться тогда, когда действительно нужны «общескриптовые» параметры.</p>
<p>Забыли <code>var</code> в одном месте, потом в другом – в результате одна функция неожиданно поменяла глобальную переменную, которую использует другая. И поди разберись, кто и когда её поменял, не самая приятная ошибка для отладки.</p>
</div></div>
<p>В будущем, когда мы лучше познакомимся с основами JavaScript, в главе <a href="closures.htm">Замыкания, функции изнутри</a>, мы более детально рассмотрим внутренние механизмы работы переменных и функций.</p>
<h2><a class="main__anchor" name="параметры" href="#параметры">Параметры</a></h2><p>При вызове функции ей можно передать данные, которые та использует по своему усмотрению.</p>
<p>Например, этот код выводит два сообщения:</p>
<div data-trusted="1" class="code-example" data-highlight-block="7-8" data-highlight-inline="0:21-31">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function showMessage(from, text) { // параметры from, text

  from = &quot;** &quot; + from + &quot; **&quot;; // здесь может быть сложный код оформления

  alert(from + ': ' + text);
}

showMessage('Маша', 'Привет!');
showMessage('Маша', 'Как дела?');</code></pre>
        </div>
      </div>
      
      </div><p><strong>Параметры копируются в локальные переменные функции</strong>.</p>
<p>Например, в коде ниже есть внешняя переменная <code>from</code>, значение которой при запуске функции копируется в параметр функции с тем же именем. Далее функция работает уже с параметром:</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function showMessage(from, text) {
  from = '**' + from + '**'; // меняем локальную переменную from
  alert( from + ': ' + text );
}

var from = &quot;Маша&quot;;

showMessage(from, &quot;Привет&quot;);

alert( from ); // старое значение from без изменений, в функции была изменена копия</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="аргументы-по-умолчанию" href="#аргументы-по-умолчанию">Аргументы по умолчанию</a></h2><p>Функцию можно вызвать с любым количеством аргументов.</p>
<p>Если параметр не передан при вызове – он считается равным <code>undefined</code>.</p>
<p>Например, функцию показа сообщения <code>showMessage(from, text)</code> можно вызвать с одним аргументом:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">showMessage(&quot;Маша&quot;);</code></pre>
        </div>
      </div>
      
      </div><p>При этом можно проверить, и если параметр не передан – присвоить ему значение «по умолчанию»:</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-3,9-9">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function showMessage(from, text) {
  if (text === undefined) {
    text = 'текст не передан';
  }

  alert( from + &quot;: &quot; + text );
}

showMessage(&quot;Маша&quot;, &quot;Привет!&quot;); // Маша: Привет!
showMessage(&quot;Маша&quot;); // Маша: текст не передан</code></pre>
        </div>
      </div>
      
      </div><p><strong>При объявлении функции необязательные аргументы, как правило, располагают в конце списка.</strong></p>
<p>Для указания значения «по умолчанию», то есть, такого, которое используется, если аргумент не указан, используется два способа:</p>
<ol>
<li>
<p>Можно проверить, равен ли аргумент <code>undefined</code>, и если да – то записать в него значение по умолчанию. Этот способ продемонстрирован в примере выше.</p>
</li>
<li>
<p>Использовать оператор <code>||</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function showMessage(from, text) {
  text = text || 'текст не передан';

  ...
}</code></pre>
        </div>
      </div>
      
      </div><p>Второй способ считает, что аргумент отсутствует, если передана пустая строка, <code>0</code>, или вообще любое значение, которое в логическом контексте является <code>false</code>.</p>
</li>
</ol>
<p>Если аргументов передано больше, чем надо, например <code>showMessage(&quot;Маша&quot;, &quot;привет&quot;, 1, 2, 3)</code>, то ошибки не будет. Но, чтобы получить такие «лишние» аргументы, нужно будет прочитать их из специального объекта <code>arguments</code>, который мы рассмотрим в главе <a href="arguments-pseudoarray.htm">Псевдомассив аргументов &quot;arguments&quot;</a>.</p>
<h2><a class="main__anchor" name="возврат-значения" href="#возврат-значения">Возврат значения</a></h2><p>Функция может возвратить результат, который будет передан в вызвавший её код.</p>
<p>Например, создадим функцию <code>calcD</code>, которая будет возвращать дискриминант квадратного уравнения по формуле <code>b<sup>2</sup> – 4ac</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="1:3-9">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function calcD(a, b, c) {
   return b*b - 4*a*c;
}

var test = calcD(-4, 2, 1);
alert(test); // 20</code></pre>
        </div>
      </div>
      
      </div><p><strong>Для возврата значения используется директива <code>return</code>.</strong></p>
<p>Она может находиться в любом месте функции. Как только до неё доходит управление – функция  завершается и значение передается обратно.</p>
<p>Вызовов <code>return</code> может быть и несколько, например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function checkAge(age) {
  if (age &gt; 18) {
    return true;
  } else {
    return confirm('Родители разрешили?');
  }
}

var age = prompt('Ваш возраст?');

if (checkAge(age)) {
  alert( 'Доступ разрешен' );
} else {
  alert( 'В доступе отказано' );
}</code></pre>
        </div>
      </div>
      
      </div><p>Директива <code>return</code> может также использоваться без значения, чтобы прекратить выполнение и выйти из функции.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example" data-highlight-block="2-2">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function showMovie(age) {
  if (!checkAge(age)) {
    return;
  }

  alert( &quot;Фильм не для всех&quot; ); // (*)
  // ...
}</code></pre>
        </div>
      </div>
      
      </div><p>В коде выше, если сработал <code>if</code>, то строка <code>(*)</code> и весь код под ней никогда не выполнится, так как <code>return</code> завершает выполнение функции.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Значение функции без <code>return</code> и с пустым <code>return</code></span></div>
            <div class="important__content"><p>В случае, когда функция не вернула значение или <code>return</code> был без аргументов, считается что она вернула <code>undefined</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function doNothing() { /* пусто */ }

alert( doNothing() ); // undefined</code></pre>
        </div>
      </div>
      
      </div><p>Обратите внимание, никакой ошибки нет. Просто возвращается <code>undefined</code>.</p>
<p>Ещё пример, на этот раз с <code>return</code> без аргумента:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function doNothing() {
  return;
}

alert( doNothing() === undefined ); // true</code></pre>
        </div>
      </div>
      
      </div></div></div>
<h2><a class="main__anchor" name="function-naming" href="#function-naming">Выбор имени функции</a></h2><p>Имя функции следует тем же правилам, что и имя переменной. Основное отличие – оно должно быть глаголом, т.к. функция – это действие.</p>
<p>Как правило, используются глагольные префиксы, обозначающие общий характер действия, после которых следует уточнение.</p>
<p>Функции, которые начинаются с <code>&quot;show&quot;</code> – что-то показывают:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">showMessage(..)     // префикс show, &quot;показать&quot; сообщение</code></pre>
        </div>
      </div>
      
      </div><p>Функции, начинающиеся с <code>&quot;get&quot;</code> – получают, и т.п.:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">getAge(..)          // get, &quot;получает&quot; возраст
calcD(..)           // calc, &quot;вычисляет&quot; дискриминант
createForm(..)      // create, &quot;создает&quot; форму
checkPermission(..) // check, &quot;проверяет&quot; разрешение, возвращает true/false</code></pre>
        </div>
      </div>
      
      </div><p>Это очень удобно, поскольку взглянув на функцию – мы уже примерно представляем, что она делает, даже если функцию написал совсем другой человек, а в отдельных случаях – и какого вида значение она возвращает.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Одна функция – одно действие</span></div>
            <div class="important__content"><p>Функция должна делать только то, что явно подразумевается её названием. И это должно быть одно действие.</p>
<p>Если оно сложное и подразумевает поддействия – может быть имеет смысл выделить их в отдельные функции? Зачастую это имеет смысл, чтобы лучше структурировать код.</p>
<p><strong>…Но самое главное – в функции не должно быть ничего, кроме самого действия и поддействий, неразрывно связанных с ним.</strong></p>
<p>Например, функция проверки данных (скажем, <code>&quot;validate&quot;</code>) не должна показывать сообщение об ошибке. Её действие – проверить.</p>
</div></div>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Сверхкороткие имена функций</span></div>
            <div class="important__content"><p>Имена функций, которые используются <em>очень часто</em>, иногда делают сверхкороткими.</p>
<p>Например, во фреймворке <a href="http://jquery.com/">jQuery</a> есть функция <code>$</code>, во фреймворке <a href="http://prototypejs.org/">Prototype</a> – функция <code>$$</code>, а в библиотеке <a href="http://lodash.com/">LoDash</a> очень активно используется функция с названием из одного символа подчеркивания <code>_</code>.</p>
</div></div>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><p>Объявление функции имеет вид:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function имя(параметры, через, запятую) {
  код функции
}</code></pre>
        </div>
      </div>
      
      </div><ul>
<li>Передаваемые значения копируются в параметры функции и становятся локальными переменными.</li>
<li>Параметры функции копируются в её локальные переменные.</li>
<li>Можно объявить новые локальные переменные при помощи <code>var</code>.</li>
<li>Значение возвращается оператором <code>return ...</code>.</li>
<li>Вызов <code>return</code> тут же прекращает функцию.</li>
<li>Если <code>return;</code> вызван без значения, или функция завершилась без <code>return</code>, то её результат равен <code>undefined</code>.</li>
</ul>
<p>При обращении к необъявленной переменной функция будет искать внешнюю переменную с таким именем, но лучше, если функция использует только локальные переменные:</p>
<ul>
<li>Это делает очевидным общий поток выполнения – что передаётся в функцию и какой получаем результат.</li>
<li>Это предотвращает возможные конфликты доступа, когда две функции, возможно написанные в разное время или разными людьми, неожиданно друг для друга меняют одну и ту же внешнюю переменную.</li>
</ul>
<p>Именование функций:</p>
<ul>
<li>Имя функции должно понятно и чётко отражать, что она делает. Увидев её вызов в коде, вы должны тут же понимать, что она делает.</li>
<li>Функция – это действие, поэтому для имён функций, как правило, используются глаголы.</li>
</ul>
<p>Функции являются основными строительными блоками скриптов. Мы будем неоднократно возвращаться к ним и изучать все более и более глубоко.</p>
</div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#обязателен-ли-else" name="обязателен-ли-else" class="main__anchor">Обязателен ли &quot;else&quot;?</a></h3><a href="task/if-else-required.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 4</span></div><div class="task__content"><p>Следующая функция возвращает <code>true</code>, если параметр <code>age</code> больше <code>18</code>.
В ином случае она задаёт вопрос посредством вызова <code>confirm</code> и возвращает его результат.</p>
<div data-trusted="1" class="code-example" data-highlight-block="3-6">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function checkAge(age) {
  if (age &gt; 18) {
    return true;
  } else {
    // ...
    return confirm('Родители разрешили?');
  }
}</code></pre>
        </div>
      </div>
      
      </div><p>Будет ли эта функция работать как-то иначе, если убрать <code>else</code>?</p>
<div data-trusted="1" class="code-example" data-highlight-block="4-5">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function checkAge(age) {
  if (age &gt; 18) {
    return true;
  }
  // ...
  return confirm('Родители разрешили?');
}</code></pre>
        </div>
      </div>
      
      </div><p>Есть ли хоть одно отличие в поведении этого варианта?</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Оба варианта функции работают одинаково, отличий нет.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#перепишите-функцию-используя-оператор-или" name="перепишите-функцию-используя-оператор-или" class="main__anchor">Перепишите функцию, используя оператор '?' или '||'</a></h3><a href="task/rewrite-function-question-or.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 4</span></div><div class="task__content"><p>Следующая функция возвращает <code>true</code>, если параметр <code>age</code> больше <code>18</code>.
В ином случае она задаёт вопрос <code>confirm</code> и возвращает его результат.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function checkAge(age) {
  if (age &gt; 18) {
    return true;
  } else {
    return confirm('Родители разрешили?');
  }
}</code></pre>
        </div>
      </div>
      
      </div><p>Перепишите функцию, чтобы она делала то же самое, но без <code>if</code>, в одну строку.
Сделайте два варианта функции <code>checkAge</code>:</p>
<ol>
<li>Используя оператор <code>'?'</code></li>
<li>Используя оператор <code>||</code></li>
</ol>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Используя оператор <code>'?'</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function checkAge(age) {
  return (age &gt; 18) ? true : confirm('Родители разрешили?');
}</code></pre>
        </div>
      </div>
      
      </div><p>Используя оператор <code>||</code> (самый короткий вариант):</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function checkAge(age) {
  return (age &gt; 18) || confirm('Родители разрешили?');
}</code></pre>
        </div>
      </div>
      
      </div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#функция-min" name="функция-min" class="main__anchor">Функция min</a></h3><a href="task/min.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 1</span></div><div class="task__content"><p>Задача «Hello World» для функций :)</p>
<p>Напишите функцию <code>min(a,b)</code>, которая возвращает меньшее из чисел <code>a,b</code>.</p>
<p>Пример вызовов:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">min(2, 5) == 2
min(3, -1) == -1
min(1, 1) == 1</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Вариант решения с использованием <code>if</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function min(a, b) {
  if (a &lt; b) {
    return a;
  } else {
    return b;
  }
}</code></pre>
        </div>
      </div>
      
      </div><p>Вариант решения с оператором <code>'?'</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function min(a, b) {
  return a &lt; b ? a : b;
}</code></pre>
        </div>
      </div>
      
      </div><p>P.S. Случай равенства <code>a == b</code> здесь отдельно не рассматривается, так как при этом неважно, что возвращать.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#функция-pow-x-n" name="функция-pow-x-n" class="main__anchor">Функция pow(x,n)</a></h3><a href="task/pow.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 4</span></div><div class="task__content"><p>Напишите функцию <code>pow(x,n)</code>, которая возвращает <code>x</code> в степени <code>n</code>. Иначе говоря, умножает <code>x</code> на себя <code>n</code> раз и возвращает результат.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">pow(3, 2) = 3 * 3 = 9
pow(3, 3) = 3 * 3 * 3 = 27
pow(1, 100) = 1 * 1 * ...*1 = 1</code></pre>
        </div>
      </div>
      
      </div><p>Создайте страницу, которая запрашивает <code>x</code> и <code>n</code>, а затем выводит результат  <code>pow(x,n)</code>.</p>
<p><a href="#" onclick="event.preventDefault(); runDemo(this)">Запустить демо</a></p><p>P.S. В этой задаче функция обязана поддерживать только натуральные значения <code>n</code>, т.е. целые от <code>1</code> и выше.</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><div data-trusted="1" class="code-example" data-demo="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">/**
 * Возводит x в степень n (комментарий JSDoc)
 *
 * @param {number} x число, которое возводится в степень
 * @param {number} n степень, должна быть целым числом больше 1
 *
 * @return {number} x в степени n
 */
function pow(x, n) {
  var result = x;

  for (var i = 1; i &lt; n; i++) {
    result *= x;
  }

  return result;
}

var x = prompt(&quot;x?&quot;, '');
var n = prompt(&quot;n?&quot;, '');

if (n &lt;= 1) {
  alert('Степень ' + n +
    'не поддерживается, введите целую степень, большую 1'
  );
} else {
  alert( pow(x, n) );
}</code></pre>
        </div>
      </div>
      
      </div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>