<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="js.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Язык JavaScript</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="objects-more.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Методы объектов и контекст вызова</span></a></li></ol><h1 class="main__header-title">Привязка контекста и карринг: &quot;bind&quot;</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Привязка контекста и карринг: &quot;bind&quot;"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Функции в JavaScript никак не привязаны к своему контексту <code>this</code>, с одной стороны, здорово – это позволяет быть максимально гибкими, одалживать методы и так далее.</p>
<p>Но с другой стороны – в некоторых случаях контекст может быть потерян. То есть мы вроде как вызываем метод объекта, а на самом деле он получает <code>this = undefined</code>.</p>
<p>Такая ситуация является типичной для начинающих разработчиков, но бывает и у «зубров» тоже. Конечно, «зубры» при этом знают, что с ней делать.</p>
<h2><a class="main__anchor" name="пример-потери-контекста" href="#пример-потери-контекста">Пример потери контекста</a></h2><p>В браузере есть встроенная функция <code>setTimeout(func, ms)</code>, которая вызывает выполнение функции <code>func</code> через <code>ms</code> миллисекунд (=1/1000 секунды).</p>
<p>Мы подробно остановимся на ней и её тонкостях позже, в главе <a href="settimeout-setinterval.htm">setTimeout и setInterval</a>, а пока просто посмотрим пример.</p>
<p>Этот код выведет «Привет» через 1000 мс, то есть 1 секунду:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">setTimeout(function() {
  alert( &quot;Привет&quot; );
}, 1000);</code></pre>
        </div>
      </div>
      
      </div><p>Попробуем сделать то же самое с методом объекта, следующий код должен выводить имя пользователя через 1 секунду:</p>
<div data-trusted="1" class="code-example" data-highlight-block="7-7">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = {
  firstName: &quot;Вася&quot;,
  sayHi: function() {
    alert( this.firstName );
  }
};

setTimeout(user.sayHi, 1000); // undefined (не Вася!)</code></pre>
        </div>
      </div>
      
      </div><p>При запуске кода выше через секунду выводится вовсе не <code>&quot;Вася&quot;</code>, а <code>undefined</code>!</p>
<p>Это произошло потому, что в примере выше <code>setTimeout</code> получил функцию <code>user.sayHi</code>, но не её контекст. То есть, последняя строчка аналогична двум таким:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var f = user.sayHi;
setTimeout(f, 1000); // контекст user потеряли</code></pre>
        </div>
      </div>
      
      </div><p>Ситуация довольно типична – мы хотим передать метод объекта куда-то в другое место кода, откуда он потом может быть вызван. Как бы прикрепить к нему контекст, желательно, с минимумом плясок с бубном и при этом надёжно?</p>
<p>Есть несколько способов решения, среди которых мы, в зависимости от ситуации, можем выбирать.</p>
<h2><a class="main__anchor" name="решение-1-сделать-обёртку" href="#решение-1-сделать-обёртку">Решение 1: сделать обёртку</a></h2><p>Самый простой вариант решения – это обернуть вызов в анонимную функцию:</p>
<div data-trusted="1" class="code-example" data-highlight-block="7-9">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = {
  firstName: &quot;Вася&quot;,
  sayHi: function() {
    alert( this.firstName );
  }
};

setTimeout(function() {
  user.sayHi(); // Вася
}, 1000);</code></pre>
        </div>
      </div>
      
      </div><p>Теперь код работает, так как <code>user</code> достаётся из замыкания.</p>
<p>Это решение также позволяет передать дополнительные аргументы:</p>
<div data-trusted="1" class="code-example" data-highlight-block="7-9">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = {
  firstName: &quot;Вася&quot;,
  sayHi: function(who) {
    alert( this.firstName + &quot;: Привет, &quot; + who );
  }
};

setTimeout(function() {
  user.sayHi(&quot;Петя&quot;); // Вася: Привет, Петя
}, 1000);</code></pre>
        </div>
      </div>
      
      </div><p>Но тут же появляется и уязвимое место в структуре кода!</p>
<p>А что, если до срабатывания <code>setTimeout</code> (ведь есть целая секунда) в переменную <code>user</code> будет записано другое значение? К примеру, в другом месте кода будет присвоено <code>user=(другой пользователь)</code>… В этом случае вызов неожиданно будет совсем не тот!</p>
<p>Хорошо бы гарантировать правильность контекста.</p>
<h2><a class="main__anchor" name="решение-2-bind-для-привязки-контекста" href="#решение-2-bind-для-привязки-контекста">Решение 2: bind для привязки контекста</a></h2><p>Напишем вспомогательную функцию <code>bind(func, context)</code>, которая будет жёстко фиксировать контекст для <code>func</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function bind(func, context) {
  return function() { // (*)
    return func.apply(context, arguments);
  };
}</code></pre>
        </div>
      </div>
      
      </div><p>Посмотрим, что она делает, как работает, на таком примере:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f() {
  alert( this );
}

var g = bind(f, &quot;Context&quot;);
g(); // Context</code></pre>
        </div>
      </div>
      
      </div><p>То есть, <code>bind(f, &quot;Context&quot;)</code> привязывает <code>&quot;Context&quot;</code> в качестве <code>this</code> для <code>f</code>.</p>
<p>Посмотрим, за счёт чего это происходит.</p>
<p>Результатом  <code>bind(f, &quot;Context&quot;)</code>, как видно из кода, будет анонимная функция <code>(*)</code>.</p>
<p>Вот она отдельно:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function() { // (*)
  return func.apply(context, arguments);
};</code></pre>
        </div>
      </div>
      
      </div><p>Если подставить наши конкретные аргументы, то есть <code>f</code> и <code>&quot;Context&quot;</code>, то получится так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function() { // (*)
  return f.apply(&quot;Context&quot;, arguments);
};</code></pre>
        </div>
      </div>
      
      </div><p>Эта функция запишется в переменную <code>g</code>.</p>
<p>Далее, если вызвать <code>g</code>, то вызов будет передан в <code>f</code>, причём <code>f.apply(&quot;Context&quot;, arguments)</code> передаст в качестве контекста <code>&quot;Context&quot;</code>, который и будет выведен.</p>
<p>Если вызвать <code>g</code> с аргументами, то также будет работать:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f(a, b) {
  alert( this );
  alert( a + b );
}

var g = bind(f, &quot;Context&quot;);
g(1, 2); // Context, затем 3</code></pre>
        </div>
      </div>
      
      </div><p>Аргументы, которые получила <code>g(...)</code>, передаются в <code>f</code> также благодаря методу <code>.apply</code>.</p>
<p><strong>Иными словами, в результате вызова <code>bind(func, context)</code> мы получаем «функцию-обёртку», которая прозрачно передаёт вызов в <code>func</code>, с теми же аргументами, но фиксированным контекстом <code>context</code>.</strong></p>
<p>Вернёмся к <code>user.sayHi</code>. Вариант с <code>bind</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="13-13">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function bind(func, context) {
  return function() {
    return func.apply(context, arguments);
  };
}

var user = {
  firstName: &quot;Вася&quot;,
  sayHi: function() {
    alert( this.firstName );
  }
};

setTimeout(bind(user.sayHi, user), 1000);</code></pre>
        </div>
      </div>
      
      </div><p>Теперь всё в порядке!</p>
<p>Вызов <code>bind(user.sayHi, user)</code> возвращает такую функцию-обёртку, которая привязывает <code>user.sayHi</code> к контексту <code>user</code>. Она будет вызвана через 1000 мс.</p>
<p>Полученную обёртку можно вызвать и с аргументами – они пойдут в <code>user.sayHi</code> без изменений, фиксирован лишь контекст.</p>
<div data-trusted="1" class="code-example" data-highlight-block="2-2,9-11">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = {
  firstName: &quot;Вася&quot;,
  sayHi: function(who) { // здесь у sayHi есть один аргумент
    alert( this.firstName + &quot;: Привет, &quot; + who );
  }
};

var sayHi = bind(user.sayHi, user);

// контекст Вася, а аргумент передаётся &quot;как есть&quot;
sayHi(&quot;Петя&quot;); // Вася: Привет, Петя
sayHi(&quot;Маша&quot;); // Вася: Привет, Маша</code></pre>
        </div>
      </div>
      
      </div><p>В примере выше продемонстрирована другая частая цель использования <code>bind</code> – «привязать» функцию к контексту, чтобы в дальнейшем «не таскать за собой» объект, а просто вызывать <code>sayHi</code>.</p>
<p>Результат <code>bind</code> можно передавать в любое место кода, вызывать как обычную функцию, он «помнит» свой контекст.</p>
<h2><a class="main__anchor" name="bind" href="#bind">Решение 3: встроенный метод bind</a></h2><p>В современном JavaScript (или при подключении библиотеки <a href="https://github.com/kriskowal/es5-shim">es5-shim</a> для IE8-) у функций уже есть встроенный метод <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind">bind</a>, который мы можем использовать.</p>
<p>Он работает примерно так же, как <code>bind</code>, который описан выше.</p>
<p>Изменения очень небольшие:</p>
<div data-trusted="1" class="code-example" data-highlight-block="5-7">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f(a, b) {
  alert( this );
  alert( a + b );
}

// вместо
// var g = bind(f, &quot;Context&quot;);
var g = f.bind(&quot;Context&quot;);
g(1, 2); // Context, затем 3</code></pre>
        </div>
      </div>
      
      </div><p>Синтаксис встроенного <code>bind</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var wrapper = func.bind(context[, arg1, arg2...])</code></pre>
        </div>
      </div>
      
      </div><dl>
<dt><code>func</code></dt>
<dd>Произвольная функция</dd>
<dt><code>context</code></dt>
<dd>Контекст, который привязывается к <code>func</code></dd>
<dt><code>arg1</code>, <code>arg2</code>, …</dt>
<dd>Если указаны аргументы <code>arg1, arg2...</code> – они будут прибавлены к каждому вызову новой функции, причем встанут <em>перед</em> теми, которые указаны при вызове.</dd>
</dl>
<p>Результат вызова <code>func.bind(context)</code> аналогичен вызову <code>bind(func, context)</code>, описанному выше. То есть, <code>wrapper</code> – это обёртка, фиксирующая контекст и передающая вызовы в <code>func</code>. Также можно указать аргументы, тогда и они будут фиксированы, но об этом чуть позже.</p>
<p>Пример со встроенным методом <code>bind</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="7-8">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = {
  firstName: &quot;Вася&quot;,
  sayHi: function() {
    alert( this.firstName );
  }
};

// setTimeout( bind(user.sayHi, user), 1000 );
setTimeout(user.sayHi.bind(user), 1000); // аналог через встроенный метод</code></pre>
        </div>
      </div>
      
      </div><p>Получили простой и надёжный способ привязать контекст, причём даже встроенный в JavaScript.</p>
<p>Далее мы будем использовать именно встроенный метод <code>bind</code>.</p>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">bind не похож на call/apply</span></div>
            <div class="important__content"><p>Методы <code>bind</code> и <code>call/apply</code> близки по синтаксису, но есть важнейшее отличие.</p>
<p>Методы <code>call/apply</code> вызывают функцию с заданным контекстом и аргументами.</p>
<p>А <code>bind</code> не вызывает функцию. Он только возвращает «обёртку», которую мы можем вызвать позже, и которая передаст вызов в исходную функцию, с привязанным контекстом.</p>
</div></div>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Привязать всё: <code>bindAll</code></span></div>
            <div class="important__content"><p>Если у объекта много методов и мы планируем их активно передавать, то можно привязать контекст для них всех в цикле:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">for (var prop in user) {
  if (typeof user[prop] == 'function') {
    user[prop] = user[prop].bind(user);
  }
}</code></pre>
        </div>
      </div>
      
      </div><p>В некоторых JS-фреймворках есть даже встроенные функции для этого, например <a href="http://lodash.com/docs#bindAll">_.bindAll(obj)</a>.</p>
</div></div>
<h2><a class="main__anchor" name="карринг" href="#карринг">Карринг</a></h2><p>До этого мы говорили о привязке контекста. Теперь пойдём на шаг дальше. Привязывать можно не только контекст, но и аргументы. Используется это реже, но бывает полезно.</p>
<p><a href="http://ru.wikipedia.org/wiki/%D0%9A%D0%B0%D1%80%D1%80%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5">Карринг</a>  (currying) или <em>каррирование</em> – термин <a href="http://ru.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5">функционального программирования</a>, который означает создание новой функции путём фиксирования аргументов существующей.</p>
<p>Как было сказано выше, метод <code>func.bind(context, ...)</code> может создавать обёртку, которая фиксирует не только контекст, но и ряд аргументов функции.</p>
<p>Например, есть функция умножения двух чисел <code>mul(a, b)</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function mul(a, b) {
  return a * b;
};</code></pre>
        </div>
      </div>
      
      </div><p>При помощи <code>bind</code> создадим функцию <code>double</code>, удваивающую значения. Это будет вариант функции <code>mul</code> с фиксированным первым аргументом:</p>
<div data-trusted="1" class="code-example" data-highlight-block="0-1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// double умножает только на два
var double = mul.bind(null, 2); // контекст фиксируем null, он не используется

alert( double(3) ); // = mul(2, 3) = 6
alert( double(4) ); // = mul(2, 4) = 8
alert( double(5) ); // = mul(2, 5) = 10</code></pre>
        </div>
      </div>
      
      </div><p>При вызове <code>double</code> будет передавать свои аргументы исходной функции <code>mul</code> после тех, которые указаны в <code>bind</code>, то есть в данном случае после зафиксированного первого аргумента <code>2</code>.</p>
<p><strong>Говорят, что <code>double</code> является «частичной функцией» (partial function) от <code>mul</code>.</strong></p>
<p>Другая частичная функция <code>triple</code> утраивает значения:</p>
<div data-trusted="1" class="code-example" data-highlight-block="0-0">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var triple = mul.bind(null, 3); // контекст фиксируем null, он не используется

alert( triple(3) ); // = mul(3, 3) = 9
alert( triple(4) ); // = mul(3, 4) = 12
alert( triple(5) ); // = mul(3, 5) = 15</code></pre>
        </div>
      </div>
      
      </div><p>При помощи <code>bind</code> мы можем получить из функции её «частный вариант» как самостоятельную функцию и дальше передать в <code>setTimeout</code> или сделать с ней что-то ещё.</p>
<p>Наш выигрыш состоит в том, что эта самостоятельная функция, во-первых, имеет понятное имя (<code>double</code>, <code>triple</code>), а во-вторых, повторные вызовы позволяют не указывать каждый раз первый аргумент, он уже фиксирован благодаря <code>bind</code>.</p>
<h2><a class="main__anchor" name="функция-ask-для-задач" href="#функция-ask-для-задач">Функция ask для задач</a></h2><p>В задачах этого раздела предполагается, что объявлена следующая «функция вопросов» <code>ask</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function ask(question, answer, ok, fail) {
  var result = prompt(question, '');
  if (result.toLowerCase() == answer.toLowerCase()) ok();
  else fail();
}</code></pre>
        </div>
      </div>
      
      </div><p>Её назначение – задать вопрос <code>question</code> и, если ответ совпадёт с <code>answer</code>, то запустить функцию <code>ok()</code>, а иначе – функцию <code>fail()</code>.</p>
<p>Несмотря на внешнюю простоту, функции такого вида активно используются в реальных проектах. Конечно, они будут сложнее, вместо <code>alert/prompt</code> – вывод красивого  JavaScript-диалога с рамочками, кнопочками и так далее, но это нам сейчас не нужно.</p>
<p>Пример использования:</p>
<div data-trusted="1" class="code-example" data-highlight-block="0-0">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">ask(&quot;Выпустить птичку?&quot;, &quot;да&quot;, fly, die);

function fly() {
  alert( 'улетела :)' );
}

function die() {
  alert( 'птичку жалко :(' );
}</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><ul>
<li>
<p>Функция сама по себе не запоминает контекст выполнения.</p>
</li>
<li>
<p>Чтобы гарантировать правильный контекст для вызова <code>obj.func()</code>, нужно использовать функцию-обёртку, задать её через анонимную функцию:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">setTimeout(function() {
  obj.func();
})</code></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p>…Либо использовать <code>bind</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">setTimeout(obj.func.bind(obj));</code></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p>Вызов <code>bind</code> часто используют для привязки функции к контексту, чтобы затем присвоить её в обычную переменную и вызывать уже без явного указания объекта.</p>
</li>
<li>
<p>Вызов <code>bind</code> также позволяет фиксировать первые аргументы функции («каррировать» её), и таким образом из общей функции получить её «частные» варианты – чтобы использовать их многократно без повтора одних и тех же аргументов каждый раз.</p>
</li>
</ul>
</div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#кросс-браузерная-эмуляция-bind" name="кросс-браузерная-эмуляция-bind" class="main__anchor">Кросс-браузерная эмуляция bind</a></h3><a href="task/cross-browser-bind.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 3</span></div><div class="task__content"><p>Если вы вдруг захотите копнуть поглубже – аналог <code>bind</code> для IE8- и старых версий других браузеров будет выглядеть следующим образом:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function bind(func, context /*, args*/) {
  var bindArgs = [].slice.call(arguments, 2); // (1)
  function wrapper() {                        // (2)
    var args = [].slice.call(arguments);
    var unshiftArgs = bindArgs.concat(args);  // (3)
    return func.apply(context, unshiftArgs);  // (4)
  }
  return wrapper;
}</code></pre>
        </div>
      </div>
      
      </div><p>Использование – вместо <code>mul.bind(null, 2)</code> вызывать <code>bind(mul, null, 2)</code>.</p>
<p>Не факт, что он вам понадобится, но в качестве упражнения попробуйте разобраться, как это работает.</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Страшновато выглядит, да? Работает так (по строкам):</p>
<ol>
<li>Вызов <code>bind</code> сохраняет дополнительные аргументы <code>args</code> (они идут со 2-го номера) в массив <code>bindArgs</code>.</li>
<li>… и возвращает обертку <code>wrapper</code>.</li>
<li>Эта обёртка делает из <code>arguments</code> массив <code>args</code> и затем, используя метод <a href="http://javascript.ru/Array/concat">concat</a>, прибавляет их к аргументам <code>bindArgs</code> (карринг).</li>
<li>Затем передаёт вызов <code>func</code> с контекстом и общим массивом аргументов.</li>
</ol>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#запись-в-объект-после-bind" name="запись-в-объект-после-bind" class="main__anchor">Запись в объект после bind</a></h3><a href="task/write-to-object-after-bind.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Что выведет функция?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f() {
  alert( this );
}

var user = {
  g: f.bind(&quot;Hello&quot;)
}

user.g();</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Ответ: <code>Hello</code>.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f() {
  alert( this );
}

var user = {
  g: f.bind(&quot;Hello&quot;)
}

user.g();</code></pre>
        </div>
      </div>
      
      </div><p>Так как вызов идёт в контексте объекта <code>user.g()</code>, то внутри функции <code>g</code> контекст <code>this = user</code>.</p>
<p>Однако, функции <code>g</code> совершенно без разницы, какой <code>this</code> она получила.</p>
<p>Её единственное предназначение – это передать вызов в <code>f</code> вместе с аргументами и ранее указанным контекстом <code>&quot;Hello&quot;</code>, что она и делает.</p>
<p>Эта задача демонстрирует, что изменить однажды привязанный контекст уже нельзя.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#повторный-bind" name="повторный-bind" class="main__anchor">Повторный bind</a></h3><a href="task/second-bind.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Что выведет этот код?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f() {
  alert(this.name);
}

f = f.bind( {name: &quot;Вася&quot;} ).bind( {name: &quot;Петя&quot; } );

f();</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Ответ: <code>&quot;Вася&quot;</code>.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f() {
  alert(this.name);
}

f = f.bind( {name: &quot;Вася&quot;} ).bind( {name: &quot;Петя&quot;} );

f(); // Вася</code></pre>
        </div>
      </div>
      
      </div><p>Первый вызов <code>f.bind(..Вася..)</code> возвращает «обёртку», которая устанавливает контекст для <code>f</code> и передаёт вызов <code>f</code>.</p>
<p>Следующий вызов <code>bind</code> будет устанавливать контекст уже для этой обёртки. Это ни на что не повлияет.</p>
<p>Чтобы это проще понять, используем наш собственный вариант <code>bind</code> вместо встроенного:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function bind(func, context) {
  return function() {
    return func.apply(context, arguments);
  };
}</code></pre>
        </div>
      </div>
      
      </div><p>Код станет таким:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f() {
  alert(this.name);
}

f = bind(f, {name: &quot;Вася&quot;} ); // (1)
f = bind(f, {name: &quot;Петя&quot;} ); // (2)

f(); // Вася</code></pre>
        </div>
      </div>
      
      </div><p>Здесь видно, что первый вызов <code>bind</code>, в строке <code>(1)</code>, возвращает обёртку вокруг <code>f</code>, которая выглядит так (выделена):</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-4">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function bind(func, context) {
  return function() {
    // здесь this не используется
    return func.apply(context, arguments);
  };
}</code></pre>
        </div>
      </div>
      
      </div><p>В этой обёртке нигде не используется <code>this</code>, контекст <code>context</code> берётся из замыкания. Посмотрите на код, там нигде нет <code>this</code>.</p>
<p>Поэтому следующий <code>bind</code> в строке <code>(2)</code>, который выполняется уже над обёрткой и фиксирует в ней <code>this</code>, ни на что не влияет. Какая разница, что будет в качестве <code>this</code> в функции, которая этот <code>this</code> не использует? Контекст <code>context</code>, как видно в коде выше, она получает через замыкание из аргументов первого <code>bind</code>.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#свойство-функции-после-bind" name="свойство-функции-после-bind" class="main__anchor">Свойство функции после bind</a></h3><a href="task/function-property-after-bind.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>В свойство функции записано значение. Изменится ли оно после применения <code>bind</code>? Обоснуйте ответ.</p>
<div data-trusted="1" class="code-example" data-highlight-block="6-10">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function sayHi() {
  alert( this.name );
}
sayHi.test = 5;
alert( sayHi.test ); // 5

var bound = sayHi.bind({
  name: &quot;Вася&quot;
});

alert( bound.test ); // что выведет? почему?</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Ответ: <code>undefined</code>.</p>
<p>Результатом работы <code>bind</code> является функция-обёртка над <code>sayHi</code>. Эта функция – самостоятельный объект, у неё уже нет свойства <code>test</code>.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#использование-функции-вопросов" name="использование-функции-вопросов" class="main__anchor">Использование функции вопросов</a></h3><a href="task/question-use-bind.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Вызов <code>user.checkPassword()</code> в коде ниже должен, при помощи <code>ask</code>, спрашивать пароль и вызывать <code>loginOk/loginFail</code> в зависимости от правильности ответа.</p>
<p>Однако, его вызов приводит к ошибке. Почему?</p>
<p>Исправьте выделенную строку, чтобы всё работало (других строк изменять не надо).</p>
<div data-trusted="1" class="code-example" data-highlight-block="21-21">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">&quot;use strict&quot;;

function ask(question, answer, ok, fail) {
  var result = prompt(question, '');
  if (result.toLowerCase() == answer.toLowerCase()) ok();
  else fail();
}

var user = {
  login: 'Василий',
  password: '12345',

  loginOk: function() {
    alert( this.login + ' вошёл в сайт' );
  },

  loginFail: function() {
    alert( this.login + ': ошибка входа' );
  },

  checkPassword: function() {
    ask(&quot;Ваш пароль?&quot;, this.password, this.loginOk, this.loginFail);
  }
};

user.checkPassword();</code></pre>
        </div>
      </div>
      
      </div><p>P.S. Ваше решение должно также срабатывать, если переменная <code>user</code> будет перезаписана, например вместо <code>user.checkPassword()</code> в конце будут строки:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var vasya = user;
user = null;
vasya.checkPassword();</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__step"><button type="button" class="task__step-show">Решение с bind</button><div class="task__answer-content"><h4 class="task__step-title">Решение с bind</h4><p>Ошибка происходит потому, что <code>ask</code> получает только функцию, без объекта-контекста.</p>
<p>Используем <code>bind</code>, чтобы передать в <code>ask</code> функцию с уже привязанным контекстом:</p>
<div data-trusted="1" class="code-example" data-highlight-block="21-21">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">&quot;use strict&quot;;

function ask(question, answer, ok, fail) {
  var result = prompt(question, '');
  if (result.toLowerCase() == answer.toLowerCase()) ok();
  else fail();
}

var user = {
  login: 'Василий',
  password: '12345',

  loginOk: function() {
    alert( this.login + ' вошёл в сайт' );
  },

  loginFail: function() {
    alert( this.login + ': ошибка входа' );
  },

  checkPassword: function() {
    ask(&quot;Ваш пароль?&quot;, this.password, this.loginOk.bind(this), this.loginFail.bind(this));
  }
};

var vasya = user;
user = null;
vasya.checkPassword();</code></pre>
        </div>
      </div>
      
      </div></div></div><div class="task__step"><button type="button" class="task__step-show">Решение через замыкание</button><div class="task__answer-content"><h4 class="task__step-title">Решение через замыкание</h4><p>Альтернативное решение – сделать функции-обёртки над <code>user.loginOk/loginFail</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="3-4">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = {
  ...
  checkPassword: function() {
    ask(&quot;Ваш пароль?&quot;, this.password,
      function() { user.loginOk(); }, function() { user.loginFail(); });
  }
}</code></pre>
        </div>
      </div>
      
      </div><p>…Но такой код использует переменную <code>user</code>, так что если объект переместить из неё, к примеру, так, то работать он не будет:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var vasya = user; // переместим user в vasya
user = null;
vasya.checkPassword(); // упс будет ошибка, ведь в коде объекта остался user</code></pre>
        </div>
      </div>
      
      </div><p>Для того, чтобы избежать проблем, можно использовать <code>this</code>. Внутри <code>checkPassword</code> он всегда будет равен текущему объекту, так что скопируем его в переменную, которую назовём <code>self</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="21-29">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">&quot;use strict&quot;;

function ask(question, answer, ok, fail) {
  var result = prompt(question, '');
  if (result.toLowerCase() == answer.toLowerCase()) ok();
  else fail();
}

var user = {
  login: 'Василий',
  password: '12345',

  loginOk: function() {
    alert( this.login + ' вошёл в сайт' );
  },

  loginFail: function() {
    alert( this.login + ': ошибка входа' );
  },

  checkPassword: function() {
    var self = this;
    ask(&quot;Ваш пароль?&quot;, this.password,
      function() {
        self.loginOk();
      },
      function() {
        self.loginFail();
      }
    );
  }
};

var vasya = user;
user = null;
vasya.checkPassword();</code></pre>
        </div>
      </div>
      
      </div><p>Теперь всё работает. Анонимные функции достают правильный контекст из замыкания, где он сохранён в переменной <code>self</code>.</p>
</div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#использование-функции-вопросов-с-каррингом" name="использование-функции-вопросов-с-каррингом" class="main__anchor">Использование функции вопросов с каррингом</a></h3><a href="task/ask-currying.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Эта задача – усложнённый вариант задачи <a href="task/question-use-bind.htm">Использование функции вопросов</a>. В ней объект <code>user</code> изменён.</p>
<p>Теперь заменим две функции <code>user.loginOk()</code> и <code>user.loginFail()</code> на единый метод: <code>user.loginDone(true/false)</code>, который нужно вызвать с <code>true</code> при верном ответе и с <code>false</code> – при неверном.</p>
<p>Код ниже делает это, соответствующий фрагмент выделен.</p>
<p><strong>Сейчас он обладает важным недостатком: при записи в <code>user</code> другого значения объект перестанет корректно работать, вы увидите это, запустив пример ниже (будет ошибка).</strong></p>
<p>Как бы вы написали правильно?</p>
<p><strong>Исправьте выделенный фрагмент, чтобы код заработал.</strong></p>
<div data-trusted="1" class="code-example" data-highlight-block="18-25">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">&quot;use strict&quot;;

function ask(question, answer, ok, fail) {
  var result = prompt(question, '');
  if (result.toLowerCase() == answer.toLowerCase()) ok();
  else fail();
}

var user = {
  login: 'Василий',
  password: '12345',

  // метод для вызова из ask
  loginDone: function(result) {
    alert( this.login + (result ? ' вошёл в сайт' : ' ошибка входа') );
  },

  checkPassword: function() {
    ask(&quot;Ваш пароль?&quot;, this.password,
      function() {
        user.loginDone(true);
      },
      function() {
        user.loginDone(false);
      }
    );
  }
};

var vasya = user;
user = null;
vasya.checkPassword();</code></pre>
        </div>
      </div>
      
      </div><p>Изменения должны касаться только выделенного фрагмента.</p>
<p>Если возможно, предложите два решения, одно – с использованием <code>bind</code>, другое – без него. Какое решение лучше?</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__step"><button type="button" class="task__step-show">Решение с bind</button><div class="task__answer-content"><h4 class="task__step-title">Решение с bind</h4><p>Первое решение – передать в <code>ask</code> функции с привязанным контекстом и аргументами.</p>
<div data-trusted="1" class="code-example" data-highlight-block="17-17">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">&quot;use strict&quot;;

function ask(question, answer, ok, fail) {
  var result = prompt(question, '');
  if (result.toLowerCase() == answer.toLowerCase()) ok();
  else fail();
}

var user = {
  login: 'Василий',
  password: '12345',

  loginDone: function(result) {
    alert( this.login + (result ? ' вошёл в сайт' : ' ошибка входа') );
  },

  checkPassword: function() {
    ask(&quot;Ваш пароль?&quot;, this.password, this.loginDone.bind(this, true), this.loginDone.bind(this, false));
  }
};

user.checkPassword();</code></pre>
        </div>
      </div>
      
      </div></div></div><div class="task__step"><button type="button" class="task__step-show">Решение с локальной переменной</button><div class="task__answer-content"><h4 class="task__step-title">Решение с локальной переменной</h4><p>Второе решение – это скопировать <code>this</code> в локальную переменную (чтобы внешняя перезапись не повлияла):</p>
<div data-trusted="1" class="code-example" data-highlight-block="18-25">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">&quot;use strict&quot;;

function ask(question, answer, ok, fail) {
  var result = prompt(question, '');
  if (result.toLowerCase() == answer.toLowerCase()) ok();
  else fail();
}

var user = {
  login: 'Василий',
  password: '12345',

  loginDone: function(result) {
    alert( this.login + (result ? ' вошёл в сайт' : ' ошибка входа') );
  },

  checkPassword: function() {
    var self = this;
    ask(&quot;Ваш пароль?&quot;, this.password,
      function() {
        self.loginDone(true);
      },
      function() {
        self.loginDone(false);
      }
    );
  }
};

user.checkPassword();</code></pre>
        </div>
      </div>
      
      </div><p>Оба решения хороши, вариант с <code>bind</code> короче.</p>
</div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>