<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="js.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Язык JavaScript</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="prototypes.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">ООП в прототипном стиле</span></a></li></ol><h1 class="main__header-title">Наследование классов в JavaScript</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Наследование классов в JavaScript"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Наследование на уровне объектов в JavaScript, как мы видели, реализуется через ссылку <code>__proto__</code>.</p>
<p>Теперь поговорим о наследовании на уровне классов, то есть когда объекты, создаваемые, к примеру, через <code>new Admin</code>, должны иметь все методы, которые есть у объектов, создаваемых через <code>new User</code>, и ещё какие-то свои.</p>
<h2><a class="main__anchor" name="наследование-array-от-object" href="#наследование-array-от-object">Наследование Array от Object</a></h2><p>Для реализации наследования в наших классах мы будем использовать тот же подход, который принят внутри JavaScript.</p>
<p>Взглянем на него ещё раз на примере <code>Array</code>, который наследует от <code>Object</code>:</p>
<figure><div class="image" style="width:223px">
      <div class="image__ratio" style="padding-top:141.70403587443948%"></div>
      <img src="article/class-inheritance/class-inheritance-array-object.png" alt="" width="223" height="316" class="image__image">
      </div></figure><ul>
<li>Методы массивов <code>Array</code> хранятся в <code>Array.prototype</code>.</li>
<li><code>Array.prototype</code> имеет прототипом <code>Object.prototype</code>.</li>
</ul>
<p>Поэтому когда экземпляры класса <code>Array</code> хотят получить метод массива – они берут его из своего прототипа, например <code>Array.prototype.slice</code>.</p>
<p>Если же нужен метод объекта, например, <code>hasOwnProperty</code>, то его в <code>Array.prototype</code> нет, и он берётся из <code>Object.prototype</code>.</p>
<p>Отличный способ «потрогать это руками» – запустить в консоли команду <code>console.dir([1,2,3])</code>.</p>
<p>Вывод в Chrome будет примерно таким:</p>
<figure><div class="image" style="width:567px">
      <div class="image__ratio" style="padding-top:51.49911816578483%"></div>
      <img src="article/class-inheritance/console_dir_array.png" alt="" width="567" height="292" class="image__image">
      </div></figure><p>Здесь отчётливо видно, что сами данные и <code>length</code> находятся в массиве, дальше в <code>__proto__</code> идут методы для массивов <code>concat</code>, то есть <code>Array.prototype</code>, а далее – <code>Object.prototype</code>.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type"><code>console.dir</code> для доступа к свойствам</span></div>
            <div class="important__content"><p>Обратите внимание, я использовал именно <code>console.dir</code>, а не <code>console.log</code>, поскольку <code>log</code> зачастую выводит объект в виде строки, без доступа к свойствам.</p>
</div></div>
<h2><a class="main__anchor" name="наследование-в-наших-классах" href="#наследование-в-наших-классах">Наследование в наших классах</a></h2><p>Применим тот же подход для наших классов: объявим класс <code>Rabbit</code>, который будет наследовать от <code>Animal</code>.</p>
<p>Вначале создадим два этих класса по отдельности, они пока что будут совершенно независимы.</p>
<p><code>Animal</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Animal(name) {
  this.name = name;
  this.speed = 0;
}

Animal.prototype.run = function(speed) {
  this.speed += speed;
  alert( this.name + ' бежит, скорость ' + this.speed );
};

Animal.prototype.stop = function() {
  this.speed = 0;
  alert( this.name + ' стоит' );
};</code></pre>
        </div>
      </div>
      
      </div><p><code>Rabbit</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Rabbit(name) {
  this.name = name;
  this.speed = 0;
}

Rabbit.prototype.jump = function() {
  this.speed++;
  alert( this.name + ' прыгает' );
};

var rabbit = new Rabbit('Кроль');</code></pre>
        </div>
      </div>
      
      </div><p>Для того, чтобы наследование работало, объект <code>rabbit = new Rabbit</code> должен использовать свойства и методы из своего прототипа <code>Rabbit.prototype</code>, а если их там нет, то – свойства и методы родителя, которые хранятся в <code>Animal.prototype</code>.</p>
<p>Если ещё короче – порядок поиска свойств и методов должен быть таким: <code>rabbit -&gt; Rabbit.prototype -&gt; Animal.prototype</code>, по аналогии с тем, как это сделано для объектов и массивов.</p>
<p>Для этого можно поставить ссылку <code>__proto__</code> с <code>Rabbit.prototype</code> на <code>Animal.prototype</code>.</p>
<p>Можно сделать это так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">Rabbit.prototype.__proto__ = Animal.prototype;</code></pre>
        </div>
      </div>
      
      </div><p>Однако, прямой доступ к <code>__proto__</code> не поддерживается в IE10-, поэтому для поддержки этих браузеров мы используем функцию <code>Object.create</code>. Она либо встроена либо легко эмулируется во всех браузерах.</p>
<p>Класс <code>Animal</code> остаётся без изменений, а <code>Rabbit.prototype</code> мы будем создавать с нужным прототипом, используя <code>Object.create</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="5-6">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Rabbit(name) {
  this.name = name;
  this.speed = 0;
}

// задаём наследование
Rabbit.prototype = Object.create(Animal.prototype);

// и добавим свой метод (или методы...)
Rabbit.prototype.jump = function() { ... };</code></pre>
        </div>
      </div>
      
      </div><p>Теперь выглядеть иерархия будет так:</p>
<figure><div class="image" style="width:226px">
      <div class="image__ratio" style="padding-top:143.36283185840708%"></div>
      <img src="article/class-inheritance/class-inheritance-rabbit-animal.png" alt="" width="226" height="324" class="image__image">
      </div></figure><p>В <code>prototype</code> по умолчанию всегда находится свойство <code>constructor</code>, указывающее на функцию-конструктор. В частности, <code>Rabbit.prototype.constructor == Rabbit</code>. Если мы рассчитываем использовать это свойство, то при замене <code>prototype</code> через <code>Object.create</code> нужно его явно сохранить:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">Rabbit.prototype = Object.create(Animal.prototype);
Rabbit.prototype.constructor = Rabbit;</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="полный-код-наследования" href="#полный-код-наследования">Полный код наследования</a></h2><p>Для наглядности – вот итоговый код с двумя классами <code>Animal</code> и <code>Rabbit</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// 1. Конструктор Animal
function Animal(name) {
  this.name = name;
  this.speed = 0;
}

// 1.1. Методы -- в прототип

Animal.prototype.stop = function() {
  this.speed = 0;
  alert( this.name + ' стоит' );
}

Animal.prototype.run = function(speed) {
  this.speed += speed;
  alert( this.name + ' бежит, скорость ' + this.speed );
};

// 2. Конструктор Rabbit
function Rabbit(name) {
  this.name = name;
  this.speed = 0;
}

// 2.1. Наследование
Rabbit.prototype = Object.create(Animal.prototype);
Rabbit.prototype.constructor = Rabbit;

// 2.2. Методы Rabbit
Rabbit.prototype.jump = function() {
  this.speed++;
  alert( this.name + ' прыгает, скорость ' + this.speed );
}</code></pre>
        </div>
      </div>
      
      </div><p>Как видно, наследование задаётся всего одной строчкой, поставленной в правильном месте.</p>
<p>Обратим внимание: <code>Rabbit.prototype = Object.create(Animal.prototype)</code> присваивается сразу после объявления конструктора, иначе он перезатрёт уже записанные в прототип методы.</p>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">Неправильный вариант: <code>Rabbit.prototype = new Animal</code></span></div>
            <div class="important__content"><p>В некоторых устаревших руководствах предлагают вместо <code>Object.create(Animal.prototype)</code> записывать в прототип <code>new Animal</code>, вот так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// вместо Rabbit.prototype = Object.create(Animal.prototype)
Rabbit.prototype = new Animal();</code></pre>
        </div>
      </div>
      
      </div><p>Частично, он рабочий, поскольку иерархия прототипов будет такая же, ведь <code>new Animal</code> – это объект с прототипом <code>Animal.prototype</code>, как и <code>Object.create(Animal.prototype)</code>. Они в этом плане идентичны.</p>
<p>Но у этого подхода важный недостаток. Как правило мы не хотим создавать <code>Animal</code>, а хотим только унаследовать его методы!</p>
<p>Более того, на практике создание объекта может требовать обязательных аргументов, влиять на страницу в браузере, делать запросы к серверу и что-то ещё, чего мы хотели бы избежать. Поэтому рекомендуется использовать вариант с <code>Object.create</code>.</p>
</div></div>
<h2><a class="main__anchor" name="вызов-конструктора-родителя" href="#вызов-конструктора-родителя">Вызов конструктора родителя</a></h2><p>Посмотрим внимательно на конструкторы <code>Animal</code> и <code>Rabbit</code> из примеров выше:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Animal(name) {
  this.name = name;
  this.speed = 0;
}

function Rabbit(name) {
  this.name = name;
  this.speed = 0;
}</code></pre>
        </div>
      </div>
      
      </div><p>Как видно, объект <code>Rabbit</code> не добавляет никакой особенной логики при создании, которой не было в <code>Animal</code>.</p>
<p>Чтобы упростить поддержку кода, имеет смысл не дублировать код конструктора <code>Animal</code>, а напрямую вызвать его:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Rabbit(name) {
  Animal.apply(this, arguments);
}</code></pre>
        </div>
      </div>
      
      </div><p>Такой вызов запустит функцию <code>Animal</code> в контексте текущего объекта, со всеми аргументами, она выполнится и запишет в <code>this</code> всё, что нужно.</p>
<p>Здесь можно было бы использовать и <code>Animal.call(this, name)</code>, но <code>apply</code> надёжнее, так как работает с любым количеством аргументов.</p>
<h2><a class="main__anchor" name="переопределение-метода" href="#переопределение-метода">Переопределение метода</a></h2><p>Итак, <code>Rabbit</code> наследует <code>Animal</code>. Теперь если какого-то метода нет в <code>Rabbit.prototype</code> – он будет взят из <code>Animal.prototype</code>.</p>
<p>В <code>Rabbit</code> может понадобиться задать какие-то методы, которые у родителя уже есть. Например, кролики бегают не так, как остальные животные, поэтому переопределим метод <code>run()</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">Rabbit.prototype.run = function(speed) {
  this.speed++;
  this.jump();
};</code></pre>
        </div>
      </div>
      
      </div><p>Вызов <code>rabbit.run()</code> теперь будет брать <code>run</code> из своего прототипа:</p>
<figure><div class="image" style="width:225px">
      <div class="image__ratio" style="padding-top:147.11111111111111%"></div>
      <img src="article/class-inheritance/class-inheritance-rabbit-run-animal.png" alt="" width="225" height="331" class="image__image">
      </div></figure><h3><a class="main__anchor" name="вызов-метода-родителя-внутри-своего" href="#вызов-метода-родителя-внутри-своего">Вызов метода родителя внутри своего</a></h3><p>Более частая ситуация – когда мы хотим не просто заменить метод на свой, а взять метод родителя и расширить его. Скажем, кролик бежит так же, как и другие звери, но время от времени подпрыгивает.</p>
<p>Для вызова метода родителя можно обратиться к нему напрямую, взяв из прототипа:</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-2">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript"> Rabbit.prototype.run = function() {
   // вызвать метод родителя, передав ему текущие аргументы
   Animal.prototype.run.apply(this, arguments);
   this.jump();
 }</code></pre>
        </div>
      </div>
      
      </div><p>Обратите внимание на вызов через <code>apply</code> и явное указание контекста.</p>
<p>Если вызвать просто <code>Animal.prototype.run()</code>, то в качестве <code>this</code> функция <code>run</code> получит <code>Animal.prototype</code>, а это неверно, нужен текущий объект.</p>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><ul>
<li>
<p>Для наследования нужно, чтобы «склад методов потомка» (<code>Child.prototype</code>) наследовал от «склада метода родителей» (<code>Parent.prototype</code>).</p>
<p>Это можно сделать при помощи <code>Object.create</code>:</p>
<p>Код:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">Rabbit.prototype = Object.create(Animal.prototype);</code></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p>Для того, чтобы наследник создавался так же, как и родитель, он вызывает конструктор родителя в своём контексте, используя <code>apply(this, arguments)</code>, вот так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Rabbit(...) {
  Animal.apply(this, arguments);
}</code></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p>При переопределении метода родителя в потомке, к исходному методу можно обратиться, взяв его напрямую из прототипа:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">Rabbit.prototype.run = function() {
  var result = Animal.prototype.run.apply(this, ...);
  // result -- результат вызова метода родителя
}</code></pre>
        </div>
      </div>
      
      </div></li>
</ul>
<p>Структура наследования полностью:</p>
<div data-trusted="1" class="code-example" data-highlight-block="0-0,12-12,19-19">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// --------- Класс-Родитель ------------
// Конструктор родителя пишет свойства конкретного объекта
function Animal(name) {
  this.name = name;
  this.speed = 0;
}

// Методы хранятся в прототипе
Animal.prototype.run = function() {
  alert(this.name + &quot; бежит!&quot;);
}

// --------- Класс-потомок -----------
// Конструктор потомка
function Rabbit(name) {
  Animal.apply(this, arguments);
}

// Унаследовать
Rabbit.prototype = Object.create(Animal.prototype);

// Желательно и constructor сохранить
Rabbit.prototype.constructor = Rabbit;

// Методы потомка
Rabbit.prototype.run = function() {
  // Вызов метода родителя внутри своего
  Animal.prototype.run.apply(this);
  alert( this.name + &quot; подпрыгивает!&quot; );
};

// Готово, можно создавать объекты
var rabbit = new Rabbit('Кроль');
rabbit.run();</code></pre>
        </div>
      </div>
      
      </div><p>Такое наследование лучше функционального стиля, так как не дублирует методы в каждом объекте.</p>
<p>Кроме того, есть ещё неявное, но очень важное архитектурное отличие.</p>
<p>Зачастую вызов конструктора имеет какие-то побочные эффекты, например влияет на документ. Если конструктор родителя имеет какое-то поведение, которое нужно переопределить в потомке, то в функциональном стиле это невозможно.</p>
<p>Иначе говоря, в функциональном стиле в процессе создания <code>Rabbit</code> нужно обязательно вызывать <code>Animal.apply(this, arguments)</code>, чтобы получить методы родителя – и если этот <code>Animal.apply</code> кроме добавления методов говорит: «Му-у-у!», то это проблема:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Animal() {
  this.walk = function() {
    alert('walk');
  };
  alert( 'Му-у-у!' );
}

function Rabbit() {
  Animal.apply(this, arguments); // как избавиться от мычания, но получить walk?
}</code></pre>
        </div>
      </div>
      
      </div><p>…Которой нет в прототипном подходе, потому что в процессе создания <code>new Rabbit</code> мы вовсе не обязаны вызывать конструктор родителя. Ведь методы находятся в прототипе.</p>
<p>Поэтому прототипный подход стоит предпочитать функциональному как более быстрый и универсальный. А что касается красоты синтаксиса – она сильно лучше в новом стандарте ES6, которым можно пользоваться уже сейчас, если взять транслятор <a href="https://babeljs.io/">babeljs</a>.</p>
</div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#найдите-ошибку-в-наследовании" name="найдите-ошибку-в-наследовании" class="main__anchor">Найдите ошибку в наследовании</a></h3><a href="task/inheritance-error-assign.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Найдите ошибку в прототипном наследовании. К чему она приведёт?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Animal(name) {
  this.name = name;
}

Animal.prototype.walk = function() {
  alert( &quot;ходит &quot; + this.name );
};

function Rabbit(name) {
  this.name = name;
}
Rabbit.prototype = Animal.prototype;

Rabbit.prototype.walk = function() {
  alert( &quot;прыгает! и ходит: &quot; + this.name );
};</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Ошибка в строке:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">Rabbit.prototype = Animal.prototype;</code></pre>
        </div>
      </div>
      
      </div><p>Эта ошибка приведёт к тому, что <code>Rabbit.prototype</code> и <code>Animal.prototype</code> – один и тот же объект. В результате методы <code>Rabbit</code> будут помещены в него и, при совпадении, перезапишут методы <code>Animal</code>.</p>
<p>Получится, что все животные прыгают, вот пример:</p>
<div data-trusted="1" class="code-example" data-highlight-block="11-11,17-18">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Animal(name) {
  this.name = name;
}

Animal.prototype.walk = function() {
  alert(&quot;ходит &quot; + this.name);
};

function Rabbit(name) {
  this.name = name;
}
Rabbit.prototype = Animal.prototype;

Rabbit.prototype.walk = function() {
  alert(&quot;прыгает! и ходит: &quot; + this.name);
};

var animal = new Animal(&quot;Хрюшка&quot;);
animal.walk(); // прыгает! и ходит Хрюшка</code></pre>
        </div>
      </div>
      
      </div><p>Правильный вариант этой строки:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">Rabbit.prototype = Object.create(Animal.prototype);</code></pre>
        </div>
      </div>
      
      </div><p>Если так написать, то в <code>Rabbit.prototype</code> будет отдельный объект, который прототипно наследует от <code>Animal.prototype</code>, но может содержать и свои свойства, специфичные для кроликов.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#в-чём-ошибка-в-наследовании" name="в-чём-ошибка-в-наследовании" class="main__anchor">В чём ошибка в наследовании</a></h3><a href="task/inheritance-error-constructor.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Найдите ошибку в прототипном наследовании. К чему она приведёт?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Animal(name) {
  this.name = name;

  this.walk = function() {
    alert( &quot;ходит &quot; + this.name );
  };

}

function Rabbit(name) {
  Animal.apply(this, arguments);
}
Rabbit.prototype = Object.create(Animal.prototype);

Rabbit.prototype.walk = function() {
  alert( &quot;прыгает &quot; + this.name );
};

var rabbit = new Rabbit(&quot;Кроль&quot;);
rabbit.walk();</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Ошибка – в том, что метод <code>walk</code> присваивается в конструкторе <code>Animal</code> самому объекту вместо прототипа.</p>
<p>Поэтому, если мы решим перезаписать этот метод своим, специфичным для кролика, то он не сработает:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// ...

// записывается в прототип
Rabbit.prototype.walk = function() {
  alert( &quot;прыгает &quot; + this.name );
};</code></pre>
        </div>
      </div>
      
      </div><p>Метод <code>this.walk</code> из <code>Animal</code> записывается в сам объект, и поэтому он всегда будет первым, игнорируя цепочку прототипов.</p>
<p>Правильно было бы определять <code>walk</code> как <code>Animal.prototype.walk</code>.</p>
<p>Тем более, что этот метод является общим для всех объектов, тратить память и время на запись его в каждый конструктор определённо ни к чему.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#класс-часы" name="класс-часы" class="main__anchor">Класс &quot;часы&quot;</a></h3><a href="task/clock-class.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Есть реализация часиков, оформленная в виде одной функции-конструктора. У неё есть приватные свойства <code>timer</code>, <code>template</code> и метод <code>render</code>.</p>
<p>Задача: переписать часы на прототипах. Приватные свойства и методы сделать защищёнными.</p>
<p>P.S. Часики тикают в браузерной консоли (надо открыть её, чтобы увидеть).</p>
<p><a href="http://plnkr.co/edit/EZEAyU2KxSuXwsPqOUWj?p=preview" target="_blank" data-plunk-id="EZEAyU2KxSuXwsPqOUWj">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Clock(options) {
  this._template = options.template;
}

Clock.prototype._render = function() {
  var date = new Date();

  var hours = date.getHours();
  if (hours &lt; 10) hours = '0' + hours;

  var min = date.getMinutes();
  if (min &lt; 10) min = '0' + min;

  var sec = date.getSeconds();
  if (sec &lt; 10) sec = '0' + sec;

  var output = this._template.replace('h', hours).replace('m', min).replace('s', sec);

  console.log(output);
};

Clock.prototype.stop = function() {
  clearInterval(this._timer);
};

Clock.prototype.start = function() {
  this._render();
  var self = this;
  this._timer = setInterval(function() {
    self._render();
  }, 1000);
};</code></pre>
        </div>
      </div>
      
      </div><p><a href="http://plnkr.co/edit/0mi8SFY4UF76oyyn8v4h?p=preview" target="_blank" data-plunk-id="0mi8SFY4UF76oyyn8v4h">Открыть решение в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#класс-расширенные-часы" name="класс-расширенные-часы" class="main__anchor">Класс &quot;расширенные часы&quot;</a></h3><a href="task/clock-class-extended.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Есть реализация часиков на прототипах. Создайте класс, расширяющий её, добавляющий поддержку параметра <code>precision</code>, который будет задавать частоту тика в <code>setInterval</code>. Значение по умолчанию: <code>1000</code>.</p>
<ul>
<li>Для этого класс <code>Clock</code> надо унаследовать. Пишите ваш новый код в файле <code>extended-clock.js</code>.</li>
<li>Исходный класс <code>Clock</code> менять нельзя.</li>
<li>Пусть конструктор потомка вызывает конструктор родителя. Это позволит избежать проблем при расширении <code>Clock</code> новыми опциями.</li>
</ul>
<p>P.S. Часики тикают в браузерной консоли (надо открыть её, чтобы увидеть).</p>
<p><a href="http://plnkr.co/edit/jsvcHaqZww5YofTiZSpS?p=preview" target="_blank" data-plunk-id="jsvcHaqZww5YofTiZSpS">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Наследник:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function ExtendedClock(options) {
  Clock.apply(this, arguments);
  this._precision = +options.precision || 1000;
}

ExtendedClock.prototype = Object.create(Clock.prototype);

ExtendedClock.prototype.start = function() {
  this._render();
  var self = this;
  this._timer = setInterval(function() {
    self._render();
  }, this._precision);
};</code></pre>
        </div>
      </div>
      
      </div><p><a href="http://plnkr.co/edit/Woe6SzrJ7sYVcjJRPTKK?p=preview" target="_blank" data-plunk-id="Woe6SzrJ7sYVcjJRPTKK">Открыть решение в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#меню-с-таймером-для-анимации" name="меню-с-таймером-для-анимации" class="main__anchor">Меню с таймером для анимации</a></h3><a href="task/menu-timer-animated.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Есть класс <code>Menu</code>. У него может быть два состояния: открыто <code>STATE_OPEN</code> и закрыто <code>STATE_CLOSED</code>.</p>
<p>Создайте наследника <code>AnimatingMenu</code>, который добавляет третье состояние <code>STATE_ANIMATING</code>.</p>
<ul>
<li>При вызове <code>open()</code> состояние меняется на <code>STATE_ANIMATING</code>, а через 1 секунду, по таймеру, открытие завершается вызовом <code>open()</code> родителя.</li>
<li>Вызов <code>close()</code> при необходимости отменяет таймер анимации (назначаемый в <code>open</code>) и передаёт вызов родительскому <code>close</code>.</li>
<li>Метод <code>showState</code> для нового состояния выводит <code>&quot;анимация&quot;</code>, для остальных – полагается на родителя.</li>
</ul>
<p><a href="http://plnkr.co/edit/gUcpDIZIj4NOmUiAViuz?p=preview" target="_blank" data-plunk-id="gUcpDIZIj4NOmUiAViuz">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Обратите внимание: константы состояний перенесены в прототип, чтобы <code>AnimatingMenu</code> их тоже унаследовал.</p>
<p><a href="http://plnkr.co/edit/S6fDmXT0R5YRcA7hzMf9?p=preview" target="_blank" data-plunk-id="S6fDmXT0R5YRcA7hzMf9">Открыть решение в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#что-содержит-constructor" name="что-содержит-constructor" class="main__anchor">Что содержит constructor?</a></h3><a href="task/constructor-inherited.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>В коде ниже создаётся простейшая иерархия классов: <code>Animal -&gt; Rabbit</code>.</p>
<p>Что содержит свойство <code>rabbit.constructor</code>? Распознает ли проверка в <code>alert</code> объект как <code>Rabbit</code>?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Animal() {}

function Rabbit() {}
Rabbit.prototype = Object.create(Animal.prototype);

var rabbit = new Rabbit();

alert( rabbit.constructor == Rabbit ); // что выведет?</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p><strong>Нет, не распознает, выведет <code>false</code>.</strong></p>
<p>Свойство <code>constructor</code> содержится в <code>prototype</code> функции по умолчанию, интерпретатор не поддерживает его корректность. Посмотрим, чему оно равно и откуда оно будет взято в данном случае.</p>
<p>Порядок поиска свойства <code>rabbit.constructor</code>, по цепочке прототипов:</p>
<ol>
<li><code>rabbit</code> – это пустой объект, в нём нет.</li>
<li><code>Rabbit.prototype</code> – в него при помощи <code>Object.create</code> записан пустой объект, наследующий от <code>Animal.prototype</code>. Поэтому <code>constructor'а</code> в нём также нет.</li>
<li><code>Animal.prototype</code> – у функции <code>Animal</code> свойство <code>prototype</code> никто не менял. Поэтому оно содержит <code>Animal.prototype.constructor == Animal</code>.</li>
</ol>
<div data-trusted="1" class="code-example" data-highlight-block="7-8">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Animal() {}

function Rabbit() {}
Rabbit.prototype = Object.create(Animal.prototype);

var rabbit = new Rabbit();

alert( rabbit.constructor == Rabbit ); // false
alert( rabbit.constructor == Animal ); // true</code></pre>
        </div>
      </div>
      
      </div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>