<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="js.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Язык JavaScript</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="writing-js.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Качество кода</span></a></li></ol><h1 class="main__header-title">Как писать неподдерживаемый код?</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Как писать неподдерживаемый код?"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><div class="important important_warn">
            <div class="important__header"><span class="important__type">Познай свой код</span></div>
            <div class="important__content"><p>Эта статья представляет собой мой вольный перевод <a href="http://mindprod.com/jgloss/unmain.html">How To Write Unmaintainable Code</a> («как писать неподдерживаемый код») с дополнениями, актуальными для JavaScript.</p>
<p>Возможно, в каких-то из этих советов вам даже удастся узнать «этого парня в зеркале».</p>
</div></div>
<p>Предлагаю вашему вниманию советы мастеров древности, следование которым создаст дополнительные рабочие места для JavaScript-разработчиков.</p>
<p>Если вы будете им следовать, то ваш код будет так сложен в поддержке, что у JavaScript’еров, которые придут после вас, даже простейшее изменение займет годы <em>оплачиваемого</em> труда! А сложные задачи оплачиваются хорошо, так что они, определённо, скажут вам «Спасибо».</p>
<p>Более того, <em>внимательно</em> следуя этим правилам, вы сохраните и своё рабочее место, так как все будут бояться вашего кода и бежать от него…</p>
<p>…Впрочем, всему своя мера. При написании такого кода он не должен <em>выглядеть</em> сложным в поддержке, код должен <em>быть</em> таковым.</p>
<p>Явно кривой код может написать любой дурак. Это заметят, и вас уволят, а код будет переписан с нуля. Вы не можете такого допустить.  Эти советы учитывают такую возможность. Да здравствует дзен.</p>
<h2><a class="main__anchor" name="соглашения-по-настроению" href="#соглашения-по-настроению">Соглашения – по настроению</a></h2><blockquote class="quote"><div class="quote__i"><div class="quote__text"><p>Рабочий-чистильщик осматривает дом:<br>
«…Вот только жук у вас необычный…<br>
И чтобы с ним справиться, я должен жить как жук, стать жуком, думать как жук.»<br>
(грызёт стол Симпсонов)</p>
</div></div><footer class="quote__footer">
        <cite class="quote__author">Сериал &quot;Симпсоны&quot;, серия Helter Shelter</cite>
       </footer></blockquote><p>Чтобы помешать другому программисту исправить ваш код, вы должны понять путь его мыслей.</p>
<p>Представьте, перед ним – ваш большой скрипт. И ему нужно поправить его. У него нет ни времени ни желания, чтобы читать его целиком, а тем более – досконально разбирать. Он хотел бы по-быстрому найти нужное место, сделать изменение и убраться восвояси без появления побочных эффектов.</p>
<p>Он рассматривает ваш код как бы через трубочку из туалетной бумаги. Это не даёт ему общей картины, он ищет тот небольшой фрагмент, который ему необходимо изменить. По крайней мере, он надеется, что этот фрагмент будет небольшим.</p>
<p><strong>На что он попытается опереться в этом поиске – так это на соглашения, принятые в программировании, об именах переменных, названиях функций и методов…</strong></p>
<p>Как затруднить задачу? Можно везде нарушать соглашения – это помешает ему, но такое могут заметить, и код будет переписан. Как поступил бы ниндзя на вашем месте?</p>
<p><strong>…Правильно! Следуйте соглашениям «в общем», но иногда – нарушайте их.</strong></p>
<p>Тщательно разбросанные по коду нарушения соглашений с одной стороны не делают код явно плохим при первом взгляде, а с другой – имеют в точности тот же, и даже лучший эффект, чем явное неследование им!</p>
<h3><a class="main__anchor" name="пример-из-jquery" href="#пример-из-jquery">Пример из jQuery</a></h3><div class="important important_warn">
            <div class="important__header"><span class="important__type">jQuery / DOM</span></div>
            <div class="important__content"><p>Этот пример требует знаний jQuery/DOM, если пока их у вас нет – пропустите его, ничего страшного, но обязательно вернитесь к нему позже. Подобное стоит многих часов отладки.</p>
</div></div>
<p>Во фреймворке jQuery есть метод <a href="http://api.jquery.com/wrap/">wrap</a>, который обёртывает один элемент вокруг другого:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var img = $('&lt;img/&gt;'); // создали новые элементы (jQuery-синтаксис)
var div = $('&lt;div/&gt;'); // и поместили в переменную

img.wrap(div); // обернуть img в div
div.append('&lt;span/&gt;');</code></pre>
        </div>
      </div>
      
      </div><p>Результат кода после операции <code>wrap</code> – два элемента, один вложен в другой:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div&gt;
  &lt;img/&gt;
&lt;/div&gt;</code></pre>
        </div>
      </div>
      
      </div><p>А что же после <code>append</code>?</p>
<p>Можно предположить, что <code>&lt;span/&gt;</code> добавится в конец <code>div</code>, сразу после <code>img</code>… Но ничего подобного!</p>
<p>Искусный ниндзя уже нанёс свой удар и поведение кода стало неправильным, хотя разработчик об этом даже не подозревает.</p>
<p>Как правило, методы jQuery работают с теми элементами, которые им переданы. Но не здесь!</p>
<p>Внутри вызова <code>img.wrap(div)</code> происходит клонирование <code>div</code> и вокруг <code>img</code> оборачивается не сам <code>div</code>, а его клон. При этом исходная переменная <code>div</code> не меняется, в ней как был пустой <code>div</code>, так и остался.</p>
<p>В итоге, после вызова получается два независимых <code>div'а</code>:  первый содержит <code>img</code> (этот неявный клон никуда не присвоен), а второй – наш <code>span</code>.</p>
<p>Объяснения не очень понятны? Написано что-то странное? Это просто разум, привыкший, что соглашения уважаются, не допускает мысли, что вызов <code>wrap</code> – неявно клонирует элемент. Ведь другие jQuery-методы, кроме <code>clone</code> этого не делают.</p>
<p>Как говорил <a href="https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BD%D1%84%D1%83%D1%86%D0%B8%D0%B9">Учитель</a>: «В древности люди учились для того, чтобы совершенствовать себя. Нынче учатся для того, чтобы удивить других».</p>
<h2><a class="main__anchor" name="краткость-сестра-таланта" href="#краткость-сестра-таланта">Краткость – сестра таланта!</a></h2><p>Пишите «как короче», а не как понятнее. «Меньше букв» – уважительная причина для нарушения любых соглашений.</p>
<p>Ваш верный помощник – возможности языка, использованные неочевидным образом.</p>
<p>Обратите внимание на оператор вопросительный знак <code>'?'</code>, например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// код из jQuery
i = i ? i &lt; 0 ? Math.max(0, len + i) : i : 0;</code></pre>
        </div>
      </div>
      
      </div><p>Разработчик, встретивший эту строку и попытавшийся понять, чему же всё-таки равно <code>i</code>, скорее всего придёт к вам за разъяснениями. Смело скажите ему, что короче – это всегда лучше. Посвятите и его в пути ниндзя. Не забудьте вручить <a href="http://lib.ru/POECHIN/lao1.txt">Дао дэ цзин</a>.</p>
<h2><a class="main__anchor" name="именование" href="#именование">Именование</a></h2><p>Существенную часть науки о создании неподдерживаемого кода занимает искусство выбора имён.</p>
<h3><a class="main__anchor" name="однобуквенные-переменные" href="#однобуквенные-переменные">Однобуквенные переменные</a></h3><p>Называйте переменные коротко: <code>a</code>, <code>b</code> или <code>c</code>.</p>
<p>В этом случае никто не сможет найти её, используя фунцию «Поиск» текстового редактора.</p>
<p>Более того, даже найдя – никто не сможет «расшифровать» её и догадаться, что она означает.</p>
<h3><a class="main__anchor" name="не-используйте-i-для-цикла" href="#не-используйте-i-для-цикла">Не используйте i для цикла</a></h3><p>В тех местах, где однобуквенные переменные общеприняты, например, в счетчике цикла – ни в коем случае не используйте стандартные названия <code>i</code>, <code>j</code>, <code>k</code>. Где угодно, только не здесь!</p>
<p>Остановите свой взыскательный взгляд на чём-нибудь более экзотическом. Например, <code>x</code> или <code>y</code>.</p>
<p>Эффективность этого подхода особенно заметна, если тело цикла занимает одну-две страницы (чем длиннее – тем лучше).</p>
<p>В этом случае заметить, что переменная – счетчик цикла, без пролистывания вверх, невозможно.</p>
<h3><a class="main__anchor" name="русские-слова-и-сокращения" href="#русские-слова-и-сокращения">Русские слова и сокращения</a></h3><p>Если вам <em>приходится</em> использовать длинные, понятные имена переменных – что поделать… Но и здесь есть простор для творчества!</p>
<p><strong>Назовите переменные «калькой» с русского языка или как-то «улучшите» английское слово.</strong></p>
<p>В одном месте напишите <code>var ssilka</code>, в другом <code>var ssylka</code>, в третьем <code>var link</code>, в четвёртом – <code>var lnk</code>… Это действительно великолепно работает и очень креативно!</p>
<p>Количество ошибок при поддержке такого кода увеличивается во много раз.</p>
<h3><a class="main__anchor" name="будьте-абстрактны-при-выборе-имени" href="#будьте-абстрактны-при-выборе-имени">Будьте абстрактны при выборе имени</a></h3><blockquote class="quote"><div class="quote__i"><div class="quote__text"><p>Лучший кувшин лепят всю жизнь.<br>
Высокая музыка неподвластна слуху.<br>
Великий образ не имеет формы.</p>
</div></div><footer class="quote__footer">
        <cite class="quote__author">Лао-цзы</cite>
       </footer></blockquote><p>При выборе имени старайтесь применить максимально абстрактное слово, например <code>obj</code>, <code>data</code>, <code>value</code>, <code>item</code>, <code>elem</code> и т.п.</p>
<ul>
<li>
<p><strong>Идеальное имя для переменной: <code>data</code>.</strong> Используйте это имя везде, где можно. В конце концов, каждая переменная содержит <em>данные</em>, не правда ли?</p>
<p>Но что делать, если имя <code>data</code> уже занято? Попробуйте <code>value</code>, оно не менее универсально. Ведь каждая переменная содержит <em>значение</em>.</p>
<p>Занято и это? Есть и другой вариант.</p>
</li>
<li>
<p><strong>Называйте переменную по типу данных, которые она хранит: <code>obj</code>, <code>num</code>, <code>arr</code>…</strong></p>
<p>Насколько это усложнит разработку? Как ни странно, намного!</p>
<p>Казалось бы, название переменной содержит информацию, говорит о том, что в переменной – число, объект или массив… С другой стороны, <strong>когда непосвящённый будет разбирать этот код – он с удивлением обнаружит, что информации нет!</strong></p>
<p>Ведь как раз тип легко понять, запустив отладчик и посмотрев, что внутри. Но в чём смысл этой переменной? Что за массив/объект/число в ней хранится? Без долгой медитации над кодом тут не обойтись!</p>
</li>
<li>
<p><strong>Что делать, если и эти имена кончились? Просто добавьте цифру:</strong> <code>item1, item2, elem5, data1</code>…</p>
</li>
</ul>
<h3><a class="main__anchor" name="похожие-имена" href="#похожие-имена">Похожие имена</a></h3><p>Только истинно внимательный программист достоин понять ваш код. Но как проверить, достоин ли читающий?</p>
<p><strong>Один из способов – использовать похожие имена переменных, например <code>data</code> и <code>date</code>.</strong> Бегло прочитать такой код почти невозможно. А уж заметить опечатку и поправить её… Ммммм… Мы здесь надолго, время попить чайку.</p>
<h3><a class="main__anchor" name="а-к-р-о-н-и-м" href="#а-к-р-о-н-и-м">А.К.Р.О.Н.И.М</a></h3><p>Используйте сокращения, чтобы сделать код короче.</p>
<p>Например <code>ie</code> (Inner Element), <code>mc</code> (Money Counter) и другие. Если вы обнаружите, что путаетесь в них сами – героически страдайте, но не переписывайте код. Вы знали, на что шли.</p>
<h3><a class="main__anchor" name="хитрые-синонимы" href="#хитрые-синонимы">Хитрые синонимы</a></h3><blockquote class="quote"><div class="quote__i"><div class="quote__text"><p>Очень трудно найти чёрную кошку в тёмной комнате, особенно когда её там нет.</p>
</div></div><footer class="quote__footer">
        <cite class="quote__author">Конфуций</cite>
       </footer></blockquote><p><strong>Чтобы было не скучно – используйте <em>похожие названия</em> для обозначения <em>одинаковых действий</em>.</strong></p>
<p>Например, если метод показывает что-то на экране – начните его название с <code>display..</code> (скажем, <code>displayElement</code>), а в другом месте объявите аналогичный метод как <code>show..</code> (<code>showFrame</code>).</p>
<p><strong>Как бы намекните этим, что существует тонкое различие между способами показа в этих методах, хотя на самом деле его нет.</strong></p>
<p>По возможности, договоритесь с членами своей команды. Если Вася в своих классах использует <code>display..</code>, то Валера – обязательно <code>render..</code>, а Петя – <code>paint..</code>.</p>
<p><strong>…И напротив, если есть две функции с важными отличиями – используйте одно и то же слово для их описания!</strong> Например, с <code>print...</code> можно начать метод печати на принтере <code>printPage</code>, а также – метод добавления текста на страницу <code>printText</code>.</p>
<p>А теперь, пусть читающий код думает: «Куда же выводит сообщение <code>printMessage</code>?». Особый шик – добавить элемент неожиданности. Пусть <code>printMessage</code> выводит не туда, куда все, а в новое окно!</p>
<h3><a class="main__anchor" name="словарь-терминов-это-еда" href="#словарь-терминов-это-еда">Словарь терминов – это еда!</a></h3><p>Ни в коем случае не поддавайтесь требованиям написать словарь терминов для проекта. Если же он уже есть – не следуйте ему, а лучше проглотите и скажите, что так и былО!</p>
<p>Пусть читающий ваш код программист напрасно ищет различия в <code>helloUser</code> и <code>welcomeVisitor</code> и пытается понять, когда что использовать. Вы-то знаете, что на самом деле различий нет, но искать их можно о-очень долго.</p>
<p><strong>Для обозначения посетителя в одном месте используйте <code>user</code>, а в другом <code>visitor</code>, в третьем – просто <code>u</code>. Выбирайте одно имя или другое, в зависимости от функции и настроения.</strong></p>
<p>Это воплотит сразу два ключевых принципа ниндзя-дизайна – <em>сокрытие информации</em> и <em>подмена понятий</em>!</p>
<h3><a class="main__anchor" name="повторно-используйте-имена" href="#повторно-используйте-имена">Повторно используйте имена</a></h3><p>По возможности, повторно используйте имена переменных, функций и свойств. Просто записывайте в них новые значения.</p>
<p>Добавляйте новое имя только если это абсолютно необходимо.</p>
<p>В функции старайтесь обойтись только теми переменными, которые были переданы как параметры.</p>
<p>Это не только затруднит идентификацию того, что <em>сейчас</em> находится в переменной, но и сделает почти невозможным поиск места, в котором конкретное значение было присвоено.</p>
<p>Цель – максимально усложнить отладку и заставить читающего код программиста построчно анализировать код и конспектировать изменения переменных для каждой ветки исполнения.</p>
<p><strong>Продвинутый вариант этого подхода – незаметно (!) подменить переменную на нечто похожее, например:</strong></p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function ninjaFunction(elem) {
  // 20 строк кода, работающего с elem

  elem = elem.cloneNode(true);

  // еще 20 строк кода, работающего с elem
}</code></pre>
        </div>
      </div>
      
      </div><p>Программист, пожелавший добавить действия с <code>elem</code> во вторую часть функции, будет удивлён. Лишь во время отладки, посмотрев весь код, он с удивлением обнаружит, что оказывается имел дело с клоном!</p>
<p>Регулярные встречи с этим приемом на практике говорят: защититься невозможно. Эффективно даже против опытного ниндзи.</p>
<h3><a class="main__anchor" name="добавляйте-подчеркивания" href="#добавляйте-подчеркивания">Добавляйте подчеркивания</a></h3><p>Добавляйте подчеркивания <code>_</code> и <code>__</code> к именам переменных. Желательно, чтобы их смысл был известен только вам, а лучше – вообще без явной причины.</p>
<p>Этим вы достигните двух целей. Во-первых, код станет длиннее и менее читаемым, а во-вторых, другой программист будет долго искать смысл в подчёркиваниях. Особенно хорошо сработает и внесет сумятицу в его мысли, если в некоторых частях проекта подчеркивания будут, а в некоторых – нет.</p>
<p>В процессе развития кода вы, скорее всего, будете путаться и смешивать стили: добавлять имена с подчеркиваниями там, где обычно подчеркиваний нет, и наоборот. Это нормально и полностью соответствует третьей цели – увеличить количество ошибок при внесении исправлений.</p>
<h3><a class="main__anchor" name="покажите-вашу-любовь-к-разработке" href="#покажите-вашу-любовь-к-разработке">Покажите вашу любовь к разработке</a></h3><p>Пусть все видят, какими замечательными сущностями вы оперируете! Имена <code>superElement</code>, <code>megaFrame</code> и <code>niceItem</code> при благоприятном положении звёзд могут привести к просветлению читающего.</p>
<p>Действительно, с одной стороны, кое-что написано: <code>super..</code>, <code>mega..</code>, <code>nice..</code> С другой – это не несёт никакой конкретики. Читающий может решить поискать в этом глубинный смысл и замедитировать на часок-другой оплаченного рабочего времени.</p>
<h3><a class="main__anchor" name="перекрывайте-внешние-переменные" href="#перекрывайте-внешние-переменные">Перекрывайте внешние переменные</a></h3><blockquote class="quote"><div class="quote__i"><div class="quote__text"><p>Находясь на свету, нельзя ничего увидеть в темноте.<br>
Пребывая же в темноте, увидишь все, что находится на свету.</p>
</div></div><footer class="quote__footer">
        <cite class="quote__author">Гуань Инь-цзы</cite>
       </footer></blockquote><p>Почему бы не использовать одинаковые переменные внутри и снаружи функции? Это просто и не требует придумывать новых имён.</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:4-8,3:6-10">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = authenticateUser();

function render() {
  var user = anotherValue();
  ...
  ...многобукв...
  ...
  ... // &lt;-- программист захочет внести исправления сюда, и..
  ...
}</code></pre>
        </div>
      </div>
      
      </div><p>Зашедший в середину метода <code>render</code> программист, скорее всего, не заметит, что переменная <code>user</code> локально перекрыта и попытается работать с ней, полагая, что это результат <code>authenticateUser()</code>… Ловушка захлопнулась! Здравствуй, отладчик.</p>
<h2><a class="main__anchor" name="мощные-функции" href="#мощные-функции">Мощные функции!</a></h2><p>Не ограничивайте действия функции тем, что написано в её названии. Будьте шире.</p>
<p>Например, функция <code>validateEmail(email)</code> может, кроме проверки e-mail на правильность, выводить сообщение об ошибке и просить заново ввести e-mail.</p>
<p><strong>Выберите хотя бы пару дополнительных действий, кроме основного назначения функции.</strong></p>
<p>Главное – они должны быть неочевидны из названия функции. Истинный ниндзя-девелопер сделает так, что они будут неочевидны и из кода тоже.</li></p>
<p><strong>Объединение нескольких смежных действий в одну функцию защитит ваш код от повторного использования.</strong></p>
<p>Представьте, что другому разработчику нужно только проверить адрес, а сообщение – не выводить. Ваша функция <code>validateEmail(email)</code>, которая делает и то и другое, ему не подойдёт. Работодатель будет вынужден оплатить создание новой.</p>
<h2><a class="main__anchor" name="внимание-сюр-при-из" href="#внимание-сюр-при-из">Внимание… Сюр-при-из!</a></h2><p>Есть функции, название которых говорит о том, что они ничего не меняют. Например, <code>isReady</code>, <code>checkPermission</code>, <code>findTags</code>… Предполагается, что при вызове они произведут некие вычисления, или найдут и возвратят полезные данные, но при этом их не изменят. В трактатах это называется «отсутствие сторонних эффектов».</p>
<p><strong>По-настоящему красивый приём – делать в таких функциях что-нибудь полезное, заодно с процессом проверки. Что именно – совершенно неважно.</strong></p>
<p>Удивление и ошеломление, которое возникнет у вашего коллеги, когда он увидит, что функция с названием на <code>is..</code>, <code>check..</code> или <code>find...</code> что-то меняет – несомненно, расширит его границы разумного!</p>
<p><strong>Ещё одна вариация такого подхода – возвращать нестандартное значение.</strong></p>
<p>Ведь общеизвестно, что <code>is..</code> и <code>check..</code> обычно возвращают <code>true/false</code>. Продемонстрируйте оригинальное мышление. Пусть вызов <code>checkPermission</code> возвращает не результат <code>true/false</code>, а объект с результатами проверки! А чего, полезно.</p>
<p>Те же разработчики, кто попытается написать проверку <code>if (checkPermission(..))</code>, будут весьма удивлены результатом. Ответьте им: «надо читать документацию!». И перешлите эту статью.</p>
<h2><a class="main__anchor" name="заключение" href="#заключение">Заключение</a></h2><p>Все советы выше пришли из реального кода… И в том числе от разработчиков с большим опытом.</p>
<p>Возможно, даже больше вашего, так что не судите опрометчиво ;)</p>
<ul>
<li>Следуйте нескольким из них – и ваш код станет полон сюрпризов.</li>
<li>Следуйте многим – и ваш код станет истинно вашим, никто не захочет изменять его.</li>
<li>Следуйте всем – и ваш код станет ценным уроком для молодых разработчиков, ищущих просветления.</li>
</ul>
</div></article></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>