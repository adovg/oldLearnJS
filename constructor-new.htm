<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="js.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Язык JavaScript</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="objects-more.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Методы объектов и контекст вызова</span></a></li></ol><h1 class="main__header-title">Создание объектов через &quot;new&quot;</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Создание объектов через &quot;new&quot;"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Обычный синтаксис <code>{...}</code> позволяет создать один объект. Но зачастую нужно создать много однотипных объектов.</p>
<p>Для этого используют «функции-конструкторы», запуская их при помощи специального оператора <code>new</code>.</p>
<h2><a class="main__anchor" name="конструктор" href="#конструктор">Конструктор</a></h2><p>Конструктором становится любая функция, вызванная через <code>new</code>.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example" data-highlight-block="5-5">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Animal(name) {
  this.name = name;
  this.canWalk = true;
}

var animal = new Animal(&quot;ёжик&quot;);</code></pre>
        </div>
      </div>
      
      </div><p>Заметим, что, технически, любая функция может быть использована как конструктор. То есть, любую функцию можно вызвать при помощи <code>new</code>. Как-то особым образом указывать, что она – конструктор – не надо.</p>
<p>Но, чтобы выделить функции, задуманные как конструкторы, их называют с большой буквы: <code>Animal</code>, а не <code>animal</code>.</p>
<p>Детальнее – функция, запущенная через <code>new</code>, делает следующее:</p>
<ol>
<li>Создаётся новый пустой объект.</li>
<li>Ключевое слово <code>this</code> получает ссылку на этот объект.</li>
<li>Функция выполняется. Как правило, она модифицирует <code>this</code> (т.е. этот новый объект), добавляет методы, свойства.</li>
<li>Возвращается <code>this</code>.</li>
</ol>
<p>В результате вызова <code>new Animal(&quot;ёжик&quot;);</code> получаем такой объект:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">animal = {
  name: &quot;ёжик&quot;,
  canWalk: true
}</code></pre>
        </div>
      </div>
      
      </div><p>Иными словами, при вызове <code>new Animal</code> происходит что-то в таком духе (первая и последняя строка – это то, что делает интерпретатор):</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-1,7-7">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Animal(name) {
  // this = {};

  // в this пишем свойства, методы
  this.name = name;
  this.canWalk = true;

  // return this;
}</code></pre>
        </div>
      </div>
      
      </div><p>Теперь многократными вызовами <code>new Animal</code> с разными параметрами мы можем создать столько объектов, сколько нужно. Поэтому такую функцию и называют <em>конструктором</em> – она предназначена для «конструирования» объектов.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">new function() { … }</span></div>
            <div class="important__content"><p>Иногда функцию-конструктор объявляют и тут же используют, вот так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var animal = new function() {
  this.name = &quot;Васька&quot;;
  this.canWalk = true;
};</code></pre>
        </div>
      </div>
      
      </div><p>Так делают, когда хотят создать единственный объект данного типа. Пример выше с тем же успехом можно было бы переписать как:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var animal = {
  name: &quot;Васька&quot;,
  canWalk: true
}</code></pre>
        </div>
      </div>
      
      </div><p>…Но обычный синтаксис <code>{...}</code> не подходит, когда при создании свойств объекта нужны более сложные вычисления. Их можно проделать в функции-конструкторе и записать результат в <code>this</code>.</p>
</div></div>
<h2><a class="main__anchor" name="правила-обработки-return" href="#правила-обработки-return">Правила обработки return</a></h2><p>Как правило, конструкторы ничего не возвращают. Их задача – записать всё, что нужно, в <code>this</code>, который автоматически станет результатом.</p>
<p>Но если явный вызов <code>return</code> всё же есть, то применяется простое правило:</p>
<ul>
<li>При вызове <code>return</code> с объектом, будет возвращён он, а не <code>this</code>.</li>
<li>При вызове <code>return</code> с примитивным значением, оно будет отброшено.</li>
</ul>
<p>Иными словами, вызов <code>return</code> с объектом вернёт объект, а с чем угодно, кроме объекта – возвратит, как обычно, <code>this</code>.</p>
<p>Например, возврат объекта:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function BigAnimal() {

  this.name = &quot;Мышь&quot;;

  return { name: &quot;Годзилла&quot; };  // &lt;-- возвратим объект
}

alert( new BigAnimal().name );  // Годзилла, получили объект вместо this</code></pre>
        </div>
      </div>
      
      </div><p>А вот пример с возвратом строки:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function BigAnimal() {

  this.name = &quot;Мышь&quot;;

  return &quot;Годзилла&quot;; // &lt;-- возвратим примитив
}

alert( new BigAnimal().name ); // Мышь, получили this (а Годзилла пропал)</code></pre>
        </div>
      </div>
      
      </div><p>Эта особенность работы <code>new</code> прописана в стандарте, но используется она весьма редко.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Можно без скобок</span></div>
            <div class="important__content"><p>Кстати, при вызове <code>new</code> без аргументов скобки можно не ставить:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var animal = new BigAnimal; // &lt;-- без скобок
// то же самое что
var animal = new BigAnimal();</code></pre>
        </div>
      </div>
      
      </div><p>Не сказать, что выбрасывание скобок – «хороший стиль», но такой синтаксис допустим стандартом.</p>
</div></div>
<h2><a class="main__anchor" name="создание-методов-в-конструкторе" href="#создание-методов-в-конструкторе">Создание методов в конструкторе</a></h2><p>Использование функций для создания объекта дает большую гибкость. Можно передавать конструктору параметры,  определяющие как его создавать, и он будет «клепать» объекты заданным образом.</p>
<p>Добавим в создаваемый объект ещё и метод.</p>
<p>Например, <code>new User(name)</code> создает объект с заданным значением свойства <code>name</code> и методом <code>sayHi</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="8-10">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function User(name) {
  this.name = name;

  this.sayHi = function() {
    alert( &quot;Моё имя: &quot; + this.name );
  };
}

var ivan = new User(&quot;Иван&quot;);

ivan.sayHi(); // Моё имя: Иван

/*
ivan = {
   name: &quot;Иван&quot;,
   sayHi: функция
}
*/</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="локальные-переменные" href="#локальные-переменные">Локальные переменные</a></h2><p>В функции-конструкторе бывает удобно объявить вспомогательные локальные переменные и вложенные функции, которые будут видны только внутри:</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-7">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function User(firstName, lastName) {
  // вспомогательная переменная
  var phrase = &quot;Привет&quot;;

  //  вспомогательная вложенная функция
  function getFullName() {
      return firstName + &quot; &quot; + lastName;
    }

  this.sayHi = function() {
    alert( phrase + &quot;, &quot; + getFullName() ); // использование
  };
}

var vasya = new User(&quot;Вася&quot;, &quot;Петров&quot;);
vasya.sayHi(); // Привет, Вася Петров</code></pre>
        </div>
      </div>
      
      </div><p>Мы уже говорили об этом подходе ранее, в главе <a href="closures-usage.htm">Локальные переменные для объекта</a>.</p>
<p>Те функции и данные, которые должны быть доступны для внешнего кода, мы пишем в <code>this</code> – и к ним можно будет обращаться, как например <code>vasya.sayHi()</code>, а вспомогательные, которые нужны только внутри самого объекта, сохраняем в локальной области видимости.</p>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><p>Объекты могут быть созданы при помощи функций-конструкторов:</p>
<ul>
<li>Любая функция может быть вызвана с <code>new</code>, при этом она получает новый пустой объект в качестве <code>this</code>, в который она добавляет свойства. Если функция не решит возвратить свой объект, то её результатом будет <code>this</code>.</li>
<li>Функции, которые предназначены для создания объектов, называются <em>конструкторами</em>. Их названия пишут с большой буквы, чтобы отличать от обычных.</li>
</ul>
</div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#две-функции-один-объект" name="две-функции-один-объект" class="main__anchor">Две функции один объект</a></h3><a href="task/two-functions-one-object.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 2</span></div><div class="task__content"><p>Возможны ли такие функции <code>A</code> и <code>B</code> в примере ниже, что соответствующие объекты <code>a,b</code> равны (см. код ниже)?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function A() { ... }
function B() { ... }

var a = new A;
var b = new B;

alert( a == b ); // true</code></pre>
        </div>
      </div>
      
      </div><p>Если да – приведите пример кода с такими функциями.</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Да, возможны.</p>
<p>Они должны возвращать одинаковый объект. При этом если функция возвращает объект, то <code>this</code> не используется.</p>
<p>Например, они могут вернуть один и тот же объект <code>obj</code>, определённый снаружи:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var obj = {};

function A() { return obj; }
function B() { return obj; }

var a = new A;
var b = new B;

alert( a == b ); // true</code></pre>
        </div>
      </div>
      
      </div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#создать-calculator-при-помощи-конструктора" name="создать-calculator-при-помощи-конструктора" class="main__anchor">Создать Calculator при помощи конструктора</a></h3><a href="task/calculator-constructor.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Напишите <em>функцию-конструктор</em> <code>Calculator</code>, которая создает объект с тремя методами:</p>
<ul>
<li>Метод <code>read()</code> запрашивает два значения при помощи <code>prompt</code> и запоминает их в свойствах объекта.</li>
<li>Метод <code>sum()</code> возвращает сумму запомненных свойств.</li>
<li>Метод <code>mul()</code> возвращает произведение запомненных свойств.</li>
</ul>
<p>Пример использования:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var calculator = new Calculator();
calculator.read();

alert( &quot;Сумма=&quot; + calculator.sum() );
alert( &quot;Произведение=&quot; + calculator.mul() );</code></pre>
        </div>
      </div>
      
      </div><p><a href="#" onclick="event.preventDefault(); runDemo(this)">Запустить демо</a></p><p><a href="http://plnkr.co/edit/M942Wb9VlGCECpyNVkUc?p=preview" target="_blank" data-plunk-id="M942Wb9VlGCECpyNVkUc">Открыть песочницу с тестами для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><div data-trusted="1" class="code-example" data-demo="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Calculator() {

  this.read = function() {
    this.a = +prompt('a?', 0);
    this.b = +prompt('b?', 0);
  };

  this.sum = function() {
    return this.a + this.b;
  };

  this.mul = function() {
    return this.a * this.b;
  };
}

var calculator = new Calculator();
calculator.read();

alert( &quot;Сумма=&quot; + calculator.sum() );
alert( &quot;Произведение=&quot; + calculator.mul() );</code></pre>
        </div>
      </div>
      
      </div><p><a href="http://plnkr.co/edit/H3LbAZLRWAK1SSLhhelt?p=preview" target="_blank" data-plunk-id="H3LbAZLRWAK1SSLhhelt">Открыть решение с тестами в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#создать-accumulator-при-помощи-конструктора" name="создать-accumulator-при-помощи-конструктора" class="main__anchor">Создать Accumulator при помощи конструктора</a></h3><a href="task/accumulator.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Напишите <em>функцию-конструктор</em> <code>Accumulator(startingValue)</code>.
Объекты, которые она создает, должны хранить текущую сумму и прибавлять к ней то, что вводит посетитель.</p>
<p>Более формально, объект должен:</p>
<ul>
<li>Хранить текущее значение в своём свойстве <code>value</code>. Начальное значение свойства <code>value</code> ставится конструктором равным <code>startingValue</code>.</li>
<li>Метод <code>read()</code> вызывает <code>prompt</code>, принимает число и прибавляет его к свойству <code>value</code>.</li>
</ul>
<p>Таким образом, свойство <code>value</code> является текущей суммой всего, что ввел посетитель при вызовах метода <code>read()</code>, с учетом начального значения <code>startingValue</code>.</p>
<p>Ниже вы можете посмотреть работу кода:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var accumulator = new Accumulator(1); // начальное значение 1
accumulator.read(); // прибавит ввод prompt к текущему значению
accumulator.read(); // прибавит ввод prompt к текущему значению
alert( accumulator.value ); // выведет текущее значение</code></pre>
        </div>
      </div>
      
      </div><p><a href="#" onclick="event.preventDefault(); runDemo(this)">Запустить демо</a></p><p><a href="http://plnkr.co/edit/q9GvjV9VewLMVTT2qxjt?p=preview" target="_blank" data-plunk-id="q9GvjV9VewLMVTT2qxjt">Открыть песочницу с тестами для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><div data-trusted="1" class="code-example" data-demo="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Accumulator(startingValue) {
  this.value = startingValue;

  this.read = function() {
    this.value += +prompt('Сколько добавлять будем?', 0);
  };

}

var accumulator = new Accumulator(1);
accumulator.read();
accumulator.read();
alert( accumulator.value );</code></pre>
        </div>
      </div>
      
      </div><p><a href="http://plnkr.co/edit/7K379UAzQqjb5z0bN2aK?p=preview" target="_blank" data-plunk-id="7K379UAzQqjb5z0bN2aK">Открыть решение с тестами в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#создайте-калькулятор" name="создайте-калькулятор" class="main__anchor">Создайте калькулятор</a></h3><a href="task/calculator-extendable.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Напишите конструктор <code>Calculator</code>, который создаёт расширяемые объекты-калькуляторы.</p>
<p>Эта задача состоит из двух частей, которые можно решать одна за другой.</p>
<ol>
<li>
<p>Первый шаг задачи: вызов <code>calculate(str)</code> принимает строку, например «1 + 2», с жёстко заданным форматом «ЧИСЛО операция ЧИСЛО» (по одному пробелу вокруг операции), и возвращает результат. Понимает плюс <code>+</code> и минус <code>-</code>.</p>
<p>Пример использования:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var calc = new Calculator;

alert( calc.calculate(&quot;3 + 7&quot;) ); // 10</code></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p>Второй шаг – добавить калькулятору метод <code>addMethod(name, func)</code>, который учит калькулятор новой операции. Он получает имя операции <code>name</code> и функцию от двух аргументов <code>func(a,b)</code>, которая должна её реализовывать.</p>
<p>Например, добавим операции умножить <code>*</code>, поделить <code>/</code> и возвести в степень <code>**</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var powerCalc = new Calculator;
powerCalc.addMethod(&quot;*&quot;, function(a, b) {
  return a * b;
});
powerCalc.addMethod(&quot;/&quot;, function(a, b) {
  return a / b;
});
powerCalc.addMethod(&quot;**&quot;, function(a, b) {
  return Math.pow(a, b);
});

var result = powerCalc.calculate(&quot;2 ** 3&quot;);
alert( result ); // 8</code></pre>
        </div>
      </div>
      
      </div></li>
</ol>
<ul>
<li>Поддержка скобок и сложных математических выражений в этой задаче не требуется.</li>
<li>Числа и операции могут состоять из нескольких символов. Между ними ровно один пробел.</li>
<li>Предусмотрите обработку ошибок. Какая она должна быть – решите сами.</li>
</ul>
<p><a href="http://plnkr.co/edit/146ePHt25MEYQCWweXGy?p=preview" target="_blank" data-plunk-id="146ePHt25MEYQCWweXGy">Открыть песочницу с тестами для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Calculator() {

  var methods = {
    &quot;-&quot;: function(a, b) {
      return a - b;
    },
    &quot;+&quot;: function(a, b) {
      return a + b;
    }
  };

  this.calculate = function(str) {

    var split = str.split(' '),
      a = +split[0],
      op = split[1],
      b = +split[2]

    if (!methods[op] || isNaN(a) || isNaN(b)) {
      return NaN;
    }

    return methods[op](a, b);
  }

  this.addMethod = function(name, func) {
    methods[name] = func;
  };
}

var calc = new Calculator;

calc.addMethod(&quot;*&quot;, function(a, b) {
  return a * b;
});
calc.addMethod(&quot;/&quot;, function(a, b) {
  return a / b;
});
calc.addMethod(&quot;**&quot;, function(a, b) {
  return Math.pow(a, b);
});

var result = calc.calculate(&quot;2 ** 3&quot;);
alert( result ); // 8</code></pre>
        </div>
      </div>
      
      </div><ul>
<li>Обратите внимание на хранение методов. Они просто добавляются к внутреннему объекту.</li>
<li>Все проверки и преобразование к числу производятся в методе <code>calculate</code>. В дальнейшем он может быть расширен для поддержки более сложных выражений.</li>
</ul>
<p><a href="http://plnkr.co/edit/GXNJ3JYeNScD1vGgkgsP?p=preview" target="_blank" data-plunk-id="GXNJ3JYeNScD1vGgkgsP">Открыть решение с тестами в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>