<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="js.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Язык JavaScript</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="first-steps.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Основы JavaScript</span></a></li></ol><h1 class="main__header-title">Внешние скрипты, порядок исполнения</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Внешние скрипты, порядок исполнения"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Если JavaScript-кода много – его выносят в отдельный файл, который подключается в HTML:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script src=&quot;/path/to/script.js&quot;&gt;&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Здесь <code>/path/to/script.js</code> – это абсолютный путь к файлу, содержащему скрипт (из корня сайта).</p>
<p>Браузер сам скачает скрипт и выполнит.</p>
<p>Можно указать и полный URL, например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.3.0/lodash.js&quot;&gt;&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Вы также можете использовать путь относительно текущей страницы. Например, <code>src=&quot;lodash.js&quot;</code> обозначает файл из текущей директории.</p>
<p>Чтобы подключить несколько скриптов, используйте несколько тегов:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script src=&quot;/js/script1.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/js/script2.js&quot;&gt;&lt;/script&gt;
...</code></pre>
        </div>
      </div>
      
      </div><div class="important important_smart">
            <div class="important__header"><span class="important__type">На заметку:</span></div>
            <div class="important__content"><p>Как правило, в HTML пишут только самые простые скрипты, а сложные выносят в отдельный файл.</p>
<p>Браузер скачает его только первый раз и в дальнейшем, при правильной настройке сервера, будет брать из своего <a href="http://ru.wikipedia.org/wiki/%D0%9A%D1%8D%D1%88">кеша</a>.</p>
<p>Благодаря этому один и тот же большой скрипт, содержащий, к примеру, библиотеку функций, может использоваться на разных страницах без полной перезагрузки с сервера.</p>
</div></div>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">Если указан атрибут <code>src</code>, то содержимое тега игнорируется.</span></div>
            <div class="important__content"><p>В одном теге <code>SCRIPT</code> нельзя одновременно подключить внешний скрипт и указать код.</p>
<p>Вот так не сработает:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:8-11">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script src=&quot;file.js&quot;&gt;
  alert(1); // так как указан src, то внутренняя часть тега игнорируется
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Нужно выбрать: либо <code>SCRIPT</code> идёт с <code>src</code>, либо содержит код. Тег выше следует разбить на два: один – с <code>src</code>, другой – с кодом, вот так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script src=&quot;file.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
  alert( 1 );
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div></div></div>
<h2><a class="main__anchor" name="асинхронные-скрипты-defer-async" href="#асинхронные-скрипты-defer-async">Асинхронные скрипты: defer/async</a></h2><p>Браузер загружает и отображает HTML постепенно. Особенно это заметно при медленном интернет-соединении: браузер не ждёт, пока страница загрузится целиком, а показывает ту часть, которую успел загрузить.</p>
<p>Если браузер видит тег <code>&lt;script&gt;</code>, то он по стандарту обязан сначала выполнить его, а потом показать оставшуюся часть страницы.</p>
<p>Например, в примере ниже – пока все кролики не будут посчитаны – нижний <code>&lt;p&gt;</code> не будет показан:</p>
<div data-trusted="1" class="code-example" data-demo-height="100" data-highlight-block="11-15">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;!DOCTYPE HTML&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
&lt;/head&gt;

&lt;body&gt;

  &lt;p&gt;Начинаем считать:&lt;/p&gt;

  &lt;script&gt;
    alert( 'Первый кролик!' );
    alert( 'Второй кролик!' );
    alert( 'Третий кролик!' );
  &lt;/script&gt;

  &lt;p&gt;Кролики посчитаны!&lt;/p&gt;

&lt;/body&gt;

&lt;/html&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Такое поведение называют «синхронным». Как правило, оно вполне нормально, но есть важное следствие.</p>
<p><strong>Если скрипт – внешний, то пока браузер не выполнит его, он не покажет часть страницы под ним.</strong></p>
<p>То есть, в таком документе, пока не загрузится и не выполнится <code>big.js</code>, содержимое <code>&lt;body&gt;</code> будет скрыто:</p>
<div data-trusted="1" class="code-example" data-highlight-block="2-2">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;html&gt;
&lt;head&gt;
  &lt;script src=&quot;big.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  Этот текст не будет показан, пока браузер не выполнит big.js.
&lt;/body&gt;
&lt;/html&gt;</code></pre>
        </div>
      </div>
      
      </div><p>И здесь вопрос – действительно ли мы этого хотим? То есть, действительно ли оставшуюся часть страницы нельзя показывать до загрузки скрипта?</p>
<p>Есть ситуации, когда мы не только НЕ хотим такой задержки, но она даже опасна.</p>
<p>Например, если мы подключаем внешний скрипт, который показывает рекламу или вставляет счётчик посещений, а затем идёт наша страница. Конечно, неправильно, что пока счётчик или реклама не подгрузятся – оставшаяся часть страницы не показывается. Счётчик посещений не должен никак задерживать отображение страницы сайта. Реклама тоже не должна тормозить сайт и нарушать его функциональность.</p>
<p>А что, если сервер, с которого загружается внешний скрипт, перегружен? Посетитель в этом случае может ждать очень долго!</p>
<p>Вот пример, с подобным скриптом (стоит искусственная задержка загрузки):</p>
<div data-trusted="1" class="code-example" data-demo-height="100">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;p&gt;Важная информация не покажется, пока не загрузится скрипт.&lt;/p&gt;

&lt;script src=&quot;https://js.cx/hello/ads.js?speed=0&quot;&gt;&lt;/script&gt;

&lt;p&gt;...Важная информация!&lt;/p&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Что делать?</p>
<p>Можно поставить все подобные скрипты в конец страницы – это уменьшит проблему, но не избавит от неё полностью, если скриптов несколько. Допустим, в конце страницы 3 скрипта, и первый из них тормозит – получается, другие два его будут ждать – тоже нехорошо.</p>
<p>Кроме того, браузер дойдёт до скриптов, расположенных в конце страницы, они начнут грузиться только тогда, когда вся страница загрузится. А это не всегда правильно. Например, счётчик посещений наиболее точно сработает, если загрузить его пораньше.</p>
<p>Поэтому «расположить скрипты внизу» – не лучший выход.</p>
<p>Кардинально решить эту проблему помогут атрибуты <code>async</code> или <code>defer</code>:</p>
<dl>
<dt>Атрибут <code>async</code></dt>
<dd>
<p>Поддерживается всеми браузерами, кроме IE9-. Скрипт выполняется полностью асинхронно. То есть, при обнаружении <code>&lt;script async src=&quot;...&quot;&gt;</code> браузер не останавливает обработку страницы, а спокойно работает дальше. Когда скрипт будет загружен – он выполнится.</p>
</dd>
<dt>Атрибут <code>defer</code></dt>
<dd>
<p>Поддерживается всеми браузерами, включая самые старые IE. Скрипт также выполняется асинхронно, не заставляет ждать страницу, но есть два отличия от <code>async</code>.</p>
<p>Первое – браузер гарантирует, что относительный порядок скриптов с <code>defer</code> будет сохранён.</p>
<p>То есть, в таком коде (с <code>async</code>) первым сработает тот скрипт, который раньше загрузится:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script src=&quot;1.js&quot; async&gt;&lt;/script&gt;
&lt;script src=&quot;2.js&quot; async&gt;&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>А в таком коде (с <code>defer</code>) первым сработает всегда <code>1.js</code>, а скрипт <code>2.js</code>, даже если загрузился раньше, будет его ждать.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script src=&quot;1.js&quot; defer&gt;&lt;/script&gt;
&lt;script src=&quot;2.js&quot; defer&gt;&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Поэтому атрибут <code>defer</code> используют в тех случаях, когда второй скрипт <code>2.js</code> зависит от первого <code>1.js</code>, к примеру – использует что-то, описанное первым скриптом.</p>
<p>Второе отличие – скрипт с <code>defer</code> сработает, когда весь HTML-документ будет обработан браузером.</p>
<p>Например, если документ достаточно большой…</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script src=&quot;async.js&quot; async&gt;&lt;/script&gt;
&lt;script src=&quot;defer.js&quot; defer&gt;&lt;/script&gt;

Много много много букв</code></pre>
        </div>
      </div>
      
      </div><p>…То скрипт <code>async.js</code> выполнится, как только загрузится – возможно, до того, как весь документ готов. А <code>defer.js</code> подождёт готовности всего документа.</p>
<p>Это бывает удобно, когда мы в скрипте хотим работать с документом, и должны быть уверены, что он полностью получен.</p>
</dd>
</dl>
<div class="important important_smart">
            <div class="important__header"><span class="important__type"><code>async</code> вместе с <code>defer</code></span></div>
            <div class="important__content"><p>При одновременном указании <code>async</code> и <code>defer</code> в современных браузерах будет использован только <code>async</code>, в IE9- – только <code>defer</code> (не понимает <code>async</code>).</p>
</div></div>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">Атрибуты <code>async/defer</code> – только для внешних скриптов</span></div>
            <div class="important__content"><p>Атрибуты <code>async/defer</code> работают только в том случае, если назначены на внешние скрипты, т.е. имеющие <code>src</code>.</p>
<p>При попытке назначить их на обычные скрипты <code>&lt;script&gt;…&lt;/script&gt;</code>, они будут проигнорированы.</p>
</div></div>
<p>Тот же пример с <code>async</code>:</p>
<div data-trusted="1" class="code-example" data-demo-height="100" data-highlight-inline="2:8-13">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;p&gt;Важная информация теперь не ждёт, пока загрузится скрипт...&lt;/p&gt;

&lt;script async src=&quot;https://js.cx/hello/ads.js?speed=0&quot;&gt;&lt;/script&gt;

&lt;p&gt;...Важная информация!&lt;/p&gt;</code></pre>
        </div>
      </div>
      
      </div><p>При запуске вы увидите, что вся страница отобразилась тут же, а <code>alert</code> из внешнего скрипта появится позже, когда загрузится скрипт.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Эти атрибуты давно «в ходу»</span></div>
            <div class="important__content"><p>Большинство современных систем рекламы и счётчиков знают про эти атрибуты и используют их.</p>
<p>Перед вставкой внешнего тега <code>&lt;script&gt;</code> понимающий программист всегда проверит, есть ли у него подобный атрибут. Иначе медленный скрипт может задержать загрузку страницы.</p>
</div></div>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Забегая вперёд</span></div>
            <div class="important__content"><p>Для продвинутого читателя, который знает, что теги <code>&lt;script&gt;</code> можно добавлять на страницу в любой момент при помощи самого javascript, заметим, что скрипты, добавленные таким образом, ведут себя так же, как <code>async</code>. То есть, выполняются как только загрузятся, без сохранения относительного порядка.</p>
<p>Если же нужно сохранить порядок выполнения, то есть добавить несколько скриптов, которые выполнятся строго один за другим, то используется свойство <code>script.async = false</code>.</p>
<p>Выглядит это примерно так:</p>
<div data-trusted="1" class="code-example" data-highlight-block="3-3">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function addScript(src){
  var script = document.createElement('script');
  script.src = src;
  script.async = false; // чтобы гарантировать порядок
  document.head.appendChild(script);
}

addScript('1.js'); // загружаться эти скрипты начнут сразу
addScript('2.js'); // выполнятся, как только загрузятся
addScript('3.js'); // но, гарантированно, в порядке 1 -&gt; 2 -&gt; 3</code></pre>
        </div>
      </div>
      
      </div><p>Более подробно работу со страницей мы разберём во второй части учебника.</p>
</div></div>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><ul>
<li>Скрипты вставляются на страницу как текст в теге <code>&lt;script&gt;</code>, либо как внешний файл через <code>&lt;script src=&quot;путь&quot;&gt;&lt;/script&gt;</code></li>
<li>Специальные атрибуты <code>async</code> и <code>defer</code> используются для того, чтобы пока грузится внешний скрипт – браузер показал остальную (следующую за ним) часть страницы. Без них этого не происходит.</li>
<li>Разница между <code>async</code> и <code>defer</code>: атрибут <code>defer</code> сохраняет относительную последовательность скриптов, а <code>async</code> – нет. Кроме того, <code>defer</code> всегда ждёт, пока весь HTML-документ будет готов, а <code>async</code> – нет.</li>
</ul>
<p>Очень важно не только читать учебник, но делать что-то самостоятельно.</p>
<p>Решите задачки, чтобы удостовериться, что вы всё правильно поняли.</p>
</div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#вывести-alert-внешним-скриптом" name="вывести-alert-внешним-скриптом" class="main__anchor">Вывести alert внешним скриптом</a></h3><a href="task/hello-alert-ext.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Возьмите решение предыдущей задачи <a href="task/hello-alert.htm">Выведите alert</a> и вынесите скрипт во внешний файл <code>alert.js</code>, который расположите в той же директории.</p>
<p>Откройте страницу и проверьте, что вывод сообщения всё ещё работает.</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Код для HTML-файла:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
&lt;/head&gt;

&lt;body&gt;

  &lt;script src=&quot;alert.js&quot;&gt;&lt;/script&gt;

&lt;/body&gt;

&lt;/html&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Для файла <code>alert.js</code> из той же директории:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert('Я - JavaScript!');</code></pre>
        </div>
      </div>
      
      </div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#какой-скрипт-выполнится-первым" name="какой-скрипт-выполнится-первым" class="main__anchor">Какой скрипт выполнится первым?</a></h3><a href="task/async-defer-first.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 4</span></div><div class="task__content"><p>В примере ниже подключены два скрипта <code>small.js</code> и <code>big.js</code>.</p>
<p>Если предположить, что <code>small.js</code> загружается гораздо быстрее, чем <code>big.js</code> –  какой выполнится первым?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script src=&quot;big.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;small.js&quot;&gt;&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>А вот так?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script async src=&quot;big.js&quot;&gt;&lt;/script&gt;
&lt;script async src=&quot;small.js&quot;&gt;&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>А так?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script defer src=&quot;big.js&quot;&gt;&lt;/script&gt;
&lt;script defer src=&quot;small.js&quot;&gt;&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Ответы:</p>
<ol>
<li>Первым выполнится <code>big.js</code>, это нормальная последовательность выполнения подряд идущих скриптов.</li>
<li>Первым выполнится <code>small.js</code>, так как скрипты из-за <code>async</code> ведут себя совершенно независимо друг от друга, страница тоже от них не зависит.</li>
<li>Первым выполнится <code>big.js</code>, так как скрипты, подключённые через <code>defer</code>, сохраняют порядок выполнения относительно друг друга.</li>
</ol>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>