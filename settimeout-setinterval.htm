<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="js.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Язык JavaScript</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="js-misc.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Некоторые другие возможности</span></a></li></ol><h1 class="main__header-title">setTimeout и setInterval</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="setTimeout и setInterval"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Почти все реализации JavaScript имеют внутренний таймер-планировщик, который позволяет задавать вызов функции через заданный период времени.</p>
<p>В частности, эта возможность поддерживается в браузерах и в сервере Node.JS.</p>
<h2><a class="main__anchor" name="settimeout" href="#settimeout">setTimeout</a></h2><p>Синтаксис:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var timerId = setTimeout(func / code, delay[, arg1, arg2...])</code></pre>
        </div>
      </div>
      
      </div><p>Параметры:</p>
<dl>
<dt><code>func/code</code></dt>
<dd>Функция или строка кода для исполнения.
Строка поддерживается для совместимости, использовать её не рекомендуется.</dd>
<dt><code>delay</code></dt>
<dd>Задержка в миллисекундах, 1000 миллисекунд равны 1 секунде.</dd>
<dt><code>arg1</code>, <code>arg2</code>…</dt>
<dd>Аргументы, которые нужно передать функции. Не поддерживаются в IE9-.</dd>
</dl>
<p>Исполнение функции произойдёт спустя время, указанное в параметре <code>delay</code>.</p>
<p>Например, следующий код вызовет <code>func()</code> через одну секунду:</p>
<div data-trusted="1" class="code-example" data-highlight-block="4-4">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function func() {
  alert( 'Привет' );
}

setTimeout(func, 1000);</code></pre>
        </div>
      </div>
      
      </div><p>С передачей аргументов (не сработает в IE9-):</p>
<div data-trusted="1" class="code-example" data-highlight-block="4-4">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function func(phrase, who) {
  alert( phrase + ', ' + who );
}

setTimeout(func, 1000, &quot;Привет&quot;, &quot;Вася&quot;); // Привет, Вася</code></pre>
        </div>
      </div>
      
      </div><p>Если первый аргумент является строкой, то интерпретатор создаёт анонимную функцию из этой строки.</p>
<p>То есть такая запись тоже сработает:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">setTimeout(&quot;alert('Привет')&quot;, 1000);</code></pre>
        </div>
      </div>
      
      </div><p>Однако, использование строк не рекомендуется, так как они могут вызвать проблемы при минимизации кода, и, вообще, сама возможность использовать строку сохраняется лишь для совместимости.</p>
<p>Вместо них используйте анонимные функции, вот так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">setTimeout(function() { alert('Привет') }, 1000);</code></pre>
        </div>
      </div>
      
      </div><h3><a class="main__anchor" name="отмена-исполнения-cleartimeout" href="#отмена-исполнения-cleartimeout">Отмена исполнения clearTimeout</a></h3><p>Функция <code>setTimeout</code> возвращает числовой идентификатор таймера <code>timerId</code>, который можно использовать для отмены действия.</p>
<p>Синтаксис:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var timerId = setTimeout(...);
clearTimeout(timerId);</code></pre>
        </div>
      </div>
      
      </div><p>В следующем примере мы ставим таймаут, а затем удаляем (передумали). В результате ничего не происходит.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var timerId = setTimeout(function() { alert(1) }, 1000);
alert(timerId); // число - идентификатор таймера

clearTimeout(timerId);
alert(timerId); // всё ещё число, оно не обнуляется после отмены</code></pre>
        </div>
      </div>
      
      </div><p>Как видно из <code>alert</code>, в браузере идентификатор таймера является обычным числом. Другие JavaScript-окружения, например Node.JS, могут возвращать объект таймера, с дополнительными методами.</p>
<p><strong>Такие разночтения вполне соответствуют стандарту просто потому, что в спецификации JavaScript про таймеры нет ни слова.</strong></p>
<p>Таймеры – это надстройка над JavaScript, которая описана в <a href="http://www.w3.org/TR/html5/webappapis.html#timers">секции Timers</a> стандарта HTML5 для браузеров и в <a href="http://nodejs.org/docs/latest/api/timers.html">документации к Node.JS</a> – для сервера.</p>
<h2><a class="main__anchor" name="setinterval" href="#setinterval">setInterval</a></h2><p>Метод <code>setInterval</code> имеет синтаксис, аналогичный <code>setTimeout</code>.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var timerId = setInterval(func / code, delay[, arg1, arg2...])</code></pre>
        </div>
      </div>
      
      </div><p>Смысл аргументов – тот же самый. Но, в отличие от <code>setTimeout</code>, он запускает выполнение функции не один раз, а  регулярно повторяет её через указанный интервал времени. Остановить исполнение можно вызовом <code>clearInterval(timerId)</code>.</p>
<p>Следующий пример при запуске станет выводить сообщение каждые две секунды, пока не пройдёт 5 секунд:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// начать повторы с интервалом 2 сек
var timerId = setInterval(function() {
  alert( &quot;тик&quot; );
}, 2000);

// через 5 сек остановить повторы
setTimeout(function() {
  clearInterval(timerId);
  alert( 'стоп' );
}, 5000);</code></pre>
        </div>
      </div>
      
      </div><div class="important important_smart">
            <div class="important__header"><span class="important__type">Модальные окна замораживают время в Chrome/Opera/Safari</span></div>
            <div class="important__content"><p>Что будет, если долго не жать <code>OK</code> на появившемся <code>alert</code>? Это зависит от браузера.</p>
<p>В браузерах Chrome, Opera и Safari внутренний таймер «заморожен» во время показа <code>alert/confirm/prompt</code>. А вот в IE и Firefox внутренний таймер продолжит идти.</p>
<p>Поэтому, если закрыть <code>alert</code> после небольшой паузы, то в Firefox/IE следующий <code>alert</code> будет показан сразу же (время подошло), а в Chrome/Opera/Safari – только через 2 секунды после закрытия.</p>
</div></div>
<h3><a class="main__anchor" name="рекурсивный-settimeout" href="#рекурсивный-settimeout">Рекурсивный setTimeout</a></h3><p>Важная альтернатива <code>setInterval</code> – рекурсивный <code>setTimeout</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="8-8">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">/** вместо:
var timerId = setInterval(function() {
  alert( &quot;тик&quot; );
}, 2000);
*/

var timerId = setTimeout(function tick() {
  alert( &quot;тик&quot; );
  timerId = setTimeout(tick, 2000);
}, 2000);</code></pre>
        </div>
      </div>
      
      </div><p>В коде выше следующее выполнение планируется сразу после окончания предыдущего.</p>
<p><strong>Рекурсивный <code>setTimeout</code> – более гибкий метод тайминга, чем <code>setInterval</code>, так как время до следующего выполнения можно запланировать по-разному, в зависимости от результатов текущего.</strong></p>
<p>Например, у нас есть сервис, который раз в 5 секунд опрашивает сервер на предмет новых данных. В случае, если сервер перегружен, можно увеличивать интервал опроса до 10, 20, 60 секунд… А потом вернуть обратно, когда всё нормализуется.</p>
<p>Если у нас регулярно проходят грузящие процессор задачи, то мы можем оценивать время, потраченное на их выполнение, и планировать следующий запуск раньше или позже.</p>
<p><strong>Рекурсивный <code>setTimeout</code> гарантирует паузу между вызовами, <code>setInterval</code> – нет.</strong></p>
<p>Давайте сравним два кода. Первый использует <code>setInterval</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var i = 1;
setInterval(function() {
  func(i);
}, 100);</code></pre>
        </div>
      </div>
      
      </div><p>Второй использует рекурсивный <code>setTimeout</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var i = 1;
setTimeout(function run() {
  func(i);
  setTimeout(run, 100);
}, 100);</code></pre>
        </div>
      </div>
      
      </div><p>При <code>setInterval</code> внутренний таймер будет срабатывать чётко каждые <code>100</code> мс и вызывать <code>func(i)</code>:</p>
<figure><div class="image" style="width:570px">
      <div class="image__ratio" style="padding-top:32.10526315789474%"></div>
      <img src="article/settimeout-setinterval/setinterval-interval.png" alt="" width="570" height="183" class="image__image">
      </div></figure><p>Вы обратили внимание?…</p>
<p><strong>Реальная пауза между вызовами <code>func</code> при <code>setInterval</code> меньше, чем указана в коде!</strong></p>
<p>Это естественно, ведь время работы функции никак не учитывается, оно «съедает» часть интервала.</p>
<p>Возможно и такое что <code>func</code> оказалась сложнее, чем мы рассчитывали и выполнялась дольше, чем 100 мс.</p>
<p>В этом случае интерпретатор будет ждать, пока функция завершится, затем проверит таймер и, если время вызова <code>setInterval</code> уже подошло (или прошло), то следующий вызов произойдёт <em>сразу же</em>.</p>
<p><strong>Если функция и выполняется дольше, чем пауза <code>setInterval</code>, то вызовы будут происходить вообще без перерыва.</strong></p>
<p>Исключением является IE, в котором таймер «застывает» во время выполнения JavaScript.</p>
<p>А так будет выглядеть картинка с рекурсивным <code>setTimeout</code>:</p>
<figure><div class="image" style="width:574px">
      <div class="image__ratio" style="padding-top:35.54006968641115%"></div>
      <img src="article/settimeout-setinterval/settimeout-interval.png" alt="" width="574" height="204" class="image__image">
      </div></figure><p><strong>При рекурсивном <code>setTimeout</code> задержка всегда фиксирована и равна 100 мс.</strong></p>
<p>Это происходит потому, что каждый новый запуск планируется только после окончания текущего.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Управление памятью</span></div>
            <div class="important__content"><p>Сборщик мусора в JavaScript не чистит функции, назначенные в таймерах, пока таймеры актуальны.</p>
<p>При передаче функции в <code>setInterval/setTimeout</code> создаётся внутренняя ссылка на неё, через которую браузер её будет запускать, и которая препятствует удалению из памяти, даже если функция анонимна.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// Функция будет жить в памяти, пока не сработал (или не был очищен) таймер
setTimeout(function() {}, 100);</code></pre>
        </div>
      </div>
      
      </div><ul>
<li>Для <code>setTimeout</code> – внутренняя ссылка исчезнет после исполнения функции.</li>
<li>Для <code>setInterval</code> – ссылка исчезнет при очистке таймера.</li>
</ul>
<p>Так как функция также тянет за собой всё замыкание, то ставшие неактуальными, но не отменённые <code>setInterval</code> могут приводить к излишним тратам памяти.</p>
</div></div>
<h2><a class="main__anchor" name="минимальная-задержка-таймера" href="#минимальная-задержка-таймера">Минимальная задержка таймера</a></h2><p>У браузерного таймера есть минимальная возможная задержка. Она меняется от примерно нуля до 4 мс в современных браузерах. В более старых она может быть больше и достигать 15 мс.</p>
<p>По <a href="http://www.w3.org/TR/html5/webappapis.html#timers">стандарту</a>, минимальная задержка составляет 4 мс.  Так что нет разницы между <code>setTimeout(..,1)</code> и <code>setTimeout(..,4)</code>.</p>
<p>Посмотреть минимальное разрешение «вживую» можно на следующем примере.</p>
<p><strong>В примере ниже каждая полоска удлиняется вызовом <code>setInterval</code> с указанной на ней задержкой – от 0 мс (сверху) до 20 мс (внизу).</strong></p>
<p>Позапускайте его в различных браузерах. Вы заметите, что несколько первых полосок анимируются с одинаковой скоростью. Это как раз потому, что слишком маленькие задержки таймер не различает.</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"><div class="toolbar__tool">
        <a href="https://js.cx/article/settimeout-setinterval/setinterval-anim/" target="_blank" title="открыть в новом окне" class="toolbar__button toolbar__button_external"></a>
      </div>
      <div class="toolbar__tool">
        <a href="http://plnkr.co/edit/Gjvr7zTMPZOPlk9fqykN?p=preview" target="_blank" title="открыть в песочнице"
        data-plunk-id="Gjvr7zTMPZOPlk9fqykN" class="toolbar__button toolbar__button_edit"></a>
      </div>
      </div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:300px" src="https://js.cx/article/settimeout-setinterval/setinterval-anim/"></iframe>
  </div><div class="important important_warn">
            <div class="important__header"><span class="important__type">Важно:</span></div>
            <div class="important__content"><p>В Internet Explorer, нулевая задержка <code>setInterval(.., 0)</code> не сработает. Это касается именно <code>setInterval</code>, т.е. <code>setTimeout(.., 0)</code> работает нормально.</p>
</div></div>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Откуда взялись эти 4 мс?</span></div>
            <div class="important__content"><p>Почему минимальная задержка – 4 мс, а не 1 мс? Зачем она вообще существует?</p>
<p>Это – «привет» от прошлого. Браузер Chrome как-то пытался убрать минимальную задержку в своих ранних версиях, но оказалось, что существуют сайты, которые используют <code>setTimeout(..,0)</code> рекурсивно, создавая тем самым «асинхронный цикл». И, если задержку совсем убрать, то будет 100% загрузка процессора, такой сайт «подвесит» браузер.</p>
<p>Поэтому, чтобы не ломать существующие скрипты, решили сделать задержку. По возможности, небольшую. На время создания стандарта оптимальным числом показалось 4 мс.</p>
</div></div>
<h2><a class="main__anchor" name="реальная-частота-срабатывания" href="#реальная-частота-срабатывания">Реальная частота срабатывания</a></h2><p>В ряде ситуаций таймер будет срабатывать реже, чем обычно. Задержка между вызовами  <code>setInterval(..., 4)</code> может быть не 4 мс, а 30 мс или даже 1000 мс.</p>
<ul>
<li>
<p>Большинство браузеров (десктопных в первую очередь) продолжают выполнять <code>setTimeout/setInterval</code>, даже если вкладка неактивна.</p>
<p>При этом ряд из них (Chrome, FF, IE10) снижают минимальную частоту таймера, до 1 раза в секунду. Получается, что в «фоновой» вкладке будет срабатывать таймер, но редко.</p>
</li>
<li>
<p>При работе от батареи, в ноутбуке – браузеры тоже могут снижать частоту, чтобы реже выполнять код и экономить заряд батареи. Особенно этим известен IE. Снижение может достигать нескольких раз, в зависимости от настроек.</p>
</li>
<li>
<p>При слишком большой загрузке процессора JavaScript может не успевать обрабатывать таймеры вовремя. При этом некоторые запуски <code>setInterval</code> будут пропущены.</p>
</li>
</ul>
<p><strong>Вывод: на частоту 4 мс стоит ориентироваться, но не стоит рассчитывать.</strong></p>
<p>Посмотрим снижение частоты в действии на небольшом примере.</p>
<p>При клике на кнопку ниже запускается <code>setInterval(..., 90)</code>, который выводит список интервалов времени между 25 последними срабатываниями таймера. Запустите его. Перейдите на другую вкладку и вернитесь.</p>
<div id="timer-interval-log"></div>
<p><button onclick="timerIntervalLog()">Запустить повтор с интервалом в 90 мс</button>
<button onclick="clearInterval(timerIntervalLogTimer)">Остановить повтор</button></p>
<script>
var timerIntervalLogTimer;
function timerIntervalLog() {
  var arr = [];
  var d = new Date;
  timerIntervalLogTimer = setInterval(function() {
    var diff = new Date - d;
    if (diff > 100) diff = '<span style="color:red">'+diff+'</span>';
    arr.push( diff );
    if (arr.length > 25) arr.shift();
    document.getElementById('timer-interval-log').innerHTML = arr;
    d = new Date;
  }, 90);
}
</script>
<p>Если ваш браузер увеличивает таймаут при фоновом выполнении вкладки, то вы увидите увеличенные интервалы, помеченные <span style="color:red">красным</span>.</p>
<p>Кроме того, вы заметите, что таймер не является идеально точным ;)</p>
<h2><a class="main__anchor" name="разбивка-долгих-скриптов" href="#разбивка-долгих-скриптов">Разбивка долгих скриптов</a></h2><p>Нулевой или небольшой таймаут также используют, чтобы разорвать поток выполнения «тяжелых» скриптов.</p>
<p>Например, скрипт для подсветки синтаксиса должен проанализировать код, создать много цветных элементов для подсветки и добавить их в документ – на большом файле это займёт много времени, браузер может даже подвиснуть, что неприемлемо.</p>
<p>Для того, чтобы этого избежать, сложная задача разбивается на части, выполнение каждой части запускается через мини-интервал после предыдущей, чтобы дать браузеру время.</p>
<p>Например, осуществляется анализ и подсветка первых 100 строк, затем через 20 мс – следующие 100 строк и так далее. При этом можно подстраиваться под CPU посетителя: замерять время на анализ 100 строк и, если процессор хороший, то в следующий раз обработать 200 строк, а если плохой – то 50. В итоге подсветка будет работать с адекватной быстротой и без тормозов на любых текстах и компьютерах.</p>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><ul>
<li>Методы <code>setInterval(func, delay)</code> и <code>setTimeout(func, delay)</code> позволяют запускать <code>func</code> регулярно/один раз через <code>delay</code> миллисекунд.</li>
<li>Оба метода возвращают идентификатор таймера. Его используют для остановки выполнения вызовом <code>clearInterval/clearTimeout</code>.</li>
<li>В случаях, когда нужно гарантировать задержку между регулярными вызовами или гибко её менять, вместо <code>setInterval</code> используют рекурсивный <code>setTimeout</code>.</li>
<li>Минимальная задержка по стандарту составляет <code>4 мс</code>. Браузеры соблюдают этот стандарт, но некоторые другие среды для выполнения JS, например Node.JS, могут предоставить и меньше задержки.</li>
<li>В реальности срабатывания таймера могут быть гораздо реже, чем назначено, например если процессор перегружен, вкладка находится в фоновом режиме, ноутбук работает от батареи или по какой-то иной причине.</li>
</ul>
<p>Браузерных особенностей почти нет, разве что вызов <code>setInterval(..., 0)</code> с нулевой задержкой в IE недопустим, нужно указывать <code>setInterval(..., 1)</code>.</p>
</div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#вывод-чисел-каждые-100-мс" name="вывод-чисел-каждые-100-мс" class="main__anchor">Вывод чисел каждые 100 мс</a></h3><a href="task/output-numbers-100ms.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Напишите функцию <code>printNumbersInterval()</code>, которая последовательно выводит в консоль числа от 1 до 20, с интервалом между числами 100 мс. То есть, весь вывод должен занимать 2000 мс, в течение которых каждые 100 мс в консоли появляется очередное число.</p>
<p>Нажмите на кнопку, открыв консоль, для демонстрации:</p>
<script>
function printNumbersInterval() {
  var i = 1;
  var timerId = setInterval(function() {
    console.log(i);
    if (i == 20) clearInterval(timerId);
    i++;
  }, 100);
}
</script>
<p><button onclick="printNumbersInterval()">printNumbersInterval()</button>
</script></p>
<p>P.S. Функция должна использовать <code>setInterval</code>.</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function printNumbersInterval() {
  var i = 1;
  var timerId = setInterval(function() {
    console.log(i);
    if (i == 20) clearInterval(timerId);
    i++;
  }, 100);
}

// вызов
printNumbersInterval();</code></pre>
        </div>
      </div>
      
      </div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#вывод-чисел-каждые-100-мс-через-settimeout" name="вывод-чисел-каждые-100-мс-через-settimeout" class="main__anchor">Вывод чисел каждые 100 мс, через setTimeout</a></h3><a href="task/output-numbers-100ms-settimeout.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Сделайте то же самое, что в задаче <a href="task/output-numbers-100ms.htm">Вывод чисел каждые 100 мс</a>, но с использованием рекурсивного <code>setTimeout</code> вместо <code>setInterval</code>.</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function printNumbersTimeout20_100() {
  var i = 1;
  var timerId = setTimeout(function go() {
    console.log(i);
    if (i &lt; 20) setTimeout(go, 100);
    i++;
  }, 100);
}

// вызов
printNumbersTimeout20_100();</code></pre>
        </div>
      </div>
      
      </div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#для-подсветки-setinterval-или-settimeout" name="для-подсветки-setinterval-или-settimeout" class="main__anchor">Для подсветки setInterval или setTimeout?</a></h3><a href="task/highlight-tactics.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Стоит задача: реализовать подсветку синтаксиса в длинном коде при помощи JavaScript, для онлайн-редактора кода. Это требует сложных вычислений, особенно загружает процессор генерация дополнительных элементов страницы, визуально осуществляющих подсветку.</p>
<p>Поэтому решаем обрабатывать не весь код сразу, что привело бы к зависанию скрипта, а разбить работу на части: подсвечивать по 20 строк раз в 10 мс.</p>
<p>Как мы знаем, есть два варианта реализации такой подсветки:</p>
<ol>
<li>
<p>Через <code>setInterval</code>, с остановкой по окончании работы:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">timer = setInterval(function() {
  if (есть еще что подсветить) highlight();
  else clearInterval(timer);
}, 10);</code></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p>Через рекурсивный <code>setTimeout</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">setTimeout(function go() {
  highlight();
  if (есть еще что подсветить) setTimeout(go, 10);
}, 10);</code></pre>
        </div>
      </div>
      
      </div></li>
</ol>
<p>Какой из них стоит использовать? Почему?</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p><strong>Нужно выбрать вариант 2, который гарантирует браузеру свободное время между выполнениями <code>highlight</code>.</strong></p>
<p>Первый вариант может загрузить процессор на 100%, если <code>highlight</code> занимает время, близкое к 10 мс или, тем более, большее чем 10 мс, т.к. таймер не учитывает время выполнения функции.</p>
<p>Что интересно, в обоих случаях браузер не будет выводить предупреждение о том, что скрипт занимает много времени. Но от 100% загрузки процессора возможны притормаживания других операций. В общем, это совсем не то, что мы хотим, поэтому вариант 2.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#что-выведет-settimeout" name="что-выведет-settimeout" class="main__anchor">Что выведет setTimeout?</a></h3><a href="task/settimeout-result.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>В коде ниже запланирован запуск <code>setTimeout</code>, а затем запущена тяжёлая функция <code>hardWork</code>, выполнение которой занимает более долгое время, чем интервал до срабатывания таймера.</p>
<p>Когда сработает <code>setTimeout</code>? Выберите нужный вариант:</p>
<ol>
<li>До выполнения <code>hardWork</code>.</li>
<li>Во время выполнения <code>hardWork</code>.</li>
<li>Сразу же по окончании <code>hardWork</code>.</li>
<li>Через 100 мс после окончания <code>hardWork</code>.</li>
</ol>
<p>Что выведет <code>alert</code> в коде ниже?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">setTimeout(function() {
  alert( i );
}, 100);

var i;

function hardWork() {
  // время выполнения этого кода &gt;100 мс, сам код неважен
  for (i = 0; i &lt; 1e8; i++) hardWork[i % 2] = i;
}

hardWork();</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Ответы:</p>
<ul>
<li><code>alert</code> выведет <code>100000000</code>.</li>
<li><strong>3</strong>, срабатывание будет после окончания работы <code>hardWork</code>.</li>
</ul>
<p>Так будет потому, что вызов планируется на <code>100 мс</code> от времени вызова <code>setTimeout</code>, но функция выполняется больше, чем <code>100 мс</code>, поэтому к моменту ее окончания время уже подошло и отложенный вызов выполняется тут же.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#что-выведет-после-setinterval" name="что-выведет-после-setinterval" class="main__anchor">Что выведет после setInterval?</a></h3><a href="task/setinterval-result.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>В коде ниже запускается <code>setInterval</code> каждые 10 мс, и через 50 мс запланирована его отмена.</p>
<p>После этого запущена тяжёлая функция <code>f</code>, выполнение которой (мы точно знаем) потребует более 100 мс.</p>
<p>Сработает ли <code>setInterval</code>, как и когда?</p>
<p>Варианты:</p>
<ol>
<li>Да, несколько раз, <em>в процессе</em> выполнения <code>f</code>.</li>
<li>Да, несколько раз, <em>сразу после</em> выполнения <code>f</code>.</li>
<li>Да, один раз, <em>сразу после</em> выполнения <code>f</code>.</li>
<li>Нет, не сработает.</li>
<li>Может быть по-разному, как повезёт.</li>
</ol>
<p>Что выведет <code>alert</code> в строке <code>(*)</code>?</p>
<div data-trusted="1" class="code-example" data-highlight-block="7-7">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var i;
var timer = setInterval(function() { // планируем setInterval каждые 10 мс
  i++;
}, 10);

setTimeout(function() { // через 50 мс - отмена setInterval
  clearInterval(timer);
  alert( i ); // (*)
}, 50);

// и запускаем тяжёлую функцию
function f() {
  // точное время выполнения не играет роли
  // здесь оно заведомо больше 100 мс
  for (i = 0; i &lt; 1e8; i++) f[i % 2] = i;
}

f();</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Вызов <code>alert(i)</code> в <code>setTimeout</code> введет <code>100000001</code>.</p>
<p>Можете проверить это запуском:</p>
<div data-trusted="1" class="code-example" data-highlight-block="6-6">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var timer = setInterval(function() {
  i++;
}, 10);

setTimeout(function() {
  clearInterval(timer);
  alert( i ); // (*)
}, 50);

var i;

function f() {
  // точное время выполнения не играет роли
  // здесь оно заведомо больше 100 мс
  for (i = 0; i &lt; 1e8; i++) f[i % 2] = i;
}

f();</code></pre>
        </div>
      </div>
      
      </div><p>Правильный вариант срабатывания: <strong>3</strong> (сразу же по окончании <code>f</code> один раз).</p>
<p>Планирование <code>setInterval</code> будет вызывать функцию каждые <code>10 мс</code> после текущего времени. Но так как интерпретатор занят долгой функцией, то до конца ее работы никакого вызова не происходит.</p>
<p>За время выполнения <code>f</code> может пройти время, на которое запланированы несколько вызовов <code>setInterval</code>, но в этом случае остается только один, т.е. накопления вызовов не происходит. Такова логика работы <code>setInterval</code>.</p>
<p>После окончания текущего скрипта интерпретатор обращается к очереди запланированных вызовов, видит в ней <code>setInterval</code> и выполняет. А затем тут же выполняется  <code>setTimeout</code>, очередь которого тут же подошла.</p>
<p>Итого, как раз и видим, что <code>setInterval</code> выполнился ровно 1 раз по окончании работы функции. Такое поведение кросс-браузерно.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#кто-быстрее" name="кто-быстрее" class="main__anchor">Кто быстрее?</a></h3><a href="task/who-runs-faster.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Есть два бегуна:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var runner1 = new Runner();
var runner2 = new Runner();</code></pre>
        </div>
      </div>
      
      </div><p>У каждого есть метод <code>step()</code>, который делает шаг, увеличивая свойство <code>steps</code>.</p>
<p>Конкретный код метода <code>step()</code> не имеет значения, важно лишь что шаг делается не мгновенно, он требует небольшого времени.</p>
<p>Если запустить первого бегуна через <code>setInterval</code>, а второго – через вложенный <code>setTimeout</code> – какой сделает больше шагов за 5 секунд?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// первый?
setInterval(function() {
  runner1.step();
}, 15);

// или второй?
setTimeout(function go() {
  runner2.step();
  setTimeout(go, 15);
}, 15);

setTimeout(function() {
  alert( runner1.steps );
  alert( runner2.steps );
}, 5000);</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Задача – с небольшим «нюансом».</p>
<p>Есть браузеры, в которых на время работы JavaScript таймер «застывает», например таков IE. В них количество шагов будет почти одинаковым, ±1.</p>
<p>В других браузерах (Chrome) первый бегун будет быстрее.</p>
<p>Создадим реальные объекты <code>Runner</code> и запустим их для проверки:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Runner() {
  this.steps = 0;

  this.step = function() {
    this.doSomethingHeavy();
    this.steps++;
  };

  function fib(n) {
    return n &lt;= 1 ? n : fib(n - 1) + fib(n - 2);
  }

  this.doSomethingHeavy = function() {
    for (var i = 0; i &lt; 25; i++) {
      this[i] = fib(i);
    }
  };

}

var runner1 = new Runner();
var runner2 = new Runner();

// запускаем бегунов
var t1 = setInterval(function() {
  runner1.step();
}, 15);

var t2 = setTimeout(function go() {
  runner2.step();
  t2 = setTimeout(go, 15);
}, 15);

// кто сделает больше шагов?
setTimeout(function() {
  clearInterval(t1);
  clearTimeout(t2);
  alert( runner1.steps );
  alert( runner2.steps );
}, 5000);</code></pre>
        </div>
      </div>
      
      </div><p>Если бы в шаге <code>step()</code> не было вызова <code>doSomethingHeavy()</code>, то есть он бы не требовал времени, то количество шагов было бы почти равным.</p>
<p>Но так как у нас шаг, всё же, что-то делает, и функция <code>doSomethingHeavy()</code> специально написана таким образом, что она требует (небольшого) времени, то первый бегун успеет сделать больше шагов. Ведь в <code>setTimeout</code> пауза <code>15</code> мс будет <em>между</em> шагами, а <code>setInterval</code> шагает равномерно, каждые <code>15</code> мс. Получается чаще.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#функция-задержка" name="функция-задержка" class="main__anchor">Функция-задержка</a></h3><a href="task/delay.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Напишите функцию <code>delay(f, ms)</code>, которая возвращает обёртку вокруг <code>f</code>, задерживающую вызов на <code>ms</code> миллисекунд.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f(x) {
  alert( x );
}

var f1000 = delay(f, 1000);
var f1500 = delay(f, 1500);

f1000(&quot;тест&quot;); // выведет &quot;тест&quot; через 1000 миллисекунд
f1500(&quot;тест2&quot;); // выведет &quot;тест2&quot; через 1500 миллисекунд</code></pre>
        </div>
      </div>
      
      </div><p>Упрощённо можно сказать, что <code>delay</code> возвращает &quot;задержанный на <code>ms</code>&quot; вариант <code>f</code>.</p>
<p>В примере выше у функции только один аргумент, но <code>delay</code> должна быть универсальной: передавать любое количество аргументов и контекст <code>this</code>.</p>
<p><a href="http://plnkr.co/edit/RR54jP4ppmmpzmI4m3Wf?p=preview" target="_blank" data-plunk-id="RR54jP4ppmmpzmI4m3Wf">Открыть песочницу с тестами для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><div data-trusted="1" class="code-example" data-highlight-block="2-9">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function delay(f, ms) {

  return function() {
    var savedThis = this;
    var savedArgs = arguments;

    setTimeout(function() {
      f.apply(savedThis, savedArgs);
    }, ms);
  };

}

function f(x) {
  alert( x );
}

var f1000 = delay(f, 1000);
var f1500 = delay(f, 1500);

f1000(&quot;тест&quot;); // выведет &quot;тест&quot; через 1000 миллисекунд
f1500(&quot;тест2&quot;); // выведет &quot;тест2&quot; через 1500 миллисекунд</code></pre>
        </div>
      </div>
      
      </div><p>Обратим внимание на то, как работает обёртка:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">return function() {
  var savedThis = this;
  var savedArgs = arguments;

  setTimeout(function() {
    f.apply(savedThis, savedArgs);
  }, ms);
};</code></pre>
        </div>
      </div>
      
      </div><p>Именно обёртка возвращается декоратором <code>delay</code> и будет вызвана. Чтобы передать аргумент и контекст функции, вызываемой через <code>ms</code> миллисекунд, они копируются в локальные переменные <code>savedThis</code> и <code>savedArgs</code>.</p>
<p>Это один из самых простых, и в то же время удобных способов передать что-либо в функцию, вызываемую через <code>setTimeout</code>.</p>
<p><a href="http://plnkr.co/edit/tbpCSPSEjARhvCF6pgFy?p=preview" target="_blank" data-plunk-id="tbpCSPSEjARhvCF6pgFy">Открыть решение с тестами в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#вызов-не-чаще-чем-в-n-миллисекунд" name="вызов-не-чаще-чем-в-n-миллисекунд" class="main__anchor">Вызов не чаще чем в N миллисекунд</a></h3><a href="task/debounce.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Напишите функцию <code>debounce(f, ms)</code>, которая возвращает обёртку, которая откладывает вызов <code>f</code> на <code>ms</code> миллисекунд.</p>
<p>«Лишние» вызовы перезаписывают предыдущие отложенные задания. Все аргументы и контекст – передаются.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f() { ... }

let f = debounce(f, 1000);

f(1); // вызов отложен на 1000 мс
f(2); // предыдущий отложенный вызов игнорируется, текущий (2) откладывается на 1000 мс

// через 1 секунду будет выполнен вызов f(1)

setTimeout( function() { f(3) }, 1100); // через 1100 мс отложим вызов еще на 1000 мс
setTimeout( function() { f(4) }, 1200); // игнорируем вызов (3)

// через 2200 мс от начала выполнения будет выполнен вызов f(4)</code></pre>
        </div>
      </div>
      
      </div><p>Упрощённо можно сказать, что <code>debounce</code> возвращает вариант <code>f</code>, срабатывающий не чаще чем раз в <code>ms</code> миллисекунд.</p>
<p><a href="http://plnkr.co/edit/ltOWyuJOplIm7woNRFgQ?p=preview" target="_blank" data-plunk-id="ltOWyuJOplIm7woNRFgQ">Открыть песочницу с тестами для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function debounce(f, ms) {

  let timer = null;

  return function (...args) {
    const onComplete = () =&gt; {
      f.apply(this, args);
      timer = null;
    }

    if (timer) {
      clearTimeout(timer);
    }

    timer = setTimeout(onComplete, ms);
  };
}

function f(x) { alert(x) }
let f = debounce(f, 1000);

f(1); // вызов отложен на 1000 мс
f(2); // предыдущий отложенный вызов игнорируется, текущий (2) откладывается на 1000 мс

// через 1 секунду появится alert(2)

setTimeout( function() { f(3) }, 1100); // через 1100 мс отложим вызов еще на 1000 мс
setTimeout( function() { f(4) }, 1200); // игнорируем вызов (3)

// через 2200 мс от начала выполнения появится alert(4)</code></pre>
        </div>
      </div>
      
      </div><p>Вызов <code>debounce</code> возвращает функцию-обёртку. Все необходимые данные для неё хранятся в замыкании.</p>
<p>При первом вызове обертки в значении переменной <code>timer</code> находится <code>null</code> и происходит вызов <code>setTimeout</code>.</p>
<p>Этот вызов во-первых отложит выполнение декорируемой функции на <code>ms</code> миллисекунд, а во-вторых установит в качестве значения <code>time</code> числовой идентификатор, который позволит обнулить отложенное задание при последующих вызовах.</p>
<p><a href="http://plnkr.co/edit/SwBfdOqsg0Cckq1rDJQO?p=preview" target="_blank" data-plunk-id="SwBfdOqsg0Cckq1rDJQO">Открыть решение с тестами в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#тормозилка" name="тормозилка" class="main__anchor">Тормозилка</a></h3><a href="task/throttle.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Напишите функцию <code>throttle(f, ms)</code> – «тормозилку», которая возвращает обёртку, передающую вызов <code>f</code> не чаще, чем раз в <code>ms</code> миллисекунд.</p>
<p><strong>У этой функции должно быть важное существенное отличие от <code>debounce</code>:</strong> если игнорируемый вызов оказался последним, т.е. после него до окончания задержки ничего нет – то он выполнится.</p>
<p>Чтобы лучше понять, откуда взялось это требование, и как <code>throttle</code> должна работать – разберём реальное применение, на которое и ориентирована эта задача.</p>
<p><strong>Например, нужно обрабатывать передвижения мыши.</strong></p>
<p>В JavaScript это делается функцией, которая будет запускаться при каждом микро-передвижении мыши и получать координаты курсора. По мере того, как мышь двигается, эта функция может запускаться очень часто, может быть 100 раз в секунду (каждые 10 мс).</p>
<p><strong>Функция обработки передвижения должна обновлять некую информацию на странице.</strong></p>
<p>При этом обновление – слишком «тяжёлый» процесс, чтобы делать его при каждом микро-передвижении. Имеет смысл делать его раз в 100 мс, не чаще.</p>
<p>Пусть функция, которая осуществляет это обновление по передвижению, называется <code>onmousemove</code>.</p>
<p>Вызов <code>throttle(onmousemove, 100)</code>, по сути, предназначен для того, чтобы «притормаживать» обработку <code>onmousemove</code>. Технически, он должен возвращать обёртку, которая передаёт все вызовы <code>onmousemove</code>, но не чаще чем раз в 100 мс.</p>
<p><strong>При этом промежуточные движения можно игнорировать, но мышь в конце концов где-то остановится. И это последнее, итоговое положение мыши обязательно нужно обработать!</strong></p>
<p>Визуально это даст следующую картину обработки перемещений мыши:</p>
<ol>
<li>Первое обновление произойдёт сразу (это важно, посетитель тут же видит реакцию на своё действие).</li>
<li>Дальше может быть много вызовов (микро-передвижений) с разными координатами, но пока не пройдёт 100 мс – ничего не будет.</li>
<li>По истечении 100 мс – опять обновление, с последними координатами. Промежуточные микро-передвижения игнорированы.</li>
<li>В конце концов мышь где-то остановится, обновление по окончании очередной паузы 100 мс  сработает с последними координатами.</li>
</ol>
<p>Ещё раз заметим – задача из реальной жизни, и в ней принципиально важно, что <em>последнее</em> передвижение обрабатывается. Пользователь должен увидеть, где остановил мышь.</p>
<p>Пример использования:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var f = function(a) {
  console.log(a)
};

// затормозить функцию до одного раза в 1000 мс
var f1000 = throttle(f, 1000);

f1000(1); // выведет 1
f1000(2); // (тормозим, не прошло 1000 мс)
f1000(3); // (тормозим, не прошло 1000 мс)

// когда пройдёт 1000 мс...
// выведет 3, промежуточное значение 2 игнорируется</code></pre>
        </div>
      </div>
      
      </div><p><a href="http://plnkr.co/edit/jLruiOh4uN7zaPo7dbbp?p=preview" target="_blank" data-plunk-id="jLruiOh4uN7zaPo7dbbp">Открыть песочницу с тестами для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function throttle(func, ms) {

  var isThrottled = false,
    savedArgs,
    savedThis;

  function wrapper() {

    if (isThrottled) { // (2)
      savedArgs = arguments;
      savedThis = this;
      return;
    }

    func.apply(this, arguments); // (1)

    isThrottled = true;

    setTimeout(function() {
      isThrottled = false; // (3)
      if (savedArgs) {
        wrapper.apply(savedThis, savedArgs);
        savedArgs = savedThis = null;
      }
    }, ms);
  }

  return wrapper;
}</code></pre>
        </div>
      </div>
      
      </div><p>Шаги работы этой функции:</p>
<ol>
<li>Декоратор <code>throttle</code> возвращает функцию-обёртку <code>wrapper</code>, которая при первом вызове запускает <code>func</code> и переходит в состояние «паузы» (<code>isThrottled = true</code>).</li>
<li>В этом состоянии все новые вызовы запоминаются в замыкании через <code>savedArgs/savedThis</code>. Обратим внимание, что и контекст вызова и аргументы для нас одинаково важны и запоминаются одновременно. Только зная и то и другое, можно воспроизвести вызов правильно.</li>
<li>Далее, когда пройдёт таймаут <code>ms</code> миллисекунд – пауза будет снята, а <code>wrapper</code> – запущен с последними аргументами и контекстом (если во время паузы были вызовы).</li>
</ol>
<p>Шаг <code>(3)</code> запускает именно не саму функцию, а снова <code>wrapper</code>, так как необходимо не только выполнить <code>func</code>, но и снова поставить выполнение на паузу. Получается последовательность «вызов – пауза… вызов – пауза … вызов – пауза …», каждое выполнение в обязательном порядке сопровождается паузой после него. Это удобно описывается рекурсией.</p>
<p><a href="http://plnkr.co/edit/q98IjwRqJwtYsLXt3Gtb?p=preview" target="_blank" data-plunk-id="q98IjwRqJwtYsLXt3Gtb">Открыть решение с тестами в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>