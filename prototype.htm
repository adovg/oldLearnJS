<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="js.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Язык JavaScript</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="prototypes.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">ООП в прототипном стиле</span></a></li></ol><h1 class="main__header-title">Прототип объекта</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Прототип объекта"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Объекты в JavaScript можно организовать в цепочки так, чтобы свойство, не найденное в одном объекте, автоматически искалось бы в другом.</p>
<p>Связующим звеном выступает специальное свойство <code>__proto__</code>.</p>
<h2><a class="main__anchor" name="прототип-proto" href="#прототип-proto">Прототип <strong>proto</strong></a></h2><p>Если один объект имеет специальную ссылку <code>__proto__</code> на другой объект, то при чтении свойства из него, если свойство отсутствует в самом объекте, оно ищется в объекте <code>__proto__</code>.</p>
<p>Свойство <code>__proto__</code> доступно во всех браузерах, кроме IE10-, а в более старых IE оно, конечно же, тоже есть, но напрямую к нему не обратиться, требуются чуть более сложные способы, которые мы рассмотрим позднее.</p>
<p>Пример кода (кроме IE10-):</p>
<div data-trusted="1" class="code-example" data-highlight-block="7-7">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var animal = {
  eats: true
};
var rabbit = {
  jumps: true
};

rabbit.__proto__ = animal;

// в rabbit можно найти оба свойства
alert( rabbit.jumps ); // true
alert( rabbit.eats ); // true</code></pre>
        </div>
      </div>
      
      </div><ol>
<li>Первый <code>alert</code> здесь работает очевидным образом – он выводит свойство <code>jumps</code> объекта <code>rabbit</code>.</li>
<li>Второй <code>alert</code> хочет вывести <code>rabbit.eats</code>, ищет его в самом объекте <code>rabbit</code>, не находит – и продолжает поиск в объекте <code>rabbit.__proto__</code>, то есть, в данном случае, в <code>animal</code>.</li>
</ol>
<p>Иллюстрация происходящего при чтении <code>rabbit.eats</code> (поиск идет снизу вверх):</p>
<figure><div class="image" style="width:161px">
      <div class="image__ratio" style="padding-top:93.16770186335404%"></div>
      <img src="article/prototype/proto-animal-rabbit.png" alt="" width="161" height="150" class="image__image">
      </div></figure><p><strong>Объект, на который указывает ссылка <code>__proto__</code>, называется <em>«прототипом»</em>. В данном случае получилось, что <code>animal</code> является прототипом для <code>rabbit</code>.</strong></p>
<p><strong>Также говорят, что объект <code>rabbit</code> <em>«прототипно наследует»</em> от <code>animal</code>.</strong></p>
<p>Обратим внимание – прототип используется исключительно при чтении. Запись значения, например, <code>rabbit.eats = value</code> или удаление <code>delete rabbit.eats</code> – работает напрямую с объектом.</p>
<p>В примере ниже мы записываем свойство в сам <code>rabbit</code>, после чего <code>alert</code> перестаёт брать его у прототипа, а берёт уже из самого объекта:</p>
<div data-trusted="1" class="code-example" data-highlight-block="10-10">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var animal = {
  eats: true
};
var rabbit = {
  jumps: true,
  eats: false
};

rabbit.__proto__ = animal;

alert( rabbit.eats ); // false, свойство взято из rabbit</code></pre>
        </div>
      </div>
      
      </div><p><strong>Другими словами, прототип – это «резервное хранилище свойств и методов» объекта, автоматически используемое при поиске.</strong></p>
<p>У объекта, который является <code>__proto__</code>, может быть свой <code>__proto__</code>, у того – свой, и так далее. При этом свойства будут искаться по цепочке.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Ссылка <strong>proto</strong> в спецификации</span></div>
            <div class="important__content"><p>Если вы будете читать спецификацию ECMAScript – свойство <code>__proto__</code> обозначено в ней как <code>[[Prototype]]</code>.</p>
<p>Двойные квадратные скобки здесь важны, чтобы не перепутать его с совсем другим свойством, которое называется <code>prototype</code>, и которое мы рассмотрим позже.</p>
</div></div>
<h2><a class="main__anchor" name="метод-hasownproperty" href="#метод-hasownproperty">Метод hasOwnProperty</a></h2><p>Обычный цикл <code>for..in</code> не делает различия между свойствами объекта и его прототипа.</p>
<p>Он перебирает всё, например:</p>
<div data-trusted="1" class="code-example" data-highlight-block="9-11">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var animal = {
  eats: true
};

var rabbit = {
  jumps: true,
  __proto__: animal
};

for (var key in rabbit) {
  alert( key + &quot; = &quot; + rabbit[key] ); // выводит и &quot;eats&quot; и &quot;jumps&quot;
}</code></pre>
        </div>
      </div>
      
      </div><p>Иногда хочется посмотреть, что находится именно в самом объекте, а не в прототипе.</p>
<p><strong>Вызов <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/HasOwnProperty">obj.hasOwnProperty(prop)</a> возвращает <code>true</code>, если свойство <code>prop</code> принадлежит самому объекту <code>obj</code>, иначе <code>false</code>.</strong></p>
<p>Например:</p>
<div data-trusted="1" class="code-example" data-highlight-block="9-11">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var animal = {
  eats: true
};

var rabbit = {
  jumps: true,
  __proto__: animal
};

alert( rabbit.hasOwnProperty('jumps') ); // true: jumps принадлежит rabbit

alert( rabbit.hasOwnProperty('eats') ); // false: eats не принадлежит</code></pre>
        </div>
      </div>
      
      </div><p>Для того, чтобы перебрать свойства самого объекта, достаточно профильтровать <code>key</code> через <code>hasOwnProperty</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="10-10">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var animal = {
  eats: true
};

var rabbit = {
  jumps: true,
  __proto__: animal
};

for (var key in rabbit) {
  if (!rabbit.hasOwnProperty(key)) continue; // пропустить &quot;не свои&quot; свойства
  alert( key + &quot; = &quot; + rabbit[key] ); // выводит только &quot;jumps&quot;
}</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="object-create-null" href="#object-create-null">Object.create(null)</a></h2><p>Зачастую объекты используют для хранения произвольных значений по ключу, как коллекцию:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var data = {};
data.text = &quot;Привет&quot;;
data.age = 35;
// ...</code></pre>
        </div>
      </div>
      
      </div><p>При дальнейшем поиске в этой коллекции мы найдём не только <code>text</code> и <code>age</code>, но и встроенные функции:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var data = {};
alert(data.toString); // функция, хотя мы её туда не записывали</code></pre>
        </div>
      </div>
      
      </div><p>Это может быть неприятным сюрпризом и приводить к ошибкам, если названия свойств приходят от посетителя и могут быть произвольными.</p>
<p>Чтобы этого избежать, мы можем исключать свойства, не принадлежащие самому объекту:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var data = {};

// выведет toString только если оно записано в сам объект
alert(data.hasOwnProperty('toString') ? data.toString : undefined);</code></pre>
        </div>
      </div>
      
      </div><p>Однако, есть путь и проще:</p>
<div data-trusted="1" class="code-example" data-highlight-block="0-0,4-4">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var data = Object.create(null);
data.text = &quot;Привет&quot;;

alert(data.text); // Привет
alert(data.toString); // undefined</code></pre>
        </div>
      </div>
      
      </div><p>Объект, создаваемый при помощи <code>Object.create(null)</code> не имеет прототипа, а значит в нём нет лишних свойств. Для коллекции – как раз то, что надо.</p>
<h2><a class="main__anchor" name="методы-для-работы-с-proto" href="#методы-для-работы-с-proto">Методы для работы с <strong>proto</strong></a></h2><p>В современных браузерах есть два дополнительных метода для работы с <code>__proto__</code>. Зачем они нужны, если есть <code>__proto__</code>? В общем-то, не очень нужны, но по историческим причинам тоже существуют.</p>
<dl>
<dt>Чтение: <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/getPrototypeOf">Object.getPrototypeOf(obj)</a></dt>
<dd>Возвращает <code>obj.__proto__</code> (кроме IE8-)</dd>
<dt>Запись: <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/setPrototypeOf">Object.setPrototypeOf(obj, proto)</a></dt>
<dd>Устанавливает <code>obj.__proto__ = proto</code> (кроме IE10-).</dd>
</dl>
<p>Кроме того, есть ещё один вспомогательный метод:</p>
<dl>
<dt>Создание объекта с прототипом: <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/create">Object.create(proto, descriptors)</a></dt>
<dd>Создаёт пустой объект с <code>__proto__</code>, равным первому аргументу (кроме IE8-), второй необязательный аргумент может содержать <a href="descriptors-getters-setters.htm">дескрипторы свойств</a>.</dd>
</dl>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><ul>
<li>В JavaScript есть встроенное «наследование» между объектами при помощи специального свойства <code>__proto__</code>.</li>
<li>При установке свойства <code>rabbit.__proto__ = animal</code> говорят, что объект <code>animal</code> будет «прототипом» <code>rabbit</code>.</li>
<li>При чтении свойства из объекта, если его в нём нет, оно ищется в <code>__proto__</code>. Прототип задействуется только при чтении свойства. Операции присвоения <code>obj.prop =</code> или удаления <code>delete obj.prop</code> совершаются всегда над самим объектом <code>obj</code>.</li>
</ul>
<p>Несколько прототипов одному объекту присвоить нельзя, но можно организовать объекты в цепочку, когда один объект ссылается на другой при помощи <code>__proto__</code>, тот ссылается на третий, и так далее.</p>
<p>В современных браузерах есть методы для работы с прототипом:</p>
<ul>
<li><a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/getPrototypeOf">Object.getPrototypeOf(obj)</a> (кроме IE8-)</li>
<li><a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/setPrototypeOf">Object.setPrototypeOf(obj, proto)</a> (кроме IE10-)</li>
<li><a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/create">Object.create(proto, descriptors)</a> (кроме IE8-)</li>
</ul>
<p>Возможно, вас смущает недостаточная поддержка <code>__proto__</code> в старых IE. Но это не страшно. В последующих главах мы рассмотрим дополнительные методы работы с <code>__proto__</code>, включая те, которые работают везде.</p>
<p>Также мы рассмотрим, как свойство <code>__proto__</code> используется внутри самого языка JavaScript и как организовать классы с его помощью.</p>
</div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#чему-равно-свойство-после-delete" name="чему-равно-свойство-после-delete" class="main__anchor">Чему равно свойство после delete?</a></h3><a href="http://learn.javascript.ru/task/property-after-delete" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Какие значения будут выводиться в коде ниже?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var animal = {
  jumps: null
};
var rabbit = {
  jumps: true
};

rabbit.__proto__ = animal;

alert( rabbit.jumps ); // ? (1)

delete rabbit.jumps;

alert( rabbit.jumps ); // ? (2)

delete animal.jumps;

alert( rabbit.jumps ); // ? (3)</code></pre>
        </div>
      </div>
      
      </div><p>Итого три вопроса.</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><ol>
<li><code>true</code>, свойство взято из <code>rabbit</code>.</li>
<li><code>null</code>, свойство взято из <code>animal</code>.</li>
<li><code>undefined</code>, свойства больше нет.</li>
</ol>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#прототип-и-this" name="прототип-и-this" class="main__anchor">Прототип и this</a></h3><a href="task/proto-and-this/default.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Сработает ли вызов <code>rabbit.eat()</code> ?</p>
<p>Если да, то в какой именно объект он запишет свойство <code>full</code>: в <code>rabbit</code> или <code>animal</code>?</p>
<div data-trusted="1" class="code-example" data-highlight-block="10-10">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var animal = {
  eat: function() {
    this.full = true;
  }
};

var rabbit = {
  __proto__: animal
};

rabbit.eat();</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p><strong>Ответ: свойство будет записано в <code>rabbit</code>.</strong></p>
<p>Если коротко – то потому что <code>this</code> будет указывать на <code>rabbit</code>, а прототип при записи не используется.</p>
<p>Если в деталях – посмотрим как выполняется <code>rabbit.eat()</code>:</p>
<ol>
<li>
<p>Интерпретатор ищет <code>rabbit.eat</code>, чтобы его вызвать. Но свойство <code>eat</code> отсутствует в объекте <code>rabbit</code>, поэтому он идет по ссылке <code>rabbit.__proto__</code> и находит это свойство там.</p>
<figure><div class="image" style="width:168px">
      <div class="image__ratio" style="padding-top:110.11904761904762%"></div>
      <img src="task/proto-and-this/proto5.png" alt="" width="168" height="185" class="image__image">
      </div></figure></li>
<li>
<p>Функция <code>eat</code> запускается. Контекст ставится равным объекту перед точкой, т.е. <code>this = rabbit</code>.</p>
<p>Итак – получается, что команда <code>this.full = true</code> устанавливает свойство <code>full</code> в самом объекте <code>rabbit</code>. Итог:</p>
<figure><div class="image" style="width:168px">
      <div class="image__ratio" style="padding-top:119.64285714285714%"></div>
      <img src="task/proto-and-this/proto6.png" alt="" width="168" height="201" class="image__image">
      </div></figure></li>
</ol>
<p>Эта задача демонстрирует, что несмотря на то, в каком прототипе находится свойство, это никак не влияет на установку <code>this</code>, которая осуществляется по своим, независимым правилам.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#алгоритм-для-поиска" name="алгоритм-для-поиска" class="main__anchor">Алгоритм для поиска</a></h3><a href="task/search-algorithm.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Есть объекты:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var head = {
  glasses: 1
};

var table = {
  pen: 3
};

var bed = {
  sheet: 1,
  pillow: 2
};

var pockets = {
  money: 2000
};</code></pre>
        </div>
      </div>
      
      </div><p>Задание состоит из двух частей:</p>
<ol>
<li>
<p>Присвойте объектам ссылки <code>__proto__</code> так, чтобы любой поиск чего-либо шёл по алгоритму <code>pockets -&gt; bed -&gt; table -&gt; head</code>.</p>
<p>То есть <code>pockets.pen == 3</code>, <code>bed.glasses == 1</code>, но <code>table.money == undefined</code>.</p>
</li>
<li>
<p>После этого ответьте на вопрос, как быстрее искать <code>glasses</code>: обращением к <code>pockets.glasses</code> или <code>head.glasses</code>? Попробуйте протестировать.</p>
</li>
</ol>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><ol>
<li>
<p>Расставим <code>__proto__</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var head = {
  glasses: 1
};

var table = {
  pen: 3
};
table.__proto__ = head;

var bed = {
  sheet: 1,
  pillow: 2
};
bed.__proto__ = table;

var pockets = {
  money: 2000
};
pockets.__proto__ = bed;

alert( pockets.pen ); // 3
alert( bed.glasses ); // 1
alert( table.money ); // undefined</code></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p><strong>В современных браузерах, с точки зрения производительности, нет разницы, брать свойство из объекта или прототипа.</strong> Они запоминают, где было найдено свойство и в следующий раз при запросе, к примеру, <code>pockets.glasses</code> начнут искать сразу в прототипе (<code>head</code>).</p>
</li>
</ol>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>