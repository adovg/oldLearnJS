<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="js.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Язык JavaScript</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="oop.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">ООП в функциональном стиле</span></a></li></ol><h1 class="main__header-title">Внутренний и внешний интерфейс</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Внутренний и внешний интерфейс"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Один из важнейших принципов ООП – отделение внутреннего интерфейса от внешнего.</p>
<p>Это – обязательная практика в разработке чего угодно сложнее hello world.</p>
<p>Чтобы это понять, отвлечемся от разработки и переведем взгляд на объекты реального мира.</p>
<p>Как правило, устройства, с которыми мы имеем дело, весьма сложны. Но <em>разделение интерфейса на внешний и внутренний</em> позволяет использовать их без малейших проблем.</p>
<h2><a class="main__anchor" name="пример-из-жизни" href="#пример-из-жизни">Пример из жизни</a></h2><p>Например, кофеварка. Простая снаружи: кнопка, индикатор, отверстия,… И, конечно, результат – кофе :)</p>
<figure><div class="image" style="width:240px">
      <div class="image__ratio" style="padding-top:166.66666666666669%"></div>
      <img src="article/internal-external-interface/coffee.jpg" alt="" width="240" height="400" class="image__image">
      </div></figure><p>Но внутри… (картинка из пособия по ремонту)</p>
<figure><div class="image" style="width:239px">
      <div class="image__ratio" style="padding-top:167.36401673640165%"></div>
      <img src="article/internal-external-interface/coffee-inside.jpg" alt="" width="239" height="400" class="image__image">
      </div></figure><p>Масса деталей. Но мы можем пользоваться ей, совершенно не зная об этом.</p>
<p>Кофеварки – довольно-таки надежны, не правда ли? Можно пользоваться годами, и только когда что-то пойдет не так – придется нести к мастеру.</p>
<p>Секрет надежности и простоты кофеварки – в том, что все детали отлажены и <em>спрятаны</em> внутри.</p>
<p>Если снять с кофеварки защитный кожух, то использование её будет более сложным (куда нажимать?) и опасным (током ударить может).</p>
<p>Как мы увидим, объекты очень схожи с кофеварками.</p>
<p>Только для того, чтобы прятать внутренние детали, используется не кожух, а специальные средства языка и соглашения.</p>
<h2><a class="main__anchor" name="внутренний-и-внешний-интерфейс" href="#внутренний-и-внешний-интерфейс">Внутренний и внешний интерфейс</a></h2><p>В программировании мы будем разделять методы и свойства объекта на две группы:</p>
<ul>
<li><em>Внутренний интерфейс</em> – это свойства и методы, доступ к которым может быть осуществлен только из других методов объекта, их также называют «приватными» (есть и другие термины, встретим их далее).</li>
<li><em>Внешний интерфейс</em> – это свойства и методы, доступные снаружи объекта, их называют «публичными».</li>
</ul>
<p>Если продолжить аналогию с кофеваркой – то, что спрятано внутри кофеварки: трубка кипятильника, нагревательный элемент, тепловой предохранитель и так далее – это её внутренний интерфейс.</p>
<p>Внутренний интерфейс используется для обеспечения работоспособности объекта, его детали используют друг друга. Например, трубка кипятильника подключена к нагревательному элементу.</p>
<p>Но снаружи кофеварка закрыта специальным кожухом, чтобы никто к ним не подобрался. Детали скрыты и недоступны. Виден лишь внешний интерфейс.</p>
<p>Получив объект, всё, что нужно для пользования им – это знать внешний интерфейс. О внутреннем же знать вообще не обязательно.</p>
<p>Это были общие слова по теории программирования.</p>
<p>Далее мы реализуем кофеварку на JavaScript с приватными и публичными свойствами. В кофеварке много деталей, мы конечно, не будем моделировать каждый винтик, а сосредоточимся на основных приёмах разработки.</p>
<h2><a class="main__anchor" name="шаг-1-публичное-и-приватное-свойство" href="#шаг-1-публичное-и-приватное-свойство">Шаг 1: публичное и приватное свойство</a></h2><p>Конструктор кофеварок будет называться <code>CoffeeMachine</code>.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function CoffeeMachine(power) {
  this.waterAmount = 0; // количество воды в кофеварке

  alert( 'Создана кофеварка мощностью: ' + power + ' ватт' );
}

// создать кофеварку
var coffeeMachine = new CoffeeMachine(100);

// залить воды
coffeeMachine.waterAmount = 200;</code></pre>
        </div>
      </div>
      
      </div><p><strong>Локальные переменные, включая параметры конструктора, можно считать приватными свойствами.</strong></p>
<p>В примере выше это <code>power</code> – мощность кофеварки, которая указывается при создании и далее будет использована для расчёта времени кипячения.</p>
<p>К локальным переменным конструктора нельзя обратиться снаружи, но они доступны внутри самого конструктора.</p>
<p><strong>Свойства, записанные в <code>this</code>, можно считать публичными.</strong></p>
<p>Здесь свойство <code>waterAmount</code> записано в объект, а значит – доступно для модификации снаружи. Можно доливать и выливать воду в любом количестве.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Вопрос терминологии</span></div>
            <div class="important__content"><p>Далее мы будем называть <code>power</code> как «локальной переменной», так и «приватным свойством» объекта.</p>
<p>Это, смотря, с какой стороны посмотреть.</p>
<p>Термины «приватное свойство/метод», «публичное свойство/метод» относятся к общей теории ООП. А их конкретная реализация в языке программирования может быть различной.</p>
<p>Здесь ООП-принцип «приватного свойства» реализован через локальные переменные, поэтому и «локальная переменная» и «приватное свойство» – правильные термины, в зависимости от того, с какой точки зрения взглянуть – кода или архитектуры ООП.</p>
</div></div>
<h2><a class="main__anchor" name="шаг-2-публичный-и-приватный-методы" href="#шаг-2-публичный-и-приватный-методы">Шаг 2: публичный и приватный методы</a></h2><p>Добавим публичный метод <code>run</code>, запускающий кофеварку, а также вспомогательные внутренние методы <code>getBoilTime</code> и <code>onReady</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="4-18">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function CoffeeMachine(power) {

  this.waterAmount = 0;

  // расчёт времени для кипячения
  function getBoilTime() {
    return 1000; // точная формула расчета будет позже
  }

  // что делать по окончании процесса
  function onReady() {
    alert( 'Кофе готов!' );
  }

  this.run = function() {
    // setTimeout - встроенная функция,
    // она запустит onReady через getBoilTime() миллисекунд
    setTimeout(onReady, getBoilTime());
  };
}

var coffeeMachine = new CoffeeMachine(100);
coffeeMachine.waterAmount = 200;

coffeeMachine.run();</code></pre>
        </div>
      </div>
      
      </div><p>Приватные методы, такие как <code>onReady</code>, <code>getBoilTime</code> могут быть объявлены как вложенные функции.</p>
<p>В результате естественным образом получается, что доступ к ним (через замыкание) имеют только другие функции, объявленные в том же конструкторе.</p>
<h2><a class="main__anchor" name="шаг-3-константа" href="#шаг-3-константа">Шаг 3: константа</a></h2><p>Для расчёта времени на кипячение воды используется формула <code>c*m*ΔT / power</code>, где:</p>
<ul>
<li><code>c</code> – коэффициент теплоёмкости воды, физическая константа равная <code>4200</code>.</li>
<li><code>m</code> – масса воды, которую нужно нагреть.</li>
<li><code>ΔT</code> – температура, на которую нужно подогреть, будем считать, что изначально вода – комнатной температуры 20°С, то есть до 100° нужно греть на <code>ΔT=80</code>.</li>
<li><code>power</code> – мощность.</li>
</ul>
<p>Используем её в более реалистичном варианте <code>getBoilTime()</code>, включающем использование приватных свойств и константу:</p>
<div data-trusted="1" class="code-example" data-highlight-block="6-12">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">&quot;use strict&quot;

function CoffeeMachine(power) {

  this.waterAmount = 0;

  // физическая константа - удельная теплоёмкость воды для getBoilTime
  var WATER_HEAT_CAPACITY = 4200;

  // расчёт времени для кипячения
  function getBoilTime() {
    return this.waterAmount * WATER_HEAT_CAPACITY * 80 / power; // ошибка!
  }

  // что делать по окончании процесса
  function onReady() {
    alert( 'Кофе готов!' );
  }

  this.run = function() {
    setTimeout(onReady, getBoilTime());
  };

}

var coffeeMachine = new CoffeeMachine(1000);
coffeeMachine.waterAmount = 200;

coffeeMachine.run();</code></pre>
        </div>
      </div>
      
      </div><p>Удельная теплоёмкость <code>WATER_HEAT_CAPACITY</code> выделена большими буквами, так как это константа.</p>
<p>Внимание, при запуске кода выше в методе <code>getBoilTime</code> будет ошибка. Как вы думаете, почему?</p>
<h2><a class="main__anchor" name="шаг-4-доступ-к-объекту-из-внутреннего-метода" href="#шаг-4-доступ-к-объекту-из-внутреннего-метода">Шаг 4: доступ к объекту из внутреннего метода</a></h2><p>Внутренний метод вызывается так: <code>getBoilTime()</code>. А чему при этом равен <code>this</code>?… Как вы наверняка помните, в современном стандарте он будет <code>undefined</code> (в старом – <code>window</code>), из-за этого при чтении <code>this.waterAmount</code> возникнет ошибка!</p>
<p>Её можно решить, если вызвать <code>getBoilTime</code> с явным указанием контекста: <code>getBoilTime.call(this)</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="13-13">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function CoffeeMachine(power) {
  this.waterAmount = 0;
  var WATER_HEAT_CAPACITY = 4200;

  function getBoilTime() {
    return this.waterAmount * WATER_HEAT_CAPACITY * 80 / power;
  }

  function onReady() {
    alert( 'Кофе готов!' );
  }

  this.run = function() {
    setTimeout(onReady, getBoilTime.call(this));
  };

}

// создаю кофеварку, мощностью 100000W чтобы кипятила быстро
var coffeeMachine = new CoffeeMachine(100000);
coffeeMachine.waterAmount = 200;

coffeeMachine.run();</code></pre>
        </div>
      </div>
      
      </div><p>Такой подход будет работать, но он не очень-то удобен. Ведь получается, что теперь везде, где мы хотим вызвать <code>getBoilTime</code>, нужно явно указывать контекст, т.е. писать <code>getBoilTime.call(this)</code>.</p>
<p>К счастью существуют более элегантные решения.</p>
<h3><a class="main__anchor" name="привязка-через-bind" href="#привязка-через-bind">Привязка через bind</a></h3><p>Можно при объявлении привязать <code>getBoilTime</code> к объекту через <code>bind</code>, тогда вопрос контекста отпадёт сам собой:</p>
<div data-trusted="1" class="code-example" data-highlight-block="5-7,14-14">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function CoffeeMachine(power) {
  this.waterAmount = 0;

  var WATER_HEAT_CAPACITY = 4200;

  var getBoilTime = function() {
    return this.waterAmount * WATER_HEAT_CAPACITY * 80 / power;
  }.bind(this);

  function onReady() {
    alert( 'Кофе готов!' );
  }

  this.run = function() {
    setTimeout(onReady, getBoilTime());
  };

}

var coffeeMachine = new CoffeeMachine(100000);
coffeeMachine.waterAmount = 200;

coffeeMachine.run();</code></pre>
        </div>
      </div>
      
      </div><p>Это решение будет работать, теперь функцию можно просто вызывать без <code>call</code>. Но объявление функции стало менее красивым.</p>
<h3><a class="main__anchor" name="сохранение-this-в-замыкании" href="#сохранение-this-в-замыкании">Сохранение this в замыкании</a></h3><p>Пожалуй, самый удобный и часто применяемый путь решения состоит в том, чтобы предварительно скопировать <code>this</code> во вспомогательную переменную и обращаться из внутренних функций уже к ней.</p>
<p>Вот так:</p>
<div data-trusted="1" class="code-example" data-highlight-block="5-9">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function CoffeeMachine(power) {
  this.waterAmount = 0;

  var WATER_HEAT_CAPACITY = 4200;

  var self = this;

  function getBoilTime() {
      return self.waterAmount * WATER_HEAT_CAPACITY * 80 / power;
    }

  function onReady() {
    alert( 'Кофе готов!' );
  }

  this.run = function() {
    setTimeout(onReady, getBoilTime());
  };

}

var coffeeMachine = new CoffeeMachine(100000);
coffeeMachine.waterAmount = 200;

coffeeMachine.run();</code></pre>
        </div>
      </div>
      
      </div><p>Теперь <code>getBoilTime</code> получает <code>self</code> из замыкания.</p>
<p><strong>Конечно, чтобы это работало, мы не должны изменять <code>self</code>, а все приватные методы, которые хотят иметь доступ к текущему объекту, должны использовать внутри себя <code>self</code> вместо <code>this</code>.</strong></p>
<p>Вместо <code>self</code> можно использовать любое другое имя переменной, например <code>var me = this</code>.</p>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><p>Итак, мы сделали кофеварку с публичными и приватными методами и заставили их корректно работать.</p>
<p>В терминологии ООП отделение и защита внутреннего интерфейса называется <a href="http://ru.wikipedia.org/wiki/%D0%98%D0%BD%D0%BA%D0%B0%D0%BF%D1%81%D1%83%D0%BB%D1%8F%D1%86%D0%B8%D1%8F_%28%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%29">инкапсуляция</a>.</p>
<p>Кратко перечислим бонусы, которые она даёт:</p>
<dl>
<dt>Защита пользователей от выстрела себе в ногу</dt>
<dd>
<p>Представьте, команда разработчиков пользуется кофеваркой. Кофеварка создана фирмой «Лучшие Кофеварки» и, в общем, работает хорошо, но с неё сняли защитный кожух и, таким образом, внутренний интерфейс стал доступен.</p>
<p>Все разработчики цивилизованны – и пользуются кофеваркой как обычно. Но хитрый Вася решил, что он самый умный, и подкрутил кое-что внутри кофеварки, чтобы кофе заваривался покрепче. Вася не знал, что те изменения, которые он произвёл, приведут к тому, что кофеварка испортится через два дня.</p>
<p>Виноват, разумеется, не только Вася, но и тот, кто снял защитный кожух с кофеварки, и тем самым позволил Васе проводить манипуляции.</p>
<p>В программировании – то же самое. Если пользователь объекта будет менять то, что не рассчитано на изменение снаружи – последствия могут быть непредсказуемыми.</p>
</dd>
<dt>Удобство в поддержке</dt>
<dd>
<p>Ситуация в программировании сложнее, чем с кофеваркой, т.к. кофеварку один раз купили и всё, а программа может улучшаться и дорабатываться.</p>
<p><strong>При наличии чётко выделенного внешнего интерфейса, разработчик может свободно менять внутренние свойства и методы, без оглядки на коллег.</strong></p>
<p>Гораздо легче разрабатывать, если знаешь, что ряд методов (все внутренние) можно переименовывать, менять их параметры, и вообще, переписать как угодно, так как внешний код к ним абсолютно точно не обращается.</p>
<p>Ближайшая аналогия в реальной жизни – это когда выходит «новая версия» кофеварки, которая работает гораздо лучше. Разработчик мог переделать всё внутри, но пользоваться ей по-прежнему просто, так как внешний интерфейс сохранён.</p>
</dd>
<dt>Управление сложностью</dt>
<dd>
<p>Люди обожают пользоваться вещами, которые просты с виду. А что внутри – дело десятое.</p>
<p>Программисты здесь не исключение.</p>
<p><strong>Всегда удобно, когда детали реализации скрыты, и доступен простой, понятно документированный внешний интерфейс.</strong></p>
</dd>
</dl>
</div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#добавить-метод-и-свойство-кофеварке" name="добавить-метод-и-свойство-кофеварке" class="main__anchor">Добавить метод и свойство кофеварке</a></h3><a href="task/add-method-property-coffeemachine.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Улучшите готовый код кофеварки, который дан ниже: добавьте в кофеварку <em>публичный</em> метод <code>stop()</code>, который будет останавливать кипячение (через <code>clearTimeout</code>).</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function CoffeeMachine(power) {
  this.waterAmount = 0;

  var WATER_HEAT_CAPACITY = 4200;

  var self = this;

  function getBoilTime() {
    return self.waterAmount * WATER_HEAT_CAPACITY * 80 / power;
  }

  function onReady() {
    alert( 'Кофе готово!' );
  }

  this.run = function() {
    setTimeout(onReady, getBoilTime());
  };

}</code></pre>
        </div>
      </div>
      
      </div><p>Вот такой код должен ничего не выводить:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var coffeeMachine = new CoffeeMachine(50000);
coffeeMachine.waterAmount = 200;

coffeeMachine.run();
coffeeMachine.stop(); // кофе приготовлен не будет</code></pre>
        </div>
      </div>
      
      </div><p>P.S. Текущую температуру воды вычислять и хранить не требуется.</p>
<p>P.P.S. При решении вам, скорее всего, понадобится добавить <em>приватное</em> свойство <code>timerId</code>, которое будет хранить текущий таймер.</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Кофеварка с новым методом:</p>
<div data-trusted="1" class="code-example" data-highlight-block="4-4,16-16,19-21">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function CoffeeMachine(power) {
  this.waterAmount = 0;

  var WATER_HEAT_CAPACITY = 4200;
  var timerId;
  var self = this;

  function getBoilTime() {
    return self.waterAmount * WATER_HEAT_CAPACITY * 80 / power;
  }

  function onReady() {
    alert( 'Кофе готово!' );
  }

  this.run = function() {
    timerId = setTimeout(onReady, getBoilTime());
  };

  this.stop = function() {
    clearTimeout(timerId)
  };
}

var coffeeMachine = new CoffeeMachine(50000);
coffeeMachine.waterAmount = 200;

coffeeMachine.run();
coffeeMachine.stop(); // кофе приготовлен не будет</code></pre>
        </div>
      </div>
      
      </div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>