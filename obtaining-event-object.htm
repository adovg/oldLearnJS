<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="ui.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Документ, события, интерфейсы</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="events-and-interfaces.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Основы работы с событиями</span></a></li></ol><h1 class="main__header-title">Объект события</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Объект события"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Чтобы хорошо обработать событие, недостаточно знать о том, что это – «клик» или «нажатие клавиши». Могут понадобиться детали: координаты курсора, введённый символ и другие, в зависимости от события.</p>
<p>Детали произошедшего браузер записывает в «объект события», который передаётся первым аргументом в обработчик.</p>
<h2><a class="main__anchor" name="свойства-объекта-события" href="#свойства-объекта-события">Свойства объекта события</a></h2><p>Пример ниже демонстрирует использование объекта события:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="3:26-31">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input type=&quot;button&quot; value=&quot;Нажми меня&quot; id=&quot;elem&quot;&gt;

&lt;script&gt;
  elem.onclick = function(event) {
    // вывести тип события, элемент и координаты клика
    alert(event.type + &quot; на &quot; + event.currentTarget);
    alert(event.clientX + &quot;:&quot; + event.clientY);
  }
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Свойства объекта <code>event</code>:</p>
<dl>
<dt><code>event.type</code></dt>
<dd>Тип события, в данном случае <code>click</code></dd>
<dt><code>event.currentTarget</code></dt>
<dd>Элемент, на котором сработал обработчик. Значение – в точности такое же, как и у <code>this</code>, но бывают ситуации, когда обработчик является методом объекта и его <code>this</code> при помощи <code>bind</code> привязан к этому объекту, тогда мы можем использовать <code>event.currentTarget</code>.</dd>
<dt><code>event.clientX / event.clientY</code></dt>
<dd>Координаты курсора в момент клика (относительно окна)</dd>
</dl>
<p>Есть также и ряд других свойств, в зависимости от событий, которые мы разберём в дальнейших главах, когда будем подробно знакомиться с событиями мыши, клавиатуры и так далее.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Объект события доступен и в HTML</span></div>
            <div class="important__content"><p>При назначении обработчика в HTML, тоже можно использовать переменную <code>event</code>, это будет работать кросс-браузерно:</p>
<div data-trusted="1" class="code-example" data-demo-height="60" data-autorun="true" data-highlight-inline="0:30-47">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input type=&quot;button&quot; onclick=&quot;alert(event.type)&quot; value=&quot;Тип события&quot;&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-fvw8u3"
          style="height:60px"
          src="about:blank"></iframe>
      </div>
      </div><p>Это возможно потому, что когда браузер из атрибута создаёт функцию-обработчик, то она выглядит так: <code>function(event) { alert(event.type) }</code>. То есть, её первый аргумент называется <code>&quot;event&quot;</code>.</p>
</div></div>
<h2><a class="main__anchor" name="особенности-ie8" href="#особенности-ie8">Особенности IE8-</a></h2><p>IE8- вместо передачи параметра обработчику создаёт глобальный объект <code>window.event</code>. Обработчик может обратиться к нему.</p>
<p>Работает это так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">elem.onclick = function() {
  // window.event - объект события
  alert( window.event.clientX );
};</code></pre>
        </div>
      </div>
      
      </div><h3><a class="main__anchor" name="кроссбраузерное-решение" href="#кроссбраузерное-решение">Кроссбраузерное решение</a></h3><p>Универсальное решение для получения объекта события:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">element.onclick = function(event) {
  event = event || window.event; // (*)

  // Теперь event - объект события во всех браузерах.
};</code></pre>
        </div>
      </div>
      
      </div><p>Строка <code>(*)</code>, в случае, если функция не получила <code>event</code> (IE8-), использует <code>window.event</code>.-событие <code>event</code>.</p>
<p>Можно написать и иначе, если мы сами не используем переменную <code>event</code> в замыкании:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">element.onclick = function(e) {
  e = e || event;

  // Теперь e - объект события во всех браузерах.
};</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><ul>
<li>Объект события содержит ценную информацию о деталях события.</li>
<li>Он передается первым аргументом <code>event</code> в обработчик для всех браузеров, кроме IE8-, в которых используется глобальная переменная <code>window.event</code>.</li>
</ul>
<p>Кросс-браузерно для JavaScript-обработчика получаем объект события так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">element.onclick = function(event) {
  event = event || window.event;

  // Теперь event - объект события во всех браузерах.
};</code></pre>
        </div>
      </div>
      
      </div><p>Еще вариант:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">element.onclick = function(e) {
  e = e || event; // если нет другой внешней переменной event
  ...
};</code></pre>
        </div>
      </div>
      
      </div></div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#передвигать-мяч-по-полю" name="передвигать-мяч-по-полю" class="main__anchor">Передвигать мяч по полю</a></h3><a href="task/move-ball-field.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Сделайте так, что при клике по полю мяч перемещался на место клика.</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"><div class="toolbar__tool">
        <a href="https://js.cx/task/move-ball-field/solution/" target="_blank" title="открыть в новом окне" class="toolbar__button toolbar__button_external"></a>
      </div>
      </div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:260px" src="https://js.cx/task/move-ball-field/solution/"></iframe>
  </div><p>Требования:</p>
<ul>
<li>Мяч после перелёта должен становиться центром ровно под курсор мыши, если это возможно без вылета за край поля.</li>
<li>CSS-анимация не обязательна, но желательна.</li>
<li>Мяч должен останавливаться у границ поля, ни в коем случае не вылетать за них.</li>
<li>При прокрутке страницы с полем ничего не должно ломаться.</li>
</ul>
<p>Замечания:</p>
<ul>
<li>Код не должен зависеть от конкретных размеров мяча и поля.</li>
<li>Вам пригодятся свойства <code>event.clientX/event.clientY</code></li>
</ul>
<p><a href="http://plnkr.co/edit/g3uEiMDLnIII9I9MCmlA?p=preview" target="_blank" data-plunk-id="g3uEiMDLnIII9I9MCmlA">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__step"><button type="button" class="task__step-show">Мяч под курсор мыши</button><div class="task__answer-content"><h4 class="task__step-title">Мяч под курсор мыши</h4><p>Основная сложность первого этапа – сдвинуть мяч под курсор, т.к. координаты клика <code>e.clientX/Y</code> – относительно окна, а мяч позиционирован абсолютно внутри поля, его координаты <code>left/top</code> нужно ставить относительно левого-верхнего внутреннего (внутри рамки!) угла поля.</p>
<p>Чтобы правильно вычислить координаты мяча, нужно получить координаты угла поля и вычесть их из <code>clientX/Y</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="5-12">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var field = document.getElementById('field');
var ball = document.getElementById('ball');

field.onclick = function(e) {

  var fieldCoords = field.getBoundingClientRect();
  var fieldInnerCoords = {
    top: fieldCoords.top + field.clientTop,
    left: fieldCoords.left + field.clientLeft
  };

  ball.style.left = e.clientX - fieldInnerCoords.left + 'px';
  ball.style.top = e.clientY - fieldInnerCoords.top + 'px';

};</code></pre>
        </div>
      </div>
      
      </div><p>Далее мяч нужно сдвинуть на половину его ширины и высоты <code>ball.clientWidth/clientHeight</code>, чтобы он оказался центром под курсором.</p>
<p>Здесь есть важный «подводный камень» – размеры мяча в исходном документе не прописаны. Там просто стоит <code>&lt;img&gt;</code>. Но на момент выполнения JavaScript картинка, возможно, ещё не загрузилась, так что высота и ширина мяча будут неизвестны (а они необходимы для центрирования).</p>
<p>Нужно добавить <code>width/height</code> в тег <code>&lt;img&gt;</code> или задать размеры в CSS, тогда на момент выполнения JavaScript будет знать их и передвинет мяч правильно.</p>
<p>Код, который полностью центрирует мяч, вы найдете в полном решении:</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"><div class="toolbar__tool">
        <a href="https://js.cx/task/move-ball-field/solution/" target="_blank" title="открыть в новом окне" class="toolbar__button toolbar__button_external"></a>
      </div>
      <div class="toolbar__tool">
        <a href="http://plnkr.co/edit/CUhT9NpPsZOQtKatIyfk?p=preview" target="_blank" title="открыть в песочнице"
        data-plunk-id="CUhT9NpPsZOQtKatIyfk" class="toolbar__button toolbar__button_edit"></a>
      </div>
      </div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:260px" src="https://js.cx/task/move-ball-field/solution/"></iframe>
  </div><p><a href="http://plnkr.co/edit/CUhT9NpPsZOQtKatIyfk?p=preview" target="_blank" data-plunk-id="CUhT9NpPsZOQtKatIyfk">Открыть решение в песочнице.</a></p></div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>