<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="animation.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Анимация</span></a></li></ol><h1 class="main__header-title">Кривые Безье</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Кривые Безье"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Кривые Безье используются в компьютерной графике для рисования плавных изгибов, в CSS-анимации и много где ещё.</p>
<p>Несмотря на «умное» название – это очень простая штука.</p>
<p>В принципе, можно создавать анимацию и без знания кривых Безье, но стоит один раз изучить эту тему хотя бы для того, чтобы в дальнейшем с комфортом пользоваться этим замечательным инструментом. Тем более что в мире векторной графики и продвинутых анимаций без них никак.</p>
<h2><a class="main__anchor" name="виды-кривых-безье" href="#виды-кривых-безье">Виды кривых Безье</a></h2><p><a href="http://ru.wikipedia.org/wiki/%D0%9A%D1%80%D0%B8%D0%B2%D0%B0%D1%8F_%D0%91%D0%B5%D0%B7%D1%8C%D0%B5">Кривая Безье</a> задаётся опорными точками.</p>
<p>Их может быть две, три, четыре или больше. Например:</p>
<p>По двум точкам:</p>
<figure><div class="image" style="width:149px">
      <div class="image__ratio" style="padding-top:125.503355704698%"></div>
      <img src="article/bezier/bezier2.png" alt="" width="149" height="187" class="image__image">
      </div></figure><p>По трём точкам:</p>
<figure><div class="image" style="width:149px">
      <div class="image__ratio" style="padding-top:125.503355704698%"></div>
      <img src="article/bezier/bezier3.png" alt="" width="149" height="187" class="image__image">
      </div></figure><p>По четырём точкам:</p>
<figure><div class="image" style="width:149px">
      <div class="image__ratio" style="padding-top:125.503355704698%"></div>
      <img src="article/bezier/bezier4.png" alt="" width="149" height="187" class="image__image">
      </div></figure><p>Если вы посмотрите внимательно на эти кривые, то «на глазок» заметите:</p>
<ol>
<li>
<p><strong>Точки не всегда на кривой.</strong> Это совершенно нормально, как именно строится кривая мы рассмотрим чуть позже.</p>
</li>
<li>
<p><strong>Степень кривой равна числу точек минус один</strong>.
Для двух точек – это линейная кривая (т.е. прямая), для трёх точек – квадратическая кривая (парабола), для четырёх – кубическая.</p>
</li>
<li>
<p><strong>Кривая всегда находится внутри <a href="http://ru.wikipedia.org/wiki/%D0%92%D1%8B%D0%BF%D1%83%D0%BA%D0%BB%D0%B0%D1%8F_%D0%BE%D0%B1%D0%BE%D0%BB%D0%BE%D1%87%D0%BA%D0%B0">выпуклой оболочки</a>, образованной опорными точками:</strong></p>
<p><img src="article/bezier/bezier4-e.png" alt="" width="149" height="187"> <img src="article/bezier/bezier3-e.png" alt="" width="149" height="187"></p>
<p>Благодаря последнему свойству в компьютерной графике можно оптимизировать проверку пересечений двух кривых. Если их выпуклые оболочки не пересекаются, то и кривые тоже не пересекутся.</p>
</li>
</ol>
<p>Основная ценность кривых Безье для рисования – в том, что, двигая точки, кривую можно менять, причём кривая при этом <em>меняется интуитивно понятным образом</em>.</p>
<p>Попробуйте двигать точки мышью в примере ниже:</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:370px" src="https://js.cx/article/bezier/demo.svg?nocpath=1&p=0,0,0.5,0,0.5,1,1,1"></iframe>
  </div><p><strong>Как можно заметить, кривая натянута по касательным 1 → 2 и 3 → 4.</strong></p>
<p>После небольшой практики становится понятно, как расположить точки, чтобы получить нужную форму. А, соединяя несколько кривых, можно получить практически что угодно.</p>
<p>Вот некоторые примеры:</p>
<p><img src="article/bezier/bezier-car.png" alt="" width="260" height="130"> <img src="article/bezier/bezier-letter.png" alt="" width="166" height="173"> <img src="article/bezier/bezier-vase.png" alt="" width="110" height="170"></p>
<h2><a class="main__anchor" name="математика" href="#математика">Математика</a></h2><p>У кривых Безье есть математическая формула.</p>
<p>Как мы увидим далее, для пользования кривыми Безье знать её нет особенной необходимости, но для полноты картины – вот она.</p>
<p><strong>Координаты кривой описываются в зависимости от параметра <code>t⋲[0,1]</code></strong></p>
<ul>
<li>
<p>Для двух точек:</p>
<p><code>P = (1-t)P<sub>1</sub> + tP<sub>2</sub></code></p>
</li>
<li>
<p>Для трёх точек:</p>
<p><code>P = (1−t)<sup>2</sup>P<sub>1</sub> + 2(1−t)tP<sub>2</sub> + t<sup>2</sup>P<sub>3</sub></code></p>
</li>
<li>
<p>Для четырёх точек:</p>
<p><code>P = (1−t)<sup>3</sup>P<sub>1</sub> + 3(1−t)<sup>2</sup>tP<sub>2</sub>  +3(1−t)t<sup>2</sup>P<sub>3</sub> + t<sup>3</sup>P<sub>4</sub></code></p>
</li>
</ul>
<p>Вместо <code>P<sub>i</sub></code>  нужно подставить координаты i-й опорной точки <code>(x<sub>i</sub>, y<sub>i</sub>)</code>.</p>
<p>Эти уравнения векторные, то есть для каждой из координат:</p>
<ul>
<li><code>x = (1−t)<sup>2</sup>x<sub>1</sub> + 2(1−t)tx<sub>2</sub> + t<sup>2</sup>x<sub>3</sub></code></li>
<li><code>y = (1−t)<sup>2</sup>y<sub>1</sub> + 2(1−t)ty<sub>2</sub> + t<sup>2</sup>y<sub>3</sub></code></li>
</ul>
<p>Вместо <code>x<sub>1</sub>, y<sub>1</sub>, x<sub>2</sub>, y<sub>2</sub>, x<sub>3</sub>, y<sub>3</sub></code> подставляются координаты трёх опорных точек, и в то время как <code>t</code> пробегает множество от <code>0</code> до <code>1</code>, соответствующие значения <code>(x, y)</code> как раз и образуют кривую.</p>
<p>Впрочем, это чересчур наукообразно, не очень понятно, почему кривые именно такие, и как зависят от опорных точек. С этим нам поможет разобраться другой, более наглядный алгоритм.</p>
<h2><a class="main__anchor" name="рисование-де-кастельжо" href="#рисование-де-кастельжо">Рисование «де Кастельжо»</a></h2><p><a href="http://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%B4%D0%B5_%D0%9A%D0%B0%D1%81%D1%82%D0%B5%D0%BB%D1%8C%D0%B6%D0%BE">Метод де Кастельжо</a> идентичен математическому определению кривой и наглядно показывает, как она строится.</p>
<p>Посмотрим его на примере трёх точек (точки можно двигать). Нажатие на кнопку «play» запустит демонстрацию.</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:370px" src="https://js.cx/article/bezier/demo.svg?p=0,0,0.5,1,1,0&animate=1"></iframe>
  </div><p><strong>Алгоритм построения кривой по «методу де Кастельжо»:</strong></p>
<ol>
<li>
<p>Рисуем опорные точки. В примере выше это <code>1</code>, <code>2</code>, <code>3</code>.</p>
</li>
<li>
<p>Строятся отрезки между опорными точками 1 → 2 → 3. На рисунке выше они <span style="color:#825E28">коричневые</span>.</p>
</li>
<li>
<p>Параметр <code>t</code> пробегает значения от <code>0</code> до <code>1</code>. В примере выше использован шаг <code>0.05</code>, т.е. в цикле <code>0, 0.05, 0.1, 0.15, ... 0.95, 1</code>.</p>
<p>Для каждого из этих значений <code>t</code>:</p>
<ul>
<li>
<p>На каждом из <span style="color:#825E28">коричневых</span> отрезков берётся точка, находящаяся от начала на расстоянии от 0 до <code>t</code> пропорционально длине.  Так как коричневых отрезков – два, то и точек две штуки.</p>
<p>Например, при <code>t=0</code> – точки будут в начале, при <code>t=0.25</code> – на расстоянии в 25% от начала отрезка, при <code>t=0.5</code> – 50%(на середине), при <code>t=1</code> – в конце отрезков.</p>
</li>
<li>
<p>Эти точки соединяются. На рисунке ниже соединяющий их отрезок изображён <span style="color:blue">синим</span>.</p>
</li>
</ul>
</li>
</ol>
<table>
<thead>
<tr>
<th>При <code>t=0.25</code></th>
<th>При <code>t=0.5</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="article/bezier/bezier3-draw1.png" alt="" width="340" height="350"></td>
<td><img src="article/bezier/bezier3-draw2.png" alt="" width="340" height="350"></td>
</tr>
</tbody>
</table>
<ol start="4">
<li>
<p>На <span style="color:blue">получившемся</span> отрезке берётся точка на расстоянии, соответствующем <code>t</code>. То есть, для <code>t=0.25</code> (первый рисунок) получаем точку в конце первой четверти отрезка, для <code>t=0.5</code> (второй рисунок) – в середине отрезка. На рисунках выше эта точка отмечена <span style="color:red">красным</span>.</p>
</li>
<li>
<p>По мере того как <code>t</code> пробегает последовательность от <code>0</code> до <code>1</code>, каждое значение <code>t</code> добавляет к красной кривой точку. <strong>Совокупность таких точек для всех значений <code>t</code> образуют кривую Безье.</strong></p>
</li>
</ol>
<p>Это был процесс для построения по трём точкам. Но то же самое происходит и с четырьмя точками.</p>
<p>Демо для четырёх точек (точки можно двигать):</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:370px" src="https://js.cx/article/bezier/demo.svg?p=0,0,0.5,0,0.5,1,1,1&animate=1"></iframe>
  </div><p>Алгоритм:</p>
<ul>
<li>Точки по порядку соединяются отрезками: 1 → 2, 2 → 3, 3 → 4. Получается три коричневых отрезка.</li>
<li>На отрезках берутся точки, соответствующие текущему <code>t</code>, соединяются. Получается два <span style="color:#0A0">зелёных отрезка</span>.</li>
<li>На этих отрезках берутся точки, соответствующие текущему <code>t</code>, соединяются. Получается один <span style="color:blue">синий отрезок</span>.</li>
<li>На синем отрезке берётся точка, соответствующая текущему <code>t</code>. При запуске примера выше она <span style="color:red">красная</span>.</li>
<li>Эти точки описывают кривую.</li>
</ul>
<p>Этот алгоритм рекурсивен. Для каждого <code>t</code> из интервала от <code>0</code> до <code>1</code> по этому правилу, соединяя точки на соответствующем расстоянии, из 4 отрезков делается 3, затем из 3 так же делается 2, затем из 2 отрезков – точка, описывающая кривую для данного значения <code>t</code>.</p>
<p>Нажмите на кнопку «play» в примере выше, чтобы увидеть это в действии.</p>
<p>Ещё примеры кривых:</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:370px" src="https://js.cx/article/bezier/demo.svg?p=0,0,0,0.75,0.25,1,1,1&animate=1"></iframe>
  </div><p>С другими точками:</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:370px" src="https://js.cx/article/bezier/demo.svg?p=0,0,1,0.5,0,0.5,1,1&animate=1"></iframe>
  </div><p>Петелька:</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:370px" src="https://js.cx/article/bezier/demo.svg?p=0,0,1,0.5,0,1,0.5,0&animate=1"></iframe>
  </div><p>Пример негладкой кривой Безье:</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:370px" src="https://js.cx/article/bezier/demo.svg?p=0,0,1,1,0,1,1,0&animate=1"></iframe>
  </div><p>Так как алгоритм рекурсивен, то аналогичным образом могут быть построены кривые Безье и более высокого порядка: по пяти точкам, шести и так далее. Однако на практике они менее полезны. Обычно используются 2-3 точки, а для сложных линий несколько кривых соединяются. Это гораздо проще с точки зрения поддержки и расчётов.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Как провести кривую Безье <em>через</em> нужные точки?</span></div>
            <div class="important__content"><p>В задаче построения кривой Безье используются «опорные точки». Они, как можно видеть из примеров выше, не лежат на кривой. Точнее говоря, только первая и последняя лежат на кривой, а промежуточные – нет.</p>
<p>Иногда возникает другая задача: провести кривую именно <em>через нужные точки</em>, чтобы все они лежали на некой плавной кривой, удовлетворяющей определённым требованиям. Такая задача называется <a href="http://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D0%BF%D0%BE%D0%BB%D1%8F%D1%86%D0%B8%D1%8F">интерполяцией</a>, и здесь мы её не рассматриваем.</p>
<p>Существуют математические формулы для таких построений, например <a href="http://ru.wikipedia.org/wiki/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D0%BF%D0%BE%D0%BB%D1%8F%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D1%8B%D0%B9_%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE%D1%87%D0%BB%D0%B5%D0%BD_%D0%9B%D0%B0%D0%B3%D1%80%D0%B0%D0%BD%D0%B6%D0%B0">многочлен Лагранжа</a>.</p>
<p>Как правило, в компьютерной графике для построения плавных кривых, проходящих через несколько точек, используют кубические кривые, плавно переходящие одна в другую. Это называется <a href="http://ru.wikipedia.org/wiki/%D0%9A%D1%83%D0%B1%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D1%81%D0%BF%D0%BB%D0%B0%D0%B9%D0%BD">интерполяция сплайнами</a>.</p>
</div></div>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><p>Кривые Безье задаются опорными точками.</p>
<p>Мы рассмотрели два определения кривых:</p>
<ol>
<li>Через математическую формулу.</li>
<li>Через процесс построения де Кастельжо.</li>
</ol>
<p>Их удобство в том, что:</p>
<ul>
<li>Можно легко нарисовать плавные линии вручную, передвигая точки мышкой.</li>
<li>Более сложные изгибы и линии можно составить, если соединить несколько кривых Безье.</li>
</ul>
<p>Применение:</p>
<ul>
<li>В компьютерной графике, моделировании, в графических редакторах. Шрифты описываются с помощью кривых Безье.</li>
<li>В веб-разработке – для графики на Canvas или в формате SVG. Кстати, все живые примеры выше написаны на SVG. Фактически, это один SVG-документ, к которому точки передаются параметрами. Вы можете открыть его в отдельном окне и посмотреть исходник: <a href="article/bezier/demo.svg@p=0,0,1,0.5,0,0.5,1,1&animate=1.xml">demo.svg</a>.</li>
<li>В CSS-анимации, для задания траектории или скорости передвижения.</li>
</ul>
</div></article></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>