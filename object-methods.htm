<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="js.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Язык JavaScript</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="objects-more.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Методы объектов и контекст вызова</span></a></li></ol><h1 class="main__header-title">Методы объектов, this</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Методы объектов, this"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>До этого мы говорили об объекте лишь как о хранилище значений. Теперь пойдём дальше и поговорим об объектах как о сущностях со своими функциями («методами»).</p>
<h2><a class="main__anchor" name="методы-у-объектов" href="#методы-у-объектов">Методы у объектов</a></h2><p>При объявлении объекта можно указать свойство-функцию, например:</p>
<div data-trusted="1" class="code-example" data-highlight-block="3-3,10-11">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = {
  name: 'Василий',

  // метод
  sayHi: function() {
    alert( 'Привет!' );
  }

};

// Вызов
user.sayHi();</code></pre>
        </div>
      </div>
      
      </div><p>Свойства-функции называют «методами» объектов. Их можно добавлять и удалять в любой момент, в том числе и явным присваиванием:</p>
<div data-trusted="1" class="code-example" data-highlight-block="4-6" data-highlight-inline="9:0-13">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = {
  name: 'Василий'
};

user.sayHi = function() { // присвоили метод после создания объекта
  alert('Привет!');
};

// Вызов метода:
user.sayHi();</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="доступ-к-объекту-через-this" href="#доступ-к-объекту-через-this">Доступ к объекту через this</a></h2><p>Для полноценной работы метод должен иметь доступ к данным объекта. В частности, вызов <code>user.sayHi()</code> может захотеть вывести имя пользователя.</p>
<p><strong>Для доступа к текущему объекту из метода используется ключевое слово <code>this</code></strong>.</p>
<p>Значением <code>this</code> является объект перед «точкой», в контексте которого вызван метод, например:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="4:11-20">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = {
  name: 'Василий',

  sayHi: function() {
    alert( this.name );
  }
};

user.sayHi(); // sayHi в контексте user</code></pre>
        </div>
      </div>
      
      </div><p>Здесь при выполнении функции <code>user.sayHi()</code> в <code>this</code> будет храниться ссылка на текущий объект <code>user</code>.</p>
<p>Вместо <code>this</code> внутри <code>sayHi</code> можно было бы обратиться к объекту, используя переменную <code>user</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="2:11-20">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">...
  sayHi: function() {
    alert( user.name );
  }
...</code></pre>
        </div>
      </div>
      
      </div><p>…Однако, такое решение нестабильно. Если мы решим скопировать объект в другую переменную, например <code>admin = user</code>, а в переменную <code>user</code> записать что-то другое – обращение будет совсем не по адресу:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="4:11-20">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = {
  name: 'Василий',

  sayHi: function() {
    alert( user.name ); // приведёт к ошибке
  }
};

var admin = user;
user = null;

admin.sayHi(); // упс! внутри sayHi обращение по старому имени, ошибка!</code></pre>
        </div>
      </div>
      
      </div><p>Использование <code>this</code> гарантирует, что функция работает именно с тем объектом, в контексте которого вызвана.</p>
<p>Через <code>this</code> метод может не только обратиться к любому свойству объекта, но и передать куда-то ссылку на сам объект целиком:</p>
<div data-trusted="1" class="code-example" data-highlight-block="3-5">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = {
  name: 'Василий',

  sayHi: function() {
    showName(this); // передать текущий объект в showName
  }
};

function showName(namedObj) {
  alert( namedObj.name );
}

user.sayHi(); // Василий</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="подробнее-про-this" href="#подробнее-про-this">Подробнее про this</a></h2><p>Любая функция может иметь в себе <code>this</code>. Совершенно неважно, объявлена ли она в объекте или отдельно от него.</p>
<p>Значение <code>this</code> называется <em>контекстом вызова</em> и будет определено в момент вызова функции.</p>
<p>Например, такая функция, объявленная без объекта, вполне допустима:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="1:9-23">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function sayHi() {
  alert( this.firstName );
}</code></pre>
        </div>
      </div>
      
      </div><p>Эта функция ещё не знает, каким будет <code>this</code>. Это выяснится при выполнении программы.</p>
<p><strong>Если одну и ту же функцию запускать в контексте разных объектов, она будет получать разный <code>this</code>:</strong></p>
<div data-trusted="1" class="code-example" data-highlight-block="10-13">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = { firstName: &quot;Вася&quot; };
var admin = { firstName: &quot;Админ&quot; };

function func() {
  alert( this.firstName );
}

user.f = func;
admin.g = func;

// this равен объекту перед точкой:
user.f(); // Вася
admin.g(); // Админ
admin['g'](); // Админ (не важно, доступ к объекту через точку или квадратные скобки)</code></pre>
        </div>
      </div>
      
      </div><p>Итак, значение <code>this</code> не зависит от того, как функция была создана, оно определяется исключительно в момент вызова.</p>
<h2><a class="main__anchor" name="значение-this-при-вызове-без-контекста" href="#значение-this-при-вызове-без-контекста">Значение this при вызове без контекста</a></h2><p>Если функция использует <code>this</code> – это подразумевает работу с объектом. Но и прямой вызов <code>func()</code> технически возможен.</p>
<p>Как правило, такая ситуация возникает при ошибке в разработке.</p>
<p>При этом <code>this</code> получает значение <code>window</code>, глобального объекта:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function func() {
  alert( this ); // выведет [object Window] или [object global]
}

func();</code></pre>
        </div>
      </div>
      
      </div><p>Таково поведение в старом стандарте.</p>
<p>А в режиме <code>use strict</code> вместо глобального объекта <code>this</code> будет <code>undefined</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function func() {
  &quot;use strict&quot;;
  alert( this ); // выведет undefined (кроме IE9-)
}

func();</code></pre>
        </div>
      </div>
      
      </div><p>Обычно если в функции используется <code>this</code>, то она, всё же, служит для вызова в контексте объекта, так что такая ситуация – скорее исключение.</p>
<h2><a class="main__anchor" name="ссылочный-тип" href="#ссылочный-тип">Ссылочный тип</a></h2><p>Контекст <code>this</code> никак не привязан к функции, даже если она создана в объявлении объекта. Чтобы <code>this</code> передался, нужно вызвать функцию именно через точку (или квадратные скобки).</p>
<p>Любой более хитрый вызов приведёт к потере контекста, например:</p>
<div data-trusted="1" class="code-example" data-highlight-block="8-9">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = {
  name: &quot;Вася&quot;,
  hi: function() { alert(this.name); },
  bye: function() { alert(&quot;Пока&quot;); }
};

user.hi(); // Вася (простой вызов работает)

// а теперь вызовем user.hi или user.bye в зависимости от имени
(user.name == &quot;Вася&quot; ? user.hi : user.bye)(); // undefined</code></pre>
        </div>
      </div>
      
      </div><p>В последней строке примера метод получен в результате выполнения тернарного оператора и тут же вызван. Но <code>this</code> при этом теряется.</p>
<p>Если хочется понять, почему, то причина кроется в деталях работы вызова <code>obj.method()</code>.</p>
<p>Он ведь, на самом деле, состоит из двух независимых операций: точка <code>.</code> – получение свойства и скобки <code>()</code> – его вызов (предполагается, что это функция).</p>
<p>Функция, как мы говорили раньше, сама по себе не запоминает контекст. Чтобы «донести его» до скобок, JavaScript применяет «финт ушами» – точка возвращает не функцию, а значение специального «ссылочного» типа <a href="https://tc39.github.io/ecma262/#sec-reference-specification-type">Reference Type</a>.</p>
<p>Этот тип представляет собой связку «base-name-strict», где:</p>
<ul>
<li><em>base</em> – как раз объект,</li>
<li><em>name</em> – имя свойства,</li>
<li><em>strict</em> – вспомогательный флаг для передачи <code>use strict</code>.</li>
</ul>
<p>То есть, ссылочный тип (Reference Type) – это своеобразное «три-в-одном». Он существует исключительно для целей спецификации, мы его не видим, поскольку любой оператор тут же от него избавляется:</p>
<ul>
<li>Скобки <code>()</code> получают из <code>base</code> значение свойства <code>name</code> и вызывают в контексте base.</li>
<li>Другие операторы получают из <code>base</code> значение свойства <code>name</code> и используют, а остальные компоненты игнорируют.</li>
</ul>
<p>Поэтому любая операция над результатом операции получения свойства, кроме вызова, приводит к потере контекста.</p>
<p>Аналогично работает и получение свойства через квадратные скобки <code>obj[method]</code>.</p>
</div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#вызов-в-контексте-массива" name="вызов-в-контексте-массива" class="main__anchor">Вызов в контексте массива</a></h3><a href="task/call-array-this.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Каким будет результат? Почему?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [&quot;a&quot;, &quot;b&quot;];

arr.push(function() {
  alert( this );
})

arr[2](); // ?</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Вызов <code>arr[2]()</code> – это обращение к методу объекта <code>obj[method]()</code>, в роли <code>obj</code> выступает <code>arr</code>, а в роли метода: <code>2</code>.</p>
<p>Поэтому, как это бывает при вызове функции как метода, функция <code>arr[2]</code> получит <code>this = arr</code> и выведет массив:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [&quot;a&quot;, &quot;b&quot;];

arr.push(function() {
  alert( this );
})

arr[2](); // &quot;a&quot;,&quot;b&quot;,function</code></pre>
        </div>
      </div>
      
      </div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#проверка-синтаксиса" name="проверка-синтаксиса" class="main__anchor">Проверка синтаксиса</a></h3><a href="task/check-syntax.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 2</span></div><div class="task__content"><p>Каков будет результат этого кода?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var obj = {
  go: function() { alert(this) }
}

(obj.go)()</code></pre>
        </div>
      </div>
      
      </div><p>P.S. Есть подвох :)</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p><strong>Ошибка</strong>!</p>
<p>Попробуйте:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var obj = {
  go: function() {
    alert(this)
  }
}

(obj.go)() // error!</code></pre>
        </div>
      </div>
      
      </div><p>Причем сообщение об ошибке в большинстве браузеров не даёт понять, что на самом деле не так.</p>
<p><strong>Ошибка возникла из-за того, что после объявления <code>obj</code> пропущена точка с запятой.</strong></p>
<p>JavaScript игнорирует перевод строки перед скобкой <code>(obj.go)()</code>  и читает этот код как:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var obj = { go:... }(obj.go)()</code></pre>
        </div>
      </div>
      
      </div><p>Интерпретатор попытается вычислить это выражение, которое обозначает вызов объекта <code>{ go: ... }</code> как функции с аргументом <code>(obj.go)</code>. При этом, естественно, возникнет ошибка.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#почему-this-присваивается-именно-так" name="почему-this-присваивается-именно-так" class="main__anchor">Почему this присваивается именно так?</a></h3><a href="task/why-this.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 3</span></div><div class="task__content"><p>Вызовы <code>(1)</code> и <code>(2)</code> в примере ниже работают не так, как <code>(3)</code> и <code>(4)</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">&quot;use strict&quot;

var obj, method;

obj = {
  go: function() { alert(this); }
};

obj.go();            // (1) object

(obj.go)();          // (2) object

(method = obj.go)();      // (3) undefined

(obj.go || obj.stop)(); // (4) undefined</code></pre>
        </div>
      </div>
      
      </div><p>В чём дело? Объясните логику работы <code>this</code>.</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><ol>
<li>
<p>Обычный вызов функции в контексте объекта.</p>
</li>
<li>
<p>То же самое, скобки ни на что не влияют.</p>
</li>
<li>
<p>Здесь не просто вызов <code>obj.method()</code>, а более сложный вызов вида <code>(выражение).method()</code>. Такой вызов работает, как если бы он был разбит на две строки:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">f = obj.go; // сначала вычислить выражение
f();             // потом вызвать то, что получилось</code></pre>
        </div>
      </div>
      
      </div><p>При этом <code>f()</code> выполняется как обычная функция, без передачи <code>this</code>.</p>
</li>
<li>
<p>Здесь также слева от точки находится выражение, вызов аналогичен двум строкам.</p>
</li>
</ol>
<p>В спецификации это объясняется при помощи специального внутреннего типа <a href="http://es5.github.com/x8.html#x8.7">Reference Type</a>.</p>
<p>Если подробнее – то <code>obj.go()</code> состоит из двух операций:</p>
<ol>
<li>Сначала получить свойство <code>obj.go</code>.</li>
<li>Потом вызвать его как функцию.</li>
</ol>
<p>Но откуда на шаге 2 получить <code>this</code>? Как раз для этого операция получения свойства <code>obj.go</code> возвращает значение особого типа <code>Reference Type</code>, который в дополнение к свойству <code>go</code> содержит информацию об <code>obj</code>. Далее, на втором шаге, вызов его при помощи скобок <code>()</code> правильно устанавливает <code>this</code>.</p>
<p><strong>Любые другие операции, кроме вызова, превращают <code>Reference Type</code> в обычный тип, в данном случае – функцию <code>go</code> (так уж этот тип устроен).</strong></p>
<p>Поэтому получается, что <code>(method = obj.go)</code> присваивает в переменную <code>method</code> функцию <code>go</code>, уже без всякой информации об объекте <code>obj</code>.</p>
<p>Аналогичная ситуация и в случае <code>(4)</code>: оператор ИЛИ <code>||</code> делает из <code>Reference Type</code> обычную функцию.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#значение-this-в-объявлении-объекта" name="значение-this-в-объявлении-объекта" class="main__anchor">Значение this в объявлении объекта</a></h3><a href="task/object-property-this.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Что выведет <code>alert</code> в этом коде? Почему?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = {
  firstName: &quot;Василий&quot;,

  export: this
};

alert( user.export.firstName );</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p><strong>Ответ: <code>undefined</code>.</strong></p>
<div data-trusted="1" class="code-example" data-highlight-block="3-3">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = {
  firstName: &quot;Василий&quot;,

  export: this // (*)
};

alert( user.export.firstName );</code></pre>
        </div>
      </div>
      
      </div><p>Объявление объекта само по себе не влияет на <code>this</code>. Никаких функций, которые могли бы повлиять на контекст, здесь нет.</p>
<p>Так как код находится вообще вне любых функций, то <code>this</code> в нём равен <code>window</code> (в браузере так всегда для кода вне функций, вне зависимости от <code>use strict</code>).</p>
<p>Получается, что в строке <code>(*)</code> мы имеем <code>export: window</code>, так что далее <code>alert(user.export.firstName)</code> выводит свойство <code>window.firstName</code>, которое не определено.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#возврат-this" name="возврат-this" class="main__anchor">Возврат this</a></h3><a href="task/return-this.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Что выведет <code>alert</code> в этом коде? Почему?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var name = &quot;&quot;;

var user = {
  name: &quot;Василий&quot;,

  export: function() {
    return this;
  }

};

alert( user.export().name );</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p><strong>Ответ: <code>Василий</code>.</strong></p>
<p>Вызов <code>user.export()</code> использует <code>this</code>, который равен объекту до точки, то есть внутри <code>user.export()</code> строка <code>return this</code> возвращает объект <code>user</code>.</p>
<p>В итоге выводится свойство <code>name</code> объекта <code>user</code>, равное <code>&quot;Василий&quot;</code>.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#возврат-объекта-с-this" name="возврат-объекта-с-this" class="main__anchor">Возврат объекта с this</a></h3><a href="task/return-object-this.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Что выведет <code>alert</code> в этом коде? Почему?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var name = &quot;&quot;;

var user = {
  name: &quot;Василий&quot;,

  export: function() {
    return {
      value: this
    };
  }

};

alert( user.export().value.name );</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p><strong>Ответ: <code>Василий</code>.</strong></p>
<p>Во время выполнения <code>user.export()</code> значение <code>this = user</code>.</p>
<p>При создании объекта <code>{ value: this }</code>, в свойство <code>value</code> копируется ссылка на текущий контекст, то есть на <code>user</code>.</p>
<p>Получается что <code>user.export().value == user</code>.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var name = &quot;&quot;;

var user = {
  name: &quot;Василий&quot;,

  export: function() {
    return {
      value: this
    };
  }

};

alert( user.export().value == user ); // true</code></pre>
        </div>
      </div>
      
      </div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#создайте-калькулятор" name="создайте-калькулятор" class="main__anchor">Создайте калькулятор</a></h3><a href="task/calculator.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Создайте объект <code>calculator</code> с тремя методами:</p>
<ul>
<li><code>read()</code> запрашивает <code>prompt</code> два значения и сохраняет их как свойства объекта</li>
<li><code>sum()</code> возвращает сумму этих двух значений</li>
<li><code>mul()</code> возвращает произведение этих двух значений</li>
</ul>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var calculator = {
  ...ваш код...
}

calculator.read();
alert( calculator.sum() );
alert( calculator.mul() );</code></pre>
        </div>
      </div>
      
      </div><p><a href="#" onclick="event.preventDefault(); runDemo(this)">Запустить демо</a></p><p><a href="http://plnkr.co/edit/0Cdn31cxVTdqOp3HTXZu?p=preview" target="_blank" data-plunk-id="0Cdn31cxVTdqOp3HTXZu">Открыть песочницу с тестами для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><div data-trusted="1" class="code-example" data-demo="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var calculator = {
  sum: function() {
    return this.a + this.b;
  },

  mul: function() {
    return this.a * this.b;
  },

  read: function() {
    this.a = +prompt('a?', 0);
    this.b = +prompt('b?', 0);
  }
}

calculator.read();
alert( calculator.sum() );
alert( calculator.mul() );</code></pre>
        </div>
      </div>
      
      </div><p><a href="http://plnkr.co/edit/onDJgyIKu8vmLiUuI6Hx?p=preview" target="_blank" data-plunk-id="onDJgyIKu8vmLiUuI6Hx">Открыть решение с тестами в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#цепочка-вызовов" name="цепочка-вызовов" class="main__anchor">Цепочка вызовов</a></h3><a href="task/chain-calls.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 2</span></div><div class="task__content"><p>Есть объект «лестница» ladder:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var ladder = {
  step: 0,
  up: function() { // вверх по лестнице
    this.step++;
  },
  down: function() { // вниз по лестнице
    this.step--;
  },
  showStep: function() { // вывести текущую ступеньку
    alert( this.step );
  }
};</code></pre>
        </div>
      </div>
      
      </div><p>Сейчас, если нужно последовательно вызвать несколько методов объекта, это можно сделать так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">ladder.up();
ladder.up();
ladder.down();
ladder.showStep(); // 1</code></pre>
        </div>
      </div>
      
      </div><p>Модифицируйте код методов объекта, чтобы вызовы можно было делать цепочкой, вот так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">ladder.up().up().down().up().down().showStep(); // 1</code></pre>
        </div>
      </div>
      
      </div><p>Как видно, такая запись содержит «меньше букв» и может быть более наглядной.</p>
<p>Такой подход называется «чейнинг» (chaining) и используется, например, во фреймворке jQuery.</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Решение состоит в том, чтобы каждый раз возвращать текущий объект. Это делается добавлением <code>return this</code> в конце каждого метода:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var ladder = {
  step: 0,
  up: function() {
    this.step++;
    return this;
  },
  down: function() {
    this.step--;
    return this;
  },
  showStep: function() {
    alert( this.step );
    return this;
  }
}

ladder.up().up().down().up().down().showStep(); // 1</code></pre>
        </div>
      </div>
      
      </div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>