<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="ui.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Документ, события, интерфейсы</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="events-and-interfaces.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Основы работы с событиями</span></a></li></ol><h1 class="main__header-title">Порядок обработки событий</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Порядок обработки событий"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>События могут возникать не только по очереди, но и «пачкой» по много сразу. Возможно и такое, что во время обработки одного события возникают другие, например пока выполнялся код для <code>onclick</code> – посетитель нажал кнопку на клавиатуре (событие <code>keydown</code>).</p>
<p>Здесь мы разберём, как браузер обычно работает с одновременно возникающими событиями и какие есть исключения из общего правила.</p>
<h2><a class="main__anchor" name="главный-поток" href="#главный-поток">Главный поток</a></h2><p>В каждом окне выполняется только один <em>главный</em> поток, который занимается выполнением JavaScript, отрисовкой и работой с DOM.</p>
<p>Он выполняет команды последовательно, может делать только одно дело одновременно и блокируется при выводе модальных окон, таких как <code>alert</code>.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Дополнительные потоки тоже есть</span></div>
            <div class="important__content"><p>Есть и другие, служебные потоки, например, для сетевых коммуникаций.</p>
<p>Поэтому скачивание файлов может продолжаться пока главный поток ждёт реакции на <code>alert</code>. Но управлять служебными потоками мы не можем.</p>
</div></div>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Web Workers</span></div>
            <div class="important__content"><p>Существует спецификация <a href="http://www.w3.org/TR/workers/">Web Workers</a>, которая позволяет запускать дополнительные JavaScript-процессы(workers).</p>
<p>Они могут обмениваться сообщениями с главным процессом, но у них свои переменные, и работают они также сами по себе.</p>
<p>Такие дополнительные процессы не имеют доступа к DOM, поэтому они полезны, преимущественно, при вычислениях, чтобы загрузить несколько ядер/процессоров одновременно.</p>
</div></div>
<h2><a class="main__anchor" name="очередь-событий" href="#очередь-событий">Очередь событий</a></h2><p>Произошло одновременно несколько событий или во время работы одного случилось другое – как главному потоку обработать это?</p>
<p>Если главный поток прямо сейчас занят, то он не может срочно выйти из середины одной функции и прыгнуть в другую. А потом третью. Отладка при этом могла бы превратиться в кошмар, потому что пришлось бы разбираться с совместным состоянием нескольких функций сразу.</p>
<p>Поэтому используется альтернативный подход.</p>
<p><strong>Когда происходит событие, оно попадает в очередь.</strong></p>
<p>Внутри браузера непрерывно работает «главный внутренний цикл», который следит за состоянием очереди и обрабатывает события, запускает соответствующие обработчики и т.п.</p>
<p><strong>Иногда события добавляются в очередь сразу пачкой.</strong></p>
<p>Например, при клике на элементе генерируется несколько событий:</p>
<ol>
<li>Сначала <code>mousedown</code> – нажата кнопка мыши.</li>
<li>Затем <code>mouseup</code> – кнопка мыши отпущена и, так как это было над одним элементом, то дополнительно генерируется <code>click</code> (два события сразу).</li>
</ol>
<p>В действии:</p>
<div data-trusted="1" class="code-example" data-demo-height="150" data-autorun="true">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;textarea rows=&quot;8&quot; cols=&quot;40&quot; id=&quot;area&quot;&gt;Кликни меня
&lt;/textarea&gt;

&lt;script&gt;
  area.onmousedown = function(e) { this.value += &quot;mousedown\n&quot;; this.scrollTop = this.scrollHeight; };
  area.onmouseup = function(e) { this.value += &quot;mouseup\n&quot;; this.scrollTop = this.scrollHeight; };
  area.onclick = function(e) { this.value += &quot;click\n&quot;; this.scrollTop = this.scrollHeight; };
&lt;/script&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-548iwh"
          style="height:150px"
          src="about:blank"></iframe>
      </div>
      </div><p>Таким образом, при нажатии кнопки мыши в очередь попадёт событие <code>mousedown</code>, а при отпускании – сразу два события: <code>mouseup</code> и <code>click</code>. Браузер обработает их строго одно за другим: <code>mousedown</code> → <code>mouseup</code> → <code>click</code>.</p>
<p>При этом каждое событие из очереди обрабатывается полностью отдельно от других.</p>
<h2><a class="main__anchor" name="вложенные-синхронные-события" href="#вложенные-синхронные-события">Вложенные (синхронные) события</a></h2><p>Обычно возникающие события «становятся в очередь».</p>
<p>Но в тех случаях, когда событие инициируется не посетителем, а кодом, то оно, как правило, обрабатывается синхронно, то есть прямо сейчас.</p>
<p>Рассмотрим в качестве примера событие <code>onfocus</code>.</p>
<h3><a class="main__anchor" name="пример-событие-onfocus" href="#пример-событие-onfocus">Пример: событие onfocus</a></h3><p>Когда посетитель фокусируется на элементе, возникает событие <code>onfocus</code>. Обычно оно происходит, когда посетитель кликает на поле ввода, например:</p>
<div data-trusted="1" class="code-example" data-demo-height="80" data-autorun="true">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;p&gt;При фокусе на поле оно изменит значение.&lt;/p&gt;
&lt;input type=&quot;text&quot; onfocus=&quot;this.value = 'Фокус!'&quot; value=&quot;Кликни меня&quot;&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-48j24m"
          style="height:80px"
          src="about:blank"></iframe>
      </div>
      </div><p>Но ту же фокусировку можно вызвать и явно, вызовом метода <code>elem.focus()</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="3-4">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input type=&quot;text&quot; id=&quot;elem&quot; onfocus=&quot;this.value = 'Фокус!'&quot;&gt;

&lt;script&gt;
  // сфокусируется на input и вызовет обработчик onfocus
  elem.focus();
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>В главе <a href="focus-blur.htm">Фокусировка: focus/blur</a> мы познакомимся с этим событием подробнее, а пока – нажмите на кнопку в примере ниже.</p>
<p>При этом обработчик <code>onclick</code> вызовет метод <code>focus()</code> на текстовом поле <code>text</code>. Код обработчика <code>onfocus</code>, который при этом запустится, сработает синхронно, прямо сейчас, до завершения <code>onclick</code>.</p>
<div data-trusted="1" class="code-example" data-demo-height="80" data-autorun="true">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input type=&quot;button&quot; id=&quot;button&quot; value=&quot;Нажми меня&quot;&gt;
&lt;input type=&quot;text&quot; id=&quot;text&quot; size=&quot;60&quot;&gt;

&lt;script&gt;

  button.onclick = function() {
    text.value += ' -&gt;в onclick ';

    text.focus(); // вызов инициирует событие onfocus

    text.value += ' из onclick-&gt; ';
  };

  text.onfocus = function() {
    text.value += ' !focus! ';
  };
&lt;/script&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-1j7ldu"
          style="height:80px"
          src="about:blank"></iframe>
      </div>
      </div><p>При клике на кнопке в примере выше будет видно, что управление вошло в <code>onclick</code>, затем перешло в <code>onfocus</code>, затем вышло из <code>onclick</code>.</p>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">Исключение в IE</span></div>
            <div class="important__content"><p>Так ведут себя все браузеры, кроме IE.</p>
<p>В нём событие <code>onfocus</code> – всегда асинхронное, так что будет сначала полностью обработан клик, а потом – фокус. В остальных – фокус вызовется посередине клика. Попробуйте кликнуть в IE и в другом браузере, чтобы увидеть разницу.</p>
</div></div>
<h2><a class="main__anchor" name="делаем-события-асинхронными-через-settimeout-0" href="#делаем-события-асинхронными-через-settimeout-0">Делаем события асинхронными через setTimeout(…,0)</a></h2><p>А что, если мы хотим, чтобы <em>сначала</em> закончилась обработка <code>onclick</code>, а потом уже произошла обработка <code>onfocus</code> и связанные с ней действия?</p>
<p>Можно добиться и этого.</p>
<p>Один вариант – просто переместить строку <code>text.focus()</code> вниз кода обработчика <code>onclick</code>.</p>
<p>Если это неудобно, можно запланировать <code>text.focus()</code> чуть позже через <code>setTimeout(..., 0)</code>, вот так</p>
<div data-trusted="1" class="code-example" data-demo-height="80" data-autorun="true" data-highlight-block="7-9">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input type=&quot;button&quot; id=&quot;button&quot; value=&quot;Нажми меня&quot;&gt;
&lt;input type=&quot;text&quot; id=&quot;text&quot; size=&quot;60&quot;&gt;

&lt;script&gt;
  button.onclick = function() {
    text.value += ' -&gt;в onclick ';

    setTimeout(function() {
      text.focus(); // сработает после onclick
    }, 0);

    text.value += ' из onclick-&gt; ';
  };

  text.onfocus = function() {
    text.value += ' !focus! ';
  };
&lt;/script&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-d5rmj2"
          style="height:80px"
          src="about:blank"></iframe>
      </div>
      </div><p>Такой вызов обеспечит фокусировку через минимальный «тик» таймера, по стандарту равный 4 мс. Обычно такая задержка не играет роли, а необходимую асинхронность мы получили.</p>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><ul>
<li>JavaScript выполняется в едином потоке. Современные браузеры позволяют порождать подпроцессы <a href="http://www.w3.org/TR/workers/">Web Workers</a>, они выполняются параллельно и могут отправлять/принимать сообщения, но не имеют доступа к DOM.</li>
<li>Обычно события становятся в очередь и обрабатываются в порядке поступления, асинхронно, независимо друг от друга.</li>
<li>Синхронными являются вложенные события,  инициированные из кода.</li>
<li>Чтобы сделать событие гарантированно асинхронным, используется вызов через <code>setTimeout(func, 0)</code>.</li>
</ul>
<p>Отложенный вызов через <code>setTimeout(func, 0)</code> используется не только в событиях, а вообще – всегда, когда мы хотим, чтобы некая функция <code>func</code> сработала после того, как текущий скрипт завершится.</p>
</div></article></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>