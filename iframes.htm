<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="frames-and-windows.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Окна и Фреймы</span></a></li></ol><h1 class="main__header-title">Общение между окнами и фреймами</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Общение между окнами и фреймами"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Элемент <code>iframe</code> является обычным узлом DOM, как и любой другой. Существенное отличие – в том, что с ним связан объект <code>window</code> внутреннего окна. Он доступен по ссылке <code>iframe.contentWindow</code>.</p>
<p>Таким образом, <code>iframe.contentWindow.document</code> будет внутренним документом, <code>iframe.contentWindow.document.body</code> – его <code>&lt;body&gt;</code> и так далее.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Когда-то…</span></div>
            <div class="important__content"><p>В старых браузерах использовались другие свойства, такие как <code>iframe.contentDocument</code> и даже <code>iframe.document</code>, но они давно не нужны.</p>
</div></div>
<h2><a class="main__anchor" name="переход-внутрь-ифрейма" href="#переход-внутрь-ифрейма">Переход внутрь ифрейма</a></h2><p>В примере ниже JavaScript получает документ внутри ифрейма и модифицирует его:</p>
<div data-trusted="1" class="code-example" data-demo-height="100">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;iframe src=&quot;javascript:'тест'&quot; style=&quot;height:60px&quot;&gt;&lt;/iframe&gt;

&lt;script&gt;
  var iframe = document.getElementsByTagName('iframe')[0];

  var iframeDoc = iframe.contentWindow.document;

  if (iframeDoc.readyState == 'complete') {
    iframeDoc.body.style.backgroundColor = 'green';
  }
  iframe.onload = function() {
    var iframeDoc2 = iframe.contentWindow.document;
    iframeDoc2.body.style.backgroundColor = 'orange';
  }
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><div class="important important_smart">
            <div class="important__header"><span class="important__type">src=„javascript:«текст»“</span></div>
            <div class="important__content"><p>Атрибут <code>src</code> может использовать протокол <code>javascript</code>, как указано выше: <code>src=&quot;javascript:код&quot;</code>. При этом код выполняется и его результат будет содержимым ифрейма. Этот способ описан в стандарте и поддерживается всеми браузерами.</p>
<p>Атрибут <code>src</code> является обязательным, и его отсутствие может привести к проблемам, вплоть до игнорирования ифрейма браузером. Чтобы ничего не загружать в ифрейм, можно указать пустую строку: <code>src=&quot;javascript:''&quot;</code> или специальную страницу: <code>src=&quot;about:blank&quot;</code>.</p>
</div></div>
<p>В некоторых браузерах (Chrome) пример выше покажет <code>iframe</code> зелёным. А в некоторых (Firefox) – оранжевым.</p>
<p>Дело в том, что, когда <code>iframe</code> только создан, документ в нём обычно ещё не загружен.</p>
<p>При обычных значениях <code>iframe src=&quot;...&quot;</code>, которые указывают на HTML-страницу (даже если она уже в кеше), это всегда так. Документ, который в <code>iframe</code> на момент срабатывания скрипта <code>iframeDoc</code> – временный, он будет заменён на новый очень скоро. И работать надо уже с новым документом <code>iframeDoc2</code> – например, по событию <code>iframe.onload</code>.</p>
<p>В случае с <code>javascript</code>-протоколом, по идее, ифрейм уже загружен, и тогда <code>onload</code> у него уже не будет. Но здесь мнения браузеров расходятся, некоторые (Firefox) всё равно «подгрузят» документ позже. Поэтому факт «готовности» документа в скрипте проверяется через <code>iframeDoc.readyState</code>.</p>
<p>Ещё раз заметим, что при обычных URL в качестве <code>src</code> нужно работать не с начальным документом, а с тем, который появится позже.</p>
<h2><a class="main__anchor" name="кросс-доменность-ограничение-доступа-к-окну" href="#кросс-доменность-ограничение-доступа-к-окну">Кросс-доменность: ограничение доступа к окну</a></h2><p>Элемент <code>&lt;iframe&gt;</code> является «двуличным». С одной стороны, это обычный узел DOM, с другой – внутри находится окно, которое может иметь совершенно другой URL, содержать независимый документ из другого источника.</p>
<p>Внешний документ имеет полный доступ к <code>&lt;iframe&gt;</code> как к DOM-узлу. А вот к окну – если они с одного источника.</p>
<p>Это приводит к забавным последствиям. Например, чтобы узнать об окончании загрузки <code>&lt;iframe&gt;</code>, мы можем повесить обработчик <code>iframe.onload</code>. По сути, это то же самое что <code>iframe.contentWindow.onload</code>, но его мы можем поставить лишь в случае, если окно с того же источника.</p>
<div data-trusted="1" class="code-example" data-demo-height="120">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;iframe src=&quot;https://example.com&quot; style=&quot;height:100px&quot;&gt;&lt;/iframe&gt;

&lt;script&gt;
  var iframe = document.getElementsByTagName('iframe')[0];

  // сработает
  iframe.onload = function() {
    alert( &quot;iframe onload&quot; );
  };

  // не сработает
  iframe.contentWindow.onload = function() {
    alert( &quot;contentWindow onload&quot; );
  };
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Если бы в примере выше <code>&lt;iframe src&gt;</code> был с текущего сайта, то оба обработчика сработали бы.</p>
<h2><a class="main__anchor" name="иерархия-window-frames" href="#иерархия-window-frames">Иерархия window.frames</a></h2><p>Альтернативный способ доступа к окну ифрейма – это получить его из коллекции <code>window.frames</code>.</p>
<p>Есть два способа доступа:</p>
<ol>
<li><code>window.frames[0]</code> – доступ по номеру.</li>
<li><code>window.frames.iframeName</code> – доступ по <code>name</code> ифрейма.</li>
</ol>
<p>Обратим внимание: в коллекции хранится именно окно (<code>contentWindow</code>), а не DOM-элемент.</p>
<p>Демонстрация всех способов доступа к окну:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;iframe src=&quot;javascript:''&quot; style=&quot;height:80px&quot; name=&quot;i&quot;&gt;&lt;/iframe&gt;

&lt;script&gt;
  var iframeTag = document.body.children[0];

  var iframeWindow = iframeTag.contentWindow; // окно из тега

  alert( frames[0] === iframeWindow ); // true, окно из коллекции frames
  alert( frames.i == iframeWindow ); // true, окно из frames по имени
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Внутри ифрейма могут быть свои вложенные ифреймы. Всё это вместе образует иерархию.</p>
<p>Ссылки для навигации по ней:</p>
<ul>
<li>
<p><code>window.frames</code> – коллекция «детей» (вложенных ифреймов)</p>
</li>
<li>
<p><code>window.parent</code> – содержит ссылку на родительское окно, позволяет обратиться к нему из ифрейма.</p>
<p>Всегда верно:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// (из окна со фреймом)
window.frames[0].parent === window; // true</code></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p><code>window.top</code> – содержит ссылку на самое верхнее окно (вершину иерархии).</p>
<p>Всегда верно (в предположении, что вложенные фреймы существуют):</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">window.frames[0].frames[0].frames[0].top === window</code></pre>
        </div>
      </div>
      
      </div></li>
</ul>
<p><strong>Свойство <code>top</code> позволяет легко проверить, во фрейме ли находится текущий документ:</strong></p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">if (window == top) {
  alert( 'Этот скрипт является окном верхнего уровня в браузере' );
} else {
  alert( 'Этот скрипт исполняется во фрейме!' );
}</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="песочница-sandbox" href="#песочница-sandbox">Песочница sandbox</a></h2><p>Атрибут <code>sandbox</code> позволяет построить «песочницу» вокруг ифрейма, запретив ему выполнять ряд действий.</p>
<p>Наличие атрибута <code>sandbox</code>:</p>
<ul>
<li>Заставляет браузер считать ифрейм загруженным с другого источника, так что он и внешнее окно больше не могут обращаться к переменным друг друга.</li>
<li>Отключает формы и скрипты в ифрейме.</li>
<li>Запрещает менять <code>parent.location</code> из ифрейма.</li>
</ul>
<p>Пример ниже загружает в <code>&lt;iframe sandbox&gt;</code> документ с JavaScript и формой. Ни то ни другое не сработает:</p>
<div class="code-tabs code-tabs_result_on"><div class="code-tabs__tools"><div class="code-tabs__scroll-wrap"><button title="&amp;larr;" data-code-tabs-left class="code-tabs__scroll-button code-tabs__scroll-button_left"></button></div><div class="code-tabs__switches-wrap"><div data-code-tabs-switches class="code-tabs__switches"><div class="code-tabs__switches-items"><div class="code-tabs__switch code-tabs__switch_current">Результат</div><div class="code-tabs__switch">index.html</div><div class="code-tabs__switch">sandboxed.html</div></div></div></div><div class="code-tabs__scroll-wrap"><button title="&amp;rarr;" data-code-tabs-right class="code-tabs__scroll-button code-tabs__scroll-button_right"></button></div><div class="code-tabs__buttons"><a target="_blank" title="открыть в отдельном окне" href="article/iframes/sandbox/default.htm" class="code-tabs__button code-tabs__button_external"></a><a target="_blank" title="редактировать в песочнице" href="http://plnkr.co/edit/5RcB0O4v7MdhiAjLtMH5?p=preview" class="code-tabs__button code-tabs__button_edit"></a></div></div><div data-code-tabs-content style="height:200px" class="code-tabs__content"><div class="code-tabs__section code-tabs__section_current"><iframe src="article/iframes/sandbox/default.htm" class="code-tabs__result"></iframe></div><div class="code-tabs__section"><pre class="language-markup line-numbers"><code>&lt;!doctype html&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
&lt;/head&gt;

&lt;body&gt;

  &lt;iframe sandbox src=&quot;sandboxed.html&quot;&gt;&lt;/iframe&gt;

&lt;/body&gt;

&lt;/html&gt;</code></pre></div><div class="code-tabs__section"><pre class="language-markup line-numbers"><code>&lt;!doctype html&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
&lt;/head&gt;

&lt;body&gt;

  &lt;script&gt;
    alert(1);
  &lt;/script&gt;

  &lt;form action=&quot;http://google.ru&quot;&gt;
    &lt;input type=&quot;text&quot;&gt;
    &lt;input type=&quot;submit&quot; value=&quot;Отправить форму на http://google.ru&quot;&gt;
  &lt;/form&gt;

&lt;/body&gt;

&lt;/html&gt;</code></pre></div></div></div><p>Если у атрибута <code>sandbox</code> нет значения, то браузер применяет максимум ограничений.</p>
<p>Атрибут <code>sandbox</code> может содержать через пробел список ограничений, которые не нужны:</p>
<dl>
<dt>allow-same-origin</dt>
<dd>Браузер будет считать документ в ифрейме пришедшим с другого домена и накладывать соответствующие ограничения на работу с ним. Если ифрейм и так с другого домена, то ничего не меняется.</dd>
<dt>allow-top-navigation</dt>
<dd>Разрешает ифрейму менять <code>parent.location</code>.</dd>
<dt>allow-forms</dt>
<dd>Разрешает отправлять формы из <code>iframe</code>.</dd>
<dt>allow-scripts</dt>
<dd>Разрешает выполнение скриптов из ифрейма. Но скриптам, всё же, будет запрещено открывать попапы.</dd>
</dl>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">На заметку:</span></div>
            <div class="important__content"><p>Цель атрибута <code>sandbox</code> – наложить дополнительные ограничения. Он не может снять уже существующие, в частности, убрать ограничения безопасности, если ифрейм с другого источника.</p>
</div></div>
</div></article></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>