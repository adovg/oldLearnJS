<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="ajax.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">AJAX и COMET</span></a></li></ol><h1 class="main__header-title">WebSocket</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="WebSocket"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Протокол <code>WebSocket</code> (стандарт <a href="http://tools.ietf.org/html/rfc6455">RFC 6455</a>) предназначен для решения любых задач и снятия ограничений обмена данными между браузером и сервером.</p>
<p>Он позволяет пересылать любые данные, на любой домен, безопасно и почти без лишнего сетевого трафика.</p>
<h2><a class="main__anchor" name="пример-браузерного-кода" href="#пример-браузерного-кода">Пример браузерного кода</a></h2><p>Для открытия соединения достаточно создать объект <code>WebSocket</code>, указав в нём специальный протокол <code>ws</code>.:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:28-30">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var socket = new WebSocket(&quot;ws://javascript.ru/ws&quot;);</code></pre>
        </div>
      </div>
      
      </div><p>У объекта <code>socket</code> есть четыре коллбэка: один при получении данных и три – при изменениях в состоянии соединения:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:0-13,4:0-14,13:0-16,17:0-14">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">socket.onopen = function() {
  alert(&quot;Соединение установлено.&quot;);
};

socket.onclose = function(event) {
  if (event.wasClean) {
    alert('Соединение закрыто чисто');
  } else {
    alert('Обрыв соединения'); // например, &quot;убит&quot; процесс сервера
  }
  alert('Код: ' + event.code + ' причина: ' + event.reason);
};

socket.onmessage = function(event) {
  alert(&quot;Получены данные &quot; + event.data);
};

socket.onerror = function(error) {
  alert(&quot;Ошибка &quot; + error.message);
};</code></pre>
        </div>
      </div>
      
      </div><p><strong>Для посылки данных используется метод <code>socket.send(data)</code>. Пересылать можно любые данные.</strong></p>
<p>Например, строку:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">socket.send(&quot;Привет&quot;);</code></pre>
        </div>
      </div>
      
      </div><p>…Или файл, выбранный в форме:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:12-33">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">socket.send(form.elements[0].file);</code></pre>
        </div>
      </div>
      
      </div><p>Просто, не правда ли? Выбираем, что переслать, и <code>socket.send()</code>.</p>
<p><strong>Для того, чтобы коммуникация была успешной, сервер должен поддерживать протокол WebSocket.</strong></p>
<p>Чтобы лучше понимать происходящее – посмотрим, как он устроен.</p>
<h2><a class="main__anchor" name="установление-websocket-соединения" href="#установление-websocket-соединения">Установление WebSocket-соединения</a></h2><p>Протокол <code>WebSocket</code> работает <em>над</em> TCP.</p>
<p>Это означает, что при соединении браузер отправляет по HTTP специальные заголовки, спрашивая: «поддерживает ли сервер WebSocket?».</p>
<p>Если сервер в ответных заголовках отвечает «да, поддерживаю», то дальше HTTP прекращается и общение идёт на специальном протоколе WebSocket, который уже не имеет с HTTP ничего общего.</p>
<h3><a class="main__anchor" name="установление-соединения" href="#установление-соединения">Установление соединения</a></h3><p>Пример запроса от браузера при создании нового объекта <code>new WebSocket(&quot;ws://server.example.com/chat&quot;)</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-none"><code class="language-none">GET /chat HTTP/1.1
Host: server.example.com
Upgrade: websocket
Connection: Upgrade
Origin: http://javascript.ru
Sec-WebSocket-Key: Iv8io/9s+lYFgZWcXczP8Q==
Sec-WebSocket-Version: 13</code></pre>
        </div>
      </div>
      
      </div><p>Описания заголовков:</p>
<dl>
<dt>GET, Host</dt>
<dd>Стандартные HTTP-заголовки из URL запроса</dd>
<dt>Upgrade, Connection</dt>
<dd>Указывают, что браузер хочет перейти на websocket.</dd>
<dt>Origin</dt>
<dd>Протокол, домен и порт, откуда отправлен запрос.</dd>
<dt>Sec-WebSocket-Key</dt>
<dd>Случайный ключ, который генерируется браузером: 16 байт в кодировке <a href="http://ru.wikipedia.org/wiki/Base64">Base64</a>.</dd>
<dt>Sec-WebSocket-Version</dt>
<dd>Версия протокола. Текущая версия: 13.</dd>
</dl>
<p>Все заголовки, кроме <code>GET</code> и <code>Host</code>, браузер генерирует сам, без возможности вмешательства JavaScript.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Такой XMLHttpRequest создать нельзя</span></div>
            <div class="important__content"><p>Создать подобный XMLHttpRequest-запрос (подделать <code>WebSocket</code>) невозможно, по одной  простой причине: указанные выше заголовки запрещены к установке методом <code>setRequestHeader</code>.</p>
</div></div>
<p><strong>Сервер может проанализировать эти заголовки и решить, разрешает ли он <code>WebSocket</code> с данного домена <code>Origin</code>.</strong></p>
<p>Ответ сервера, если он понимает и разрешает <code>WebSocket</code>-подключение:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-none"><code class="language-none">HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: hsBlbuDTkk24srzEOTBUlZAlC2g=</code></pre>
        </div>
      </div>
      
      </div><p>Здесь строка <code>Sec-WebSocket-Accept</code> представляет собой перекодированный по специальному алгоритму ключ <code>Sec-WebSocket-Key</code>. Браузер использует её для проверки, что ответ предназначается именно ему.</p>
<p>Затем данные передаются по специальному протоколу, структура которого («фреймы») изложена далее. И это уже совсем не HTTP.</p>
<h3><a class="main__anchor" name="расширения-и-подпротоколы" href="#расширения-и-подпротоколы">Расширения и подпротоколы</a></h3><p>Также возможны дополнительные заголовки <code>Sec-WebSocket-Extensions</code> и <code>Sec-WebSocket-Protocol</code>, описывающие расширения и подпротоколы (subprotocol), которые поддерживает данный клиент.</p>
<p>Посмотрим разницу между ними на двух примерах:</p>
<ul>
<li>
<p>Заголовок <code>Sec-WebSocket-Extensions: deflate-frame</code> означает, что браузер поддерживает модификацию протокола, обеспечивающую сжатие данных.</p>
<p>Это говорит не о самих данных, а об улучшении способа их передачи. Браузер сам формирует этот заголовок.</p>
</li>
<li>
<p>Заголовок <code>Sec-WebSocket-Protocol: soap, wamp</code> говорит о том, что по WebSocket браузер собирается передавать не просто какие-то данные, а данные в протоколах <a href="http://ru.wikipedia.org/wiki/SOAP">SOAP</a> или WAMP («The WebSocket Application Messaging Protocol»). Стандартные подпротоколы регистрируются в специальном каталоге <a href="http://www.iana.org/assignments/websocket/websocket.xml">IANA</a>.</p>
<p>Этот заголовок браузер поставит, если указать второй необязательный параметр <code>WebSocket</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:28-30">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var socket = new WebSocket(&quot;ws://javascript.ru/ws&quot;, [&quot;soap&quot;, &quot;wamp&quot;]);</code></pre>
        </div>
      </div>
      
      </div></li>
</ul>
<p>При наличии таких заголовков сервер может выбрать расширения и подпротоколы, которые он поддерживает, и ответить с ними.</p>
<p>Например, запрос:</p>
<div data-trusted="1" class="code-example" data-highlight-block="7-8">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-none"><code class="language-none">GET /chat HTTP/1.1
Host: server.example.com
Upgrade: websocket
Connection: Upgrade
Origin: http://javascript.ru
Sec-WebSocket-Key: Iv8io/9s+lYFgZWcXczP8Q==
Sec-WebSocket-Version: 13
Sec-WebSocket-Extensions: deflate-frame
Sec-WebSocket-Protocol: soap, wamp</code></pre>
        </div>
      </div>
      
      </div><p>Ответ:</p>
<div data-trusted="1" class="code-example" data-highlight-block="4-5">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-none"><code class="language-none">HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: hsBlbuDTkk24srzEOTBUlZAlC2g=
Sec-WebSocket-Extensions: deflate-frame
Sec-WebSocket-Protocol: soap</code></pre>
        </div>
      </div>
      
      </div><p>В ответе выше сервер указывает, что поддерживает расширение <code>deflate-frame</code>, а из запрошенных подпротоколов – только SOAP.</p>
<h3><a class="main__anchor" name="wss" href="#wss">WSS</a></h3><p>Соединение <code>WebSocket</code> можно открывать как <code>WS://</code> или как <code>WSS://</code>. Протокол <code>WSS</code> представляет собой WebSocket над HTTPS.</p>
<p><strong>Кроме большей безопасности, у <code>WSS</code> есть важное преимущество перед обычным <code>WS</code> – большая вероятность соединения.</strong></p>
<p>Дело в том, что HTTPS шифрует трафик от клиента к серверу, а HTTP – нет.</p>
<p>Если между клиентом и сервером есть прокси, то в случае с HTTP все WebSocket-заголовки и данные передаются через него. Прокси имеет к ним доступ, ведь они никак не шифруются, и может расценить происходящее как нарушение протокола HTTP, обрезать заголовки или оборвать передачу.</p>
<p>А в случае с <code>WSS</code> весь трафик сразу кодируется и через прокси проходит уже в закодированном виде. Поэтому заголовки гарантированно пройдут, и общая вероятность соединения через <code>WSS</code> выше, чем через <code>WS</code>.</p>
<h2><a class="main__anchor" name="формат-данных" href="#формат-данных">Формат данных</a></h2><p>Полное описание протокола содержится в <a href="http://tools.ietf.org/html/rfc6455">RFC 6455</a>.</p>
<p>Здесь представлено частичное описание с комментариями самых важных его частей. Если вы хотите понять стандарт, то рекомендуется сначала прочитать это описание.</p>
<h3><a class="main__anchor" name="описание-фрейма" href="#описание-фрейма">Описание фрейма</a></h3><p>В протоколе WebSocket предусмотрены несколько видов пакетов («фреймов»).</p>
<p>Они делятся на два больших типа: фреймы с данными («data frames») и управляющие («control frames»), предназначенные для проверки связи (PING) и закрытия соединения.</p>
<p>Фрейм, согласно стандарту, выглядит так:</p>
<pre>
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-------+-+-------------+-------------------------------+
   |F|R|R|R| опкод |М| Длина тела  |    Расширенная длина тела     |
   |I|S|S|S|(4бита)|А|   (7бит)    |            (1 байт)           |
   |N|V|V|V|       |С|             |(если длина тела==126 или 127) |
   | |1|2|3|       |К|             |                               |
   | | | | |       |А|             |                               |
   +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +
   |  Продолжение расширенной длины тела, если длина тела = 127    |
   + - - - - - - - - - - - - - - - +-------------------------------+
   |                               |  Ключ маски, если МАСКА = 1   |
   +-------------------------------+-------------------------------+
   | Ключ маски (продолжение)      |       Данные фрейма ("тело")  |
   +-------------------------------- - - - - - - - - - - - - - - - +
   :                     Данные продолжаются ...                   :
   + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
   |                     Данные продолжаются ...                   |
   +---------------------------------------------------------------+
</pre>
<p>С виду – не очень понятно, во всяком случае, для большинства людей.</p>
<p><strong>Позвольте пояснить: читать следует слева-направо, сверху-вниз, каждая горизонтальная полоска это 32 бита.</strong></p>
<p>То есть, вот первые 32 бита:</p>
<pre>
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-------+-+-------------+-------------------------------+
   |F|R|R|R| опкод |М| Длина тела  |    Расширенная длина тела     |
   |I|S|S|S|(4бита)|А|   (7бит)    |            (1 байт)           |
   |N|V|V|V|       |С|             |(если длина тела==126 или 127) |
   | |1|2|3|       |К|             |                               |
   | | | | |       |А|             |                               |
   +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +
</pre>
<p>Сначала идёт бит FIN (вертикальная надпись на рисунке), затем биты RSV1, RSV2, RSV3 (их смысл раскрыт ниже), затем «опкод», «МАСКА» и, наконец,  «Длина тела», которая занимает 7 бит. Затем, если «Длина тела» равна 126 или 127, идёт «Расширенная длина тела», потом (на следующей строке, то есть после первых 32 бит) будет её продолжение, ключ маски, и потом данные.</p>
<p>А теперь – подробное описание частей фрейма, то есть как именно передаются сообщения:</p>
<dl>
<dt>FIN: 1 бит</dt>
<dd>
<p>Одно сообщение, если оно очень длинное (вызовом <code>send</code> можно передать хоть целый файл), может состоять из множества фреймов («быть фрагментированным»).</p>
<p>У всех фреймов, кроме последнего, этот фрагмент установлен в <code>0</code>, у последнего – в <code>1</code>.</p>
<p>Если сообщение состоит из одного-единственного фрейма, то <code>FIN</code> в нём  равен <code>1</code>.</p>
</dd>
<dt>RSV1, RSV2, RSV3:  1 бит каждый</dt>
<dd>
<p>В обычном WebSocket равны <code>0</code>, предназначены для расширений протокола. Расширение может записать в эти биты свои значения.</p>
</dd>
<dt>Опкод: 4 бита</dt>
<dd>
<p>Задаёт тип фрейма, который позволяет интерпретировать находящиеся в нём данные. Возможные значения:</p>
<ul>
<li><code>0x1</code> обозначает текстовый фрейм.</li>
<li><code>0x2</code> обозначает двоичный фрейм.</li>
<li><code>0x3-7</code> зарезервированы для будущих фреймов с данными.</li>
<li><code>0x8</code> обозначает закрытие соединения этим фреймом.</li>
<li><code>0x9</code> обозначает PING.</li>
<li><code>0xA</code> обозначает PONG.</li>
<li><code>0xB-F</code> зарезервированы для будущих управляющих фреймов.</li>
<li><code>0x0</code> обозначает фрейм-продолжение для фрагментированного сообщения. Он интерпретируется, исходя из ближайшего предыдущего ненулевого типа.</li>
</ul>
</dd>
<dt>Маска: 1 бит</dt>
<dd>
<p>Если этот бит установлен, то данные фрейма маскированы. Более подробно маску и маскирование мы рассмотрим далее.</p>
</dd>
<dt>Длина тела:  7 битов, 7+16 битов, или 7+64 битов</dt>
<dd>
<p>Если значение поле «Длина тела» лежит в интервале <code>0-125</code>, то оно обозначает длину тела (используется далее).
Если <code>126</code>, то следующие 2 байта интерпретируются как 16-битное беззнаковое целое число, содержащее длину тела.
Если <code>127</code>, то следующие 8 байт интерпретируются как 64-битное беззнаковое целое, содержащее длину.</p>
<p>Такая хитрая схема нужна, чтобы минимизировать накладные расходы. Для сообщений длиной <code>125</code> байт и меньше хранение длины потребует всего 7 битов, для бóльших (до 65536) – 7 битов + 2 байта, ну а для ещё бóльших – 7 битов и 8 байт. Этого хватит для хранения длины сообщения размером в гигабайт и более.</p>
</dd>
<dt>Ключ маски: 4 байта.</dt>
<dd>
<p>Если бит <code>Маска</code> установлен в 0, то этого поля нет. Если в <code>1</code> то эти байты содержат маску, которая налагается на тело (см. далее).</p>
</dd>
<dt>Данные фрейма (тело)</dt>
<dd>
<p>Состоит из «данных расширений» и «данных приложения», которые идут за ними. Данные расширений определяются конкретными расширениями протокола и по умолчанию отсутствуют. Длина тела должна быть равна указанной в заголовке.</p>
</dd>
</dl>
<h3><a class="main__anchor" name="примеры" href="#примеры">Примеры</a></h3><p>Некоторые примеры сообщений:</p>
<ul>
<li>
<p>Нефрагментированное текстовое сообщение <code>Hello</code> без маски:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-none"><code class="language-none">0x81 0x05 0x48 0x65 0x6c 0x6c 0x6f (содержит &quot;Hello&quot;)</code></pre>
        </div>
      </div>
      
      </div><p>В заголовке первый байт содержит <code>FIN=1</code> и <code>опкод=0x1</code> (получается <code>10000001</code> в двоичной системе, то есть <code>0x81</code> – в 16-ричной), далее идёт длина <code>0x5</code>, далее текст.</p>
</li>
<li>
<p>Фрагментированное текстовое сообщение <code>Hello World</code> из трёх частей, без маски, может выглядеть так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-none"><code class="language-none">0x01 0x05 0x48 0x65 0x6c 0x6c 0x6f (содержит &quot;Hello&quot;)
0x00 0x01 0x20 (содержит &quot; &quot;)
0x80 0x05 0x57 0x6f 0x72 0x6c 0x64 (содержит &quot;World&quot;)</code></pre>
        </div>
      </div>
      
      </div><ul>
<li>У первого фрейма <code>FIN=0</code> и текстовый опкод <code>0x1</code>.</li>
<li>У второго <code>FIN=0</code> и опкод <code>0x0</code>. При фрагментации сообщения, у всех фреймов, кроме первого, опкод пустой (он один на всё сообщение).</li>
<li>У третьего, последнего фрейма <code>FIN=1</code>.</li>
</ul>
</li>
</ul>
<p>А теперь посмотрим на все те замечательные возможности, которые даёт этот формат фрейма.</p>
<h3><a class="main__anchor" name="фрагментация" href="#фрагментация">Фрагментация</a></h3><p>Позволяет отправлять сообщения в тех случаях, когда на момент начала посылки полный размер ещё неизвестен.</p>
<p>Например, идёт поиск в базе данных и что-то уже найдено, а что-то ещё может быть позже.</p>
<ul>
<li>У всех сообщений, кроме последнего, бит <code>FIN=0</code>.</li>
<li>Опкод указывается только у первого, у остальных он должен быть равен <code>0x0</code>.</li>
</ul>
<h3><a class="main__anchor" name="ping-pong" href="#ping-pong">PING / PONG</a></h3><p>В протокол встроена проверка связи при помощи управляющих фреймов типа PING и PONG.</p>
<p>Тот, кто хочет проверить соединение, отправляет фрейм PING с произвольным телом. Его получатель должен в разумное время ответить фреймом PONG с тем же телом.</p>
<p>Этот функционал встроен в браузерную реализацию, так что браузер ответит на PING сервера, но управлять им из JavaScript нельзя.</p>
<p><strong>Иначе говоря, сервер всегда знает, жив ли посетитель или у него проблема с сетью.</strong></p>
<h3><a class="main__anchor" name="чистое-закрытие" href="#чистое-закрытие">Чистое закрытие</a></h3><p>При закрытии соединения сторона, желающая это сделать (обе стороны в WebSocket равноправны) отправляет закрывающий фрейм (опкод <code>0x8</code>), в теле которого указывает причину закрытия.</p>
<p>В браузерной реализации эта причина будет содержаться в свойстве <code>reason</code> события <code>onclose</code>.</p>
<p><strong>Наличие такого фрейма позволяет отличить «чистое закрытие» от обрыва связи.</strong></p>
<p>В браузерной реализации событие <code>onclose</code> при чистом закрытии имеет <code>event.wasClean = true</code>.</p>
<h3><a class="main__anchor" name="коды-закрытия" href="#коды-закрытия">Коды закрытия</a></h3><p>Коды закрытия вебсокета <code>event.code</code>, чтобы не путать их с HTTP-кодами, состоят из 4 цифр:</p>
<dl>
<dt><code>1000</code></dt>
<dd>Нормальное закрытие.</dd>
<dt><code>1001</code></dt>
<dd>Удалённая сторона «исчезла». Например, процесс сервера убит или браузер перешёл на другую страницу.</dd>
<dt><code>1002</code></dt>
<dd>Удалённая сторона завершила соединение в связи с ошибкой протокола.</dd>
<dt><code>1003</code></dt>
<dd>Удалённая сторона завершила соединение в связи с тем, что она получила данные, которые не может принять. Например, сторона, которая понимает только текстовые данные, может закрыть соединение с таким кодом, если приняла бинарное сообщение.</dd>
</dl>
<h3><a class="main__anchor" name="атака-отравленный-кэш" href="#атака-отравленный-кэш">Атака «отравленный кэш»</a></h3><p>В ранних реализациях WebSocket существовала уязвимость, называемая «отравленный кэш» (cache poisoning).</p>
<p><strong>Она позволяла атаковать кэширующие прокси-сервера, в частности, корпоративные.</strong></p>
<p>Атака осуществлялась так:</p>
<ol>
<li>
<p>Хакер заманивает доверчивого посетителя (далее Жертва) на свою страницу.</p>
</li>
<li>
<p>Страница открывает <code>WebSocket</code>-соединение на сайт хакера. Предполагается, что Жертва сидит через прокси. Собственно, на прокси и направлена эта атака.</p>
</li>
<li>
<p>Страница формирует специального вида WebSocket-запрос, который (и здесь самое главное!) ряд прокси серверов не понимают.</p>
<p>Они пропускают начальный запрос через себя (который содержит <code>Connection: upgrade</code>) и думают, что далее идёт уже следующий HTTP-запрос.</p>
<p>…Но на самом деле там данные, идущие через вебсокет! И обе стороны вебсокета (страница и сервер) контролируются Хакером. Так что хакер может передать в них нечто похожее на GET-запрос к известному ресурсу, например <code>http://code.jquery.com/jquery.js</code>, а сервер ответит «якобы кодом jQuery» с кэширующими заголовками.</p>
<p>Прокси послушно проглотит этот ответ и закэширует «якобы jQuery».</p>
</li>
<li>
<p>В результате при загрузке последующих страниц любой пользователь, использующий тот же прокси, что и Жертва, получит вместо <code>http://code.jquery.com/jquery.js</code> хакерский код.</p>
</li>
</ol>
<p>Поэтому эта атака и называется «отравленный кэш».</p>
<p><strong>Такая атака возможна не для любых прокси, но при анализе уязвимости было показано, что она не теоретическая, и уязвимые прокси действительно есть.</strong></p>
<p>Поэтому придумали способ защиты – «маску».</p>
<h3><a class="main__anchor" name="маска-для-защиты-от-атаки" href="#маска-для-защиты-от-атаки">Маска для защиты от атаки</a></h3><p>Для того, чтобы защититься от атаки, и придумана маска.</p>
<p><em>Ключ маски</em> – это случайное 32-битное значение, которое варьируется от пакета к пакету. Тело сообщения проходит через XOR <code>^</code> с маской, а получатель восстанавливает его повторным XOR с ней (можно легко доказать, что <code>(x ^ a) ^ a == x</code>).</p>
<p>Маска служит двум целям:</p>
<ol>
<li>Она генерируется браузером. Поэтому теперь хакер не сможет управлять реальным содержанием тела сообщения. После накладывания маски оно превратится в бинарную мешанину.</li>
<li>Получившийся пакет данных уже точно не может быть воспринят промежуточным прокси как HTTP-запрос.</li>
</ol>
<p><strong>Наложение маски требует дополнительных ресурсов, поэтому протокол WebSocket не требует её.</strong></p>
<p>Если по этому протоколу связываются два клиента (не обязательно браузеры), доверяющие друг другу и посредникам, то можно поставить бит <code>Маска</code> в <code>0</code>, и тогда ключ маски не указывается.</p>
<h2><a class="main__anchor" name="пример" href="#пример">Пример</a></h2><p>Рассмотрим прототип чата на WebSocket и Node.JS.</p>
<p>HTML: посетитель отсылает сообщения из формы и принимает в <code>div</code></p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;!-- форма для отправки сообщений --&gt;
&lt;form name=&quot;publish&quot;&gt;
  &lt;input type=&quot;text&quot; name=&quot;message&quot;&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Отправить&quot;&gt;
&lt;/form&gt;

&lt;!-- здесь будут появляться входящие сообщения --&gt;
&lt;div id=&quot;subscribe&quot;&gt;&lt;/div&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Код на клиенте:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// создать подключение
var socket = new WebSocket(&quot;ws://localhost:8081&quot;);

// отправить сообщение из формы publish
document.forms.publish.onsubmit = function() {
  var outgoingMessage = this.message.value;

  socket.send(outgoingMessage);
  return false;
};

// обработчик входящих сообщений
socket.onmessage = function(event) {
  var incomingMessage = event.data;
  showMessage(incomingMessage);
};

// показать сообщение в div#subscribe
function showMessage(message) {
  var messageElem = document.createElement('div');
  messageElem.appendChild(document.createTextNode(message));
  document.getElementById('subscribe').appendChild(messageElem);
}</code></pre>
        </div>
      </div>
      
      </div><p>Серверный код можно писать на любой платформе. В нашем случае это будет Node.JS, с использованием модуля <a href="https://github.com/websockets/ws">ws</a>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var WebSocketServer = new require('ws');

// подключенные клиенты
var clients = {};

// WebSocket-сервер на порту 8081
var webSocketServer = new WebSocketServer.Server({
  port: 8081
});
webSocketServer.on('connection', function(ws) {

  var id = Math.random();
  clients[id] = ws;
  console.log(&quot;новое соединение &quot; + id);

  ws.on('message', function(message) {
    console.log('получено сообщение ' + message);

    for (var key in clients) {
      clients[key].send(message);
    }
  });

  ws.on('close', function() {
    console.log('соединение закрыто ' + id);
    delete clients[id];
  });

});</code></pre>
        </div>
      </div>
      
      </div><p>Рабочий пример можно скачать: <a href="http://learn.javascript.ru/article/websockets/websocket.zip">websocket.zip</a>. Понадобится поставить два модуля: <code>npm install node-static &amp;&amp; npm install ws</code>.</p>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><p>WebSocket – современное средство коммуникации. Кросс-доменное, универсальное, безопасное.</p>
<p>На текущий момент он работает в браузерах IE10+, FF11+, Chrome 16+, Safari 6+, Opera 12.5+. В более старых версиях FF, Chrome, Safari, Opera есть поддержка черновых редакций протокола.</p>
<p>Там, где вебсокеты не работают – обычно используют другие транспорты, например <code>IFRAME</code>. Вы найдёте их в других статьях этого раздела.</p>
<p>Есть и готовые библиотеки, реализующие функционал COMET с использованием сразу нескольких транспортов, из которых вебсокет имеет приоритет. Как правило, библиотеки состоят из двух частей: клиентской и серверной.</p>
<p>Например, для Node.JS одной из самых известных библиотек является <a href="http://socket.io/">Socket.IO</a>.</p>
<p>К недостаткам библиотек следует отнести то, что некоторые продвинутые возможности WebSocket, такие как двухсторонний обмен бинарными данными, в них недоступны. С другой – в большинстве случаев стандартного текстового обмена вполне достаточно.</p>
</div></article></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>