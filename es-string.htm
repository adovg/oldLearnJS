<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="js.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Язык JavaScript</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="es-modern.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Современные возможности ES-2015</span></a></li></ol><h1 class="main__header-title">Строки</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Строки"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Есть ряд улучшений и новых методов для строк.</p>
<p>Начнём с, пожалуй, самого важного.</p>
<h2><a class="main__anchor" name="строки-шаблоны" href="#строки-шаблоны">Строки-шаблоны</a></h2><p>Добавлен новый вид кавычек для строк:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">let str = `обратные кавычки`;</code></pre>
        </div>
      </div>
      
      </div><p>Основные отличия от двойных <code>&quot;…&quot;</code> и одинарных <code>'…'</code> кавычек:</p>
<ul>
<li>
<p><strong>В них разрешён перевод строки.</strong></p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert(`моя
  многострочная
  строка`);</code></pre>
        </div>
      </div>
      
      </div><p>Заметим, что пробелы и, собственно, перевод строки также входят в строку, и будут выведены.</p>
</li>
<li>
<p><strong>Можно вставлять выражения при помощи <code>${…}</code>.</strong></p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';
let apples = 2;
let oranges = 3;

alert(`${apples} + ${oranges} = ${apples + oranges}`); // 2 + 3 = 5</code></pre>
        </div>
      </div>
      
      </div><p>Как видно, при помощи <code>${…}</code> можно вставлять как и значение переменной <code>${apples}</code>, так и более сложные выражения, которые могут включать в себя операторы, вызовы функций и т.п. Такую вставку называют «интерполяцией».</p>
</li>
</ul>
<h2><a class="main__anchor" name="функции-шаблонизации" href="#функции-шаблонизации">Функции шаблонизации</a></h2><p>Можно использовать свою функцию шаблонизации для строк.</p>
<p>Название этой функции ставится перед первой обратной кавычкой:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">let str = func`моя строка`;</code></pre>
        </div>
      </div>
      
      </div><p>Эта функция будет автоматически вызвана и получит в качестве аргументов строку, разбитую по вхождениям параметров <code>${…}</code> и сами эти параметры.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

function f(strings, ...values) {
  alert(JSON.stringify(strings));     // [&quot;Sum of &quot;,&quot; + &quot;,&quot; =\n &quot;,&quot;!&quot;]
  alert(JSON.stringify(strings.raw)); // [&quot;Sum of &quot;,&quot; + &quot;,&quot; =\\n &quot;,&quot;!&quot;]
  alert(JSON.stringify(values));      // [3,5,8]
}

let apples = 3;
let oranges = 5;

//          |  s[0] | v[0] |s[1]| v[1]  |s[2]  |      v[2]      |s[3]
let str = f`Sum of ${apples} + ${oranges} =\n ${apples + oranges}!`;</code></pre>
        </div>
      </div>
      
      </div><p>В примере выше видно, что строка разбивается по очереди на части: «кусок строки» – «параметр» – «кусок строки» – «параметр».</p>
<ul>
<li>Участки строки идут в первый аргумент-массив <code>strings</code>.</li>
<li>У этого массива есть дополнительное свойство <code>strings.raw</code>. В нём находятся строки в точности как в оригинале. Это влияет на спец-символы, например в <code>strings</code> символ <code>\n</code> – это перевод строки, а в <code>strings.raw</code> – это именно два символа <code>\n</code>.</li>
<li>Дальнейший список аргументов функции шаблонизации – это значения выражений в <code>${...}</code>, в данном случае их три.</li>
</ul>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Зачем <code>strings.raw</code>?</span></div>
            <div class="important__content"><p>В отличие от <code>strings</code>, в <code>strings.raw</code> содержатся участки строки в «изначально введённом» виде.</p>
<p>То есть, если в строке находится <code>\n</code> или <code>\u1234</code> или другое особое сочетание символов, то оно таким и останется.</p>
<p>Это нужно в тех случаях, когда функция шаблонизации хочет произвести обработку полностью самостоятельно (свои спец. символы?). Или же когда обработка спец. символов не нужна – например, строка содержит «обычный текст», набранный непрограммистом без учёта спец. символов.</p>
</div></div>
<p>Как видно, функция имеет доступ ко всему: к выражениям, к участкам текста и даже, через <code>strings.raw</code> – к оригинально введённому тексту без учёта стандартных спец. символов.</p>
<p>Функция шаблонизации может как-то преобразовать строку и вернуть новый результат.</p>
<p>В простейшем случае можно просто «склеить» полученные фрагменты в строку:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

// str восстанавливает строку
function str(strings, ...values) {
  let str = &quot;&quot;;
  for(let i=0; i&lt;values.length; i++) {
    str += strings[i];
    str += values[i];
  }

  // последний кусок строки
  str += strings[strings.length-1];
  return str;
}

let apples = 3;
let oranges = 5;

// Sum of 3 + 5 = 8!
alert( str`Sum of ${apples} + ${oranges} = ${apples + oranges}!`);</code></pre>
        </div>
      </div>
      
      </div><p>Функция <code>str</code> в примере выше делает то же самое, что обычные обратные кавычки. Но, конечно, можно пойти намного дальше. Например, генерировать из HTML-строки DOM-узлы (функции шаблонизации не обязательно возвращать именно строку).</p>
<p>Или можно реализовать интернационализацию. В примере ниже функция <code>i18n</code> осуществляет перевод строки.</p>
<p>Она подбирает по строке вида <code>&quot;Hello, ${name}!&quot;</code> шаблон перевода <code>&quot;Привет, {0}!&quot;</code> (где <code>{0}</code> – место для вставки параметра) и возвращает переведённый результат со вставленным именем <code>name</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="23-26">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

let messages = {
  &quot;Hello, {0}!&quot;: &quot;Привет, {0}!&quot;
};

function i18n(strings, ...values) {
  // По форме строки получим шаблон для поиска в messages
  // На месте каждого из значений будет его номер: {0}, {1}, …
  let pattern = &quot;&quot;;
  for(let i=0; i&lt;values.length; i++) {
    pattern += strings[i] + '{' + i + '}';
  }
  pattern += strings[strings.length-1];
  // Теперь pattern = &quot;Hello, {0}!&quot;

  let translated = messages[pattern]; // &quot;Привет, {0}!&quot;

  // Заменит в &quot;Привет, {0}&quot; цифры вида {num} на values[num]
  return translated.replace(/\{(\d)\}/g, (s, num) =&gt; values[num]);
}

// Пример использования
let name = &quot;Вася&quot;;

// Перевести строку
alert( i18n`Hello, ${name}!` ); // Привет, Вася!</code></pre>
        </div>
      </div>
      
      </div><p>Итоговое использование выглядит довольно красиво, не правда ли?</p>
<p>Разумеется, эту функцию можно улучшить и расширить. Функция шаблонизации – это своего рода «стандартный синтаксический сахар» для упрощения форматирования и парсинга строк.</p>
<h2><a class="main__anchor" name="улучшена-поддержка-юникода" href="#улучшена-поддержка-юникода">Улучшена поддержка юникода</a></h2><p>Внутренняя кодировка строк в JavaScript – это UTF-16, то есть под каждый символ отводится ровно два байта.</p>
<p>Но под всевозможные символы всех языков мира 2 байт не хватает. Поэтому бывает так, что одному символу языка соответствует два юникодных символа (итого 4 байта). Такое сочетание называют «суррогатной парой».</p>
<p>Самый частый пример суррогатной пары, который можно встретить в литературе – это китайские иероглифы.</p>
<p>Заметим, однако, что не всякий китайский иероглиф – суррогатная пара. Существенная часть «основного» юникод-диапазона как раз отдана под китайский язык, поэтому некоторые иероглифы – которые в неё «влезли» – представляются одним юникод-символом, а те, которые не поместились (реже используемые) – двумя.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( '我'.length ); // 1
alert( '𩷶'.length ); // 2</code></pre>
        </div>
      </div>
      
      </div><p>В тексте выше для первого иероглифа есть отдельный юникод-символ, и поэтому длина строки <code>1</code>, а для второго используется суррогатная пара. Соответственно, длина – <code>2</code>.</p>
<p>Китайскими иероглифами суррогатные пары, естественно, не ограничиваются.</p>
<p>Ими представлены редкие математические символы, а также некоторые символы для эмоций, к примеру:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( '𝒳'.length ); // 2, MATHEMATICAL SCRIPT CAPITAL X
alert( '😂'.length ); // 2, FACE WITH TEARS OF JOY</code></pre>
        </div>
      </div>
      
      </div><p>В современный JavaScript добавлены методы <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint">String.fromCodePoint</a> и <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt">str.codePointAt</a> – аналоги <code>String.fromCharCode</code> и <code>str.charCodeAt</code>, корректно работающие с суррогатными парами.</p>
<p>Например, <code>charCodeAt</code> считает суррогатную пару двумя разными символами и возвращает код каждой:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// как будто в строке два разных символа (на самом деле один)
alert( '𝒳'.charCodeAt(0) + ' ' + '𝒳'.charCodeAt(1) ); // 55349 56499</code></pre>
        </div>
      </div>
      
      </div><p>…В то время как <code>codePointAt</code> возвращает его Unicode-код суррогатной пары правильно:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// один символ с &quot;длинным&quot; (более 2 байт) unicode-кодом
alert( '𝒳'.codePointAt(0) ); // 119987</code></pre>
        </div>
      </div>
      
      </div><p>Метод <code>String.fromCodePoint(code)</code> корректно создаёт строку из «длинного кода», в отличие от старого <code>String.fromCharCode(code)</code>.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// Правильно
alert( String.fromCodePoint(119987) ); // 𝒳
// Неверно!
alert( String.fromCharCode(119987) ); // 풳</code></pre>
        </div>
      </div>
      
      </div><p>Более старый метод <code>fromCharCode</code> в последней строке дал неверный результат, так как он берёт только первые два байта от числа <code>119987</code> и создаёт символ из них, а остальные отбрасывает.</p>
<h3><a class="main__anchor" name="u-длинный-код" href="#u-длинный-код">\u{длинный код}</a></h3><p>Есть и ещё синтаксическое улучшение для больших Unicode-кодов.</p>
<p>В JavaScript-строках давно можно вставлять символы по Unicode-коду, вот так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( &quot;\u2033&quot; ); // ″, символ двойного штриха</code></pre>
        </div>
      </div>
      
      </div><p>Синтаксис: <code>\uNNNN</code>, где <code>NNNN</code> – четырёхзначный шестнадцатиричный код, причём он должен быть ровно четырёхзначным.</p>
<p>«Лишние» цифры уже не войдут в код, например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( &quot;\u20331&quot; ); // Два символа: символ двойного штриха ″, а затем 1</code></pre>
        </div>
      </div>
      
      </div><p>Чтобы вводить более длинные коды символов, добавили запись <code>\u{NNNNNNNN}</code>, где <code>NNNNNNNN</code> – максимально восьмизначный (но можно и меньше цифр) код.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( &quot;\u{20331}&quot; ); // 𠌱, китайский иероглиф с этим кодом</code></pre>
        </div>
      </div>
      
      </div><h3><a class="main__anchor" name="unicode-нормализация" href="#unicode-нормализация">Unicode-нормализация</a></h3><p>Во многих языках есть символы, которые получаются как сочетание основного символа и какого-то значка над ним или под ним.</p>
<p>Например, на основе обычного символа <code>a</code> существуют символы: <code>àáâäãåā</code>. Самые часто встречающиеся подобные сочетания имеют отдельный юникодный код. Но отнюдь не все.</p>
<p>Для генерации произвольных сочетаний используются несколько юникодных символов: основа и один или несколько значков.</p>
<p>Например, если после символа <code>S</code> идёт символ «точка сверху» (код <code>\u0307</code>), то показано это будет как «S с точкой сверху» <code>Ṡ</code>.</p>
<p>Если нужен ещё значок над той же буквой (или под ней) – без проблем. Просто добавляем соответствующий символ.</p>
<p>К примеру, если добавить символ «точка снизу» (код <code>\u0323</code>), то будет «S с двумя точками сверху и снизу» <code>Ṩ</code> .</p>
<p>Пример этого символа в JavaScript-строке:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert(&quot;S\u0307\u0323&quot;); // Ṩ</code></pre>
        </div>
      </div>
      
      </div><p>Такая возможность добавить произвольной букве нужные значки, с одной стороны, необходима, а с другой стороны – возникает проблемка: можно представить одинаковый с точки зрения визуального отображения и интерпретации символ – разными сочетаниями Unicode-кодов.</p>
<p>Вот пример:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert(&quot;S\u0307\u0323&quot;); // Ṩ
alert(&quot;S\u0323\u0307&quot;); // Ṩ

alert( &quot;S\u0307\u0323&quot; == &quot;S\u0323\u0307&quot; ); // false</code></pre>
        </div>
      </div>
      
      </div><p>В первой строке после основы <code>S</code> идёт сначала значок «верхняя точка», а потом – нижняя, во второй – наоборот. По кодам строки не равны друг другу. Но символ задают один и тот же.</p>
<p>С целью разрешить эту ситуацию, существует <em>юникодная нормализация</em>, при которой строки приводятся к единому, «нормальному», виду.</p>
<p>В современном JavaScript это делает метод <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/normalize">str.normalize()</a>.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( &quot;S\u0307\u0323&quot;.normalize() == &quot;S\u0323\u0307&quot;.normalize() ); // true</code></pre>
        </div>
      </div>
      
      </div><p>Забавно, что в данной конкретной ситуации <code>normalize()</code> приведёт последовательность из трёх символов к одному: <a href="http://www.fileformat.info/info/unicode/char/1e68/index.htm">\u1e68 (S с двумя точками)</a>.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( &quot;S\u0307\u0323&quot;.normalize().length ); // 1, нормализовало в один символ
alert( &quot;S\u0307\u0323&quot;.normalize() == &quot;\u1e68&quot; ); // true</code></pre>
        </div>
      </div>
      
      </div><p>Это, конечно, не всегда так, просто в данном случае оказалось, что именно такой символ в юникоде уже есть. Если добавить значков, то нормализация уже даст несколько символов.</p>
<p>Для большинства практических задач информации, данной выше, должно быть вполне достаточно, но если хочется более подробно ознакомиться с вариантами и правилами нормализации – они описаны в приложении к стандарту юникод <a href="http://www.unicode.org/reports/tr15/">Unicode Normalization Forms</a>.</p>
<h2><a class="main__anchor" name="полезные-методы" href="#полезные-методы">Полезные методы</a></h2><p>Добавлен ряд полезных методов общего назначения:</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes">str.includes(s)</a> – проверяет, включает ли одна строка в себя другую, возвращает <code>true/false</code>.</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith">str.endsWith(s)</a> – возвращает <code>true</code>, если строка <code>str</code> заканчивается подстрокой <code>s</code>.</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith">str.startsWith(s)</a> – возвращает <code>true</code>, если строка <code>str</code> начинается со строки <code>s</code>.</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat">str.repeat(times)</a> – повторяет строку <code>str</code> <code>times</code> раз.</li>
</ul>
<p>Конечно, всё это можно было сделать при помощи других встроенных методов, но новые методы более удобны.</p>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><p>Улучшения:</p>
<ul>
<li>Строки-шаблоны – для удобного задания строк (многострочных, с переменными), плюс возможность использовать функцию шаблонизации для самостоятельного форматирования.</li>
<li>Юникод – улучшена работа с суррогатными парами.</li>
<li>Полезные методы для проверок вхождения одной строки в другую.</li>
</ul>
</div></article></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>