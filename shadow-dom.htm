<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="webcomponents.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Веб-компоненты: взгляд в будущее</span></a></li></ol><h1 class="main__header-title">Shadow DOM</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Shadow DOM"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Спецификация <a href="http://w3c.github.io/webcomponents/spec/shadow/">Shadow DOM</a> является отдельным стандартом. Частично он уже используется для обычных DOM-элементов, но также применяется для создания веб-компонентов.</p>
<p><em>Shadow DOM</em> – это внутренний DOM элемента, который существует отдельно от внешнего документа. В нём могут быть свои ID, свои стили и так далее. Причём снаружи его, без применения специальных техник, не видно, поэтому не возникает конфликтов.</p>
<h2><a class="main__anchor" name="внутри-браузера" href="#внутри-браузера">Внутри браузера</a></h2><p>Концепция Shadow DOM начала применяться довольно давно внутри самих браузеров. Когда браузер показывает сложные элементы управления, наподобие слайдера <code>&lt;input type=&quot;range&quot;&gt;</code> или календаря <code>&lt;input type=&quot;date&quot;&gt;</code> – внутри себя он конструирует их из самых обычных стилизованных <code>&lt;div&gt;</code>, <code>&lt;span&gt;</code> и так далее.</p>
<p>С первого взгляда они незаметны, но если в настройках Chrome Development Tools выбрать показ Shadow DOM, то их можно легко увидеть.</p>
<p>Например, вот такое содержимое будет у <code>&lt;input type=&quot;date&quot;&gt;</code>:
<img src="article/shadow-dom/shadow-dom-chrome.png" alt="" width="565" height="398"></p>
<p>То, что находится под <code>#shadow-root</code> – это и есть Shadow DOM.</p>
<p><strong>Получить элементы из Shadow DOM можно только при помощи специальных JavaScript-вызовов или селекторов. Это не обычные дети, а намного более мощное средство отделения содержимого.</strong></p>
<p>В Shadow DOM выше можно увидеть полезный атрибут <code>pseudo</code>. Он нестандартный, существует по историческим причинам. С его помощью можно стилизовать подэлементы через CSS, например, сделаем поле редактирования даты красным:</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;style&gt;
input::-webkit-datetime-edit {
  background: red;
}
&lt;/style&gt;

&lt;input type=&quot;date&quot;&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Ещё раз заметим, что <code>pseudo</code> – нестандартный атрибут. Если говорить хронологически, то сначала браузеры начали экспериментировать внутри себя с инкапсуляцией внутренних DOM-структур, а уже потом, через некоторое время, появился стандарт Shadow DOM, который позволяет делать то же самое разработчикам.</p>
<p>Далее мы рассмотрим работу с Shadow DOM из JavaScript, по стандарту <a href="http://w3c.github.io/webcomponents/spec/shadow/">Shadow DOM</a>.</p>
<h2><a class="main__anchor" name="создание-shadow-dom" href="#создание-shadow-dom">Создание Shadow DOM</a></h2><p>Shadow DOM можно создать внутри любого элемента вызовом <code>elem.createShadowRoot()</code>.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example" data-autorun="no-epub">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;p id=&quot;elem&quot;&gt;Доброе утро, страна!&lt;/p&gt;

&lt;script&gt;
  var root = elem.createShadowRoot();
  root.innerHTML = &quot;&lt;p&gt;Привет из подполья!&lt;/p&gt;&quot;;
&lt;/script&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-2z85ja"
          style="height:200px"
          src="about:blank"></iframe>
      </div>
      </div><p>Если вы запустите этот пример, то увидите, что изначальное содержимое элемента куда-то исчезло и показывается только «Привет из подполья!». Это потому, что у элемента есть Shadow DOM.</p>
<p><strong>С момента создания Shadow DOM обычное содержимое (дети) элемента не отображается, а показывается только Shadow DOM.</strong></p>
<p>Внутрь этого Shadow DOM, при желании, можно поместить обычное содержимое. Для этого нужно указать, куда. В Shadow DOM это делается через «точку вставки» (insertion point). Она объявляется при помощи тега <code>&lt;content&gt;</code>, например:</p>
<div data-trusted="1" class="code-example" data-autorun="no-epub" data-highlight-inline="4:24-43">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;p id=&quot;elem&quot;&gt;Доброе утро, страна!&lt;/p&gt;

&lt;script&gt;
  var root = elem.createShadowRoot();
  root.innerHTML = &quot;&lt;h3&gt;&lt;content&gt;&lt;/content&gt;&lt;/h3&gt; &lt;p&gt;Привет из подполья!&lt;/p&gt;&quot;;
&lt;/script&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-4kw18q"
          style="height:200px"
          src="about:blank"></iframe>
      </div>
      </div><p>Теперь вы увидите две строчки: «Доброе утро, страна!» в заголовке, а затем «Привет из подполья».</p>
<p>Shadow DOM примера выше в инструментах разработки:</p>
<figure><div class="image" style="width:280px">
      <div class="image__ratio" style="padding-top:49.28571428571429%"></div>
      <img src="article/shadow-dom/shadow-content.png" alt="" width="280" height="138" class="image__image">
      </div></figure><p>Важные детали:</p>
<ul>
<li>Тег <code>&lt;content&gt;</code> влияет только на отображение, он не перемещает узлы физически. Как видно из картинки выше, текстовый узел  «Доброе утро, страна!» остался внутри <code>p#elem</code>. Его можно даже получить при помощи <code>elem.firstElementChild</code>.</li>
<li>Внутри <code>&lt;content&gt;</code> показывается не элемент целиком <code>&lt;p id=&quot;elem&quot;&gt;</code>, а его содержимое, то есть в данном случае текст «Доброе утро, страна!».</li>
</ul>
<p><strong>В <code>&lt;content&gt;</code> атрибутом <code>select</code> можно указать конкретный селектор содержимого, которое нужно переносить. Например, <code>&lt;content select=&quot;h3&quot;&gt;&lt;/content&gt;</code> перенесёт только заголовки.</strong></p>
<p>Внутри Shadow DOM можно использовать <code>&lt;content&gt;</code> много раз с разными значениями <code>select</code>, указывая таким образом, где конкретно какие части исходного содержимого разместить. Но при этом дублирование узлов невозможно. Если узел показан в одном <code>&lt;content&gt;</code>, то в следующем он будет пропущен.</p>
<p>Например, если сначала идёт <code>&lt;content select=&quot;h3.title&quot;&gt;</code>, а затем <code>&lt;content select=&quot;h3&quot;&gt;</code>, то в первом <code>&lt;content&gt;</code> будут показаны заголовки <code>&lt;h3&gt;</code> с классом <code>title</code>, а во втором – все остальные, кроме уже показанных.</li></p>
<p>В примере выше тег <code>&lt;content&gt;&lt;/content&gt;</code> внутри пуст. Если в нём указать содержимое, то оно будет показано только в том случае, если узлов для вставки нет. Например потому что ни один узел не подпал под указанный <code>select</code>, или все они уже отображены другими, более ранними <code>&lt;content&gt;</code>.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example" data-autorun="no-epub">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;section id=&quot;elem&quot;&gt;
  &lt;h1&gt;Новости&lt;/h1&gt;
  &lt;article&gt;Жили-были &lt;i&gt;старик со старухой&lt;/i&gt;, но недавно...&lt;/article&gt;
&lt;/section&gt;

&lt;script&gt;
  var root = elem.createShadowRoot();

  root.innerHTML = &quot;&lt;content select='h1'&gt;&lt;/content&gt; \
   &lt;content select='.author'&gt;Без автора.&lt;/content&gt; \
   &lt;content&gt;&lt;/content&gt;&quot;;

&lt;/script&gt;

&lt;button onclick=&quot;alert(root.innerHTML)&quot;&gt;root.innerHTML&lt;/button&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-c8rut7"
          style="height:200px"
          src="about:blank"></iframe>
      </div>
      </div><p>При запуске мы увидим, что:</p>
<ul>
<li>Первый <code>&lt;content select='h1'&gt;</code> выведет заголовок.</li>
<li>Второй <code>&lt;content select=&quot;.author&quot;&gt;</code> вывел бы автора, но так как такого элемента нет – выводится содержимое самого <code>&lt;content select=&quot;.author&quot;&gt;</code>, то есть «Без автора».</li>
<li>Третий <code>&lt;content&gt;</code> выведет остальное содержимое исходного элемента – уже без заголовка <code>&lt;h1&gt;</code>, он выведен ранее!</li>
</ul>
<p>Ещё раз обратим внимание, что <code>&lt;content&gt;</code> физически не перемещает узлы по DOM. Он только показывает, где их отображать, а также, как мы увидим далее, влияет на применение стилей.</p>
<h2><a class="main__anchor" name="корень-shadowroot" href="#корень-shadowroot">Корень shadowRoot</a></h2><p>После создания корень внутреннего DOM-дерева доступен как <code>elem.shadowRoot</code>.</p>
<p>Он представляет собой специальный объект, поддерживающий основные методы CSS-запросов и подробно описанный в стандарте как <a href="http://w3c.github.io/webcomponents/spec/shadow/#shadowroot-object">ShadowRoot</a>.</p>
<p>Если нужно работать с содержимым в Shadow DOM, то нужно перейти к нему через <code>elem.shadowRoot</code>. Можно и создать новое Shadow DOM-дерево из JavaScript, например:</p>
<div data-trusted="1" class="code-example" data-autorun="no-epub" data-highlight-block="3-3,10-10">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;p id=&quot;elem&quot;&gt;Доброе утро, страна!&lt;/p&gt;

&lt;script&gt;
  // создать новое дерево Shadow DOM для elem
  var root = elem.createShadowRoot();

  root.innerHTML = &quot;&lt;h3&gt;&lt;content&gt;&lt;/content&gt;&lt;/h3&gt; &lt;p&gt;Привет из подполья!&lt;/p&gt; &lt;hr&gt;&quot;;
&lt;/script&gt;

&lt;script&gt;
  // прочитать данные из Shadow DOM для elem
  var root = elem.shadowRoot;
  // Привет из подполья!
  document.write(&quot;&lt;p&gt;p:&quot; + root.querySelector('p').innerHTML);
  // пусто, так как физически узлы - вне content
  document.write(&quot;&lt;p&gt;content:&quot; + root.querySelector('content').innerHTML);
&lt;/script&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-2tmjl6"
          style="height:200px"
          src="about:blank"></iframe>
      </div>
      </div><div class="important important_warn">
            <div class="important__header"><span class="important__type">Внутрь встроенных элементов так «залезть» нельзя</span></div>
            <div class="important__content"><p>На момент написания статьи <code>shadowRoot</code> можно получить только для Shadow DOM, созданного описанным выше способом, но не встроенного, как в элементах типа <code>&lt;input type=&quot;date&quot;&gt;</code>.</p>
</div></div>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><p>Shadow DOM – это средство для создания отдельного DOM-дерева внутри элемента, которое не видно снаружи без применения специальных методов.</p>
<ul>
<li>Ряд браузерных элементов со сложной структурой уже имеют Shadow DOM.</li>
<li>Можно создать Shadow DOM внутри любого элемента вызовом <code>elem.createShadowRoot()</code>. В дальнейшем его корень будет доступен как <code>elem.shadowRoot</code>. У встроенных элементов он недоступен.</li>
<li>Как только у элемента появляется Shadow DOM, его изначальное содержимое скрывается. Теперь показывается только Shadow DOM, который может указать, какое содержимое хозяина куда вставлять, при помощи элемента <code>&lt;content&gt;</code>. Можно указать селектор <code>&lt;content select=&quot;селектор&quot;&gt;</code> и размещать разное содержимое в разных местах Shadow DOM.</li>
<li>Элемент <code>&lt;content&gt;</code> перемещает содержимое исходного элемента в Shadow DOM только визуально, в структуре DOM оно остаётся на тех же местах.</li>
</ul>
<p>Подробнее спецификация описана по адресу <a href="http://w3c.github.io/webcomponents/spec/shadow/">http://w3c.github.io/webcomponents/spec/shadow/</a>.</p>
<p>Далее мы рассмотрим работу с шаблонами, которые также являются частью платформы Web Components и не заменяют существующие шаблонные системы, но дополняют их важными встроенными в браузер возможностями.</p>
</div></article></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>