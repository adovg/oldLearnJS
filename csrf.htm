<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="ajax.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">AJAX и COMET</span></a></li></ol><h1 class="main__header-title">Атака CSRF</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Атака CSRF"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Нельзя говорить про AJAX и не упомянуть про важнейшую деталь его реализации – защиту от CSRF-атак.</p>
<p><a href="http://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D0%B4%D0%B4%D0%B5%D0%BB%D0%BA%D0%B0_%D0%BC%D0%B5%D0%B6%D1%81%D0%B0%D0%B9%D1%82%D0%BE%D0%B2%D1%8B%D1%85_%D0%B7%D0%B0%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2">CSRF</a> (Cross-Site Request Forgery, также XSRF) – опаснейшая атака, которая приводит к тому, что хакер может выполнить на неподготовленном сайте массу различных действий от имени других, зарегистрированных посетителей.</p>
<p>Какие это действия – отправка ли сообщений, перевод денег со счёта на счёт или смена паролей – зависят от сайта, но в любом случае эта атака входит в образовательный минимум веб-разработчика.</p>
<h2><a class="main__anchor" name="злая-форма" href="#злая-форма">Злая форма</a></h2><p>«Классический» сценарий атаки таков:</p>
<ul>
<li>
<p>Вася является залогиненным на сайт, допустим, <code>mail.com</code>. У него есть сессия в куках.</p>
</li>
<li>
<p>Вася попал на «злую страницу», например хакер пригласил его сделать это письмом или как-то иначе.</p>
</li>
<li>
<p>На злой странице находится форма такого вида:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;form action=&quot;http://mail.com/send&quot; method=&quot;POST&quot;&gt;
  &lt;input type=&quot;hidden&quot; name=&quot;message&quot; value=&quot;Сообщение&quot;&gt;
  ...
&lt;/form&gt;</code></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p>При заходе на злую страницу JavaScript вызывает <code>form.submit</code>, отправляя таким образом форму на <code>mail.com</code>.</p>
</li>
<li>
<p>Сайт <code>mail.com</code> проверяет куки, видит, что посетитель авторизован и обрабатывает форму. В данном примере форма предполагает посылку сообщения.</p>
</li>
</ul>
<p>Итог атаки – Вася, зайдя на злую страницу, ненароком отправил письмо от своего имени. Содержимое письма сформировано хакером.</p>
<h2><a class="main__anchor" name="защита" href="#защита">Защита</a></h2><p>В примере выше атака использовала слабое звено авторизации.</p>
<p><strong>Куки позволяют сайту <code>mail.com</code> проверить, что пришёл именно Вася, но ничего не говорят про данные, которые он отправляет.</strong></p>
<p>Иначе говоря, куки не гарантируют, что форму создал именно Вася. Они только удостоверяют личность, но не данные.</p>
<p>Типичный способ защиты сайтов – это «секретный ключ» (<code>secret</code>), специальное значение, которое генерируется случайным образом и сохраняется в сессии посетителя. Его знает только сервер, посетителю мы его даже не будем показывать.</p>
<p>Затем на основе ключа генерируется «токен» (<code>token</code>). Токен делается так, чтобы с одной стороны он был отличен от ключа, в частности, может быть много токенов для одного ключа, с другой – чтобы было легко проверить по токену, сгенерирован ли он на основе данного ключа или нет.</p>
<p>Для каждого токена нужно дополнительное случайное значение, которое называют «соль» <code>salt</code>.</p>
<p>Формула вычисления токена:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-none"><code class="language-none">token = salt + &quot;:&quot; + MD5(salt + &quot;:&quot; + secret)</code></pre>
        </div>
      </div>
      
      </div><p>Например:</p>
<ol>
<li>В сессии хранится <code>secret=&quot;abcdef&quot;</code>, это значение создаётся один раз.</li>
<li>Для нового токена сгенерируем <code>salt</code>, например пусть <code>salt=&quot;1234&quot;</code>.</li>
<li><code>token = &quot;1234&quot; + &quot;:&quot; + MD5(&quot;1234&quot; + &quot;:&quot; + &quot;abcdef&quot;) = &quot;1234:5ad02792a3285252e524ccadeeda3401&quot;</code>.</li>
</ol>
<p>Это значение – с одной стороны, случайное, с другой – имея такой <code>token</code>, мы можем взять его первую часть <code>1234</code> в качестве <code>salt</code> и, зная <code>secret</code>, проверить по формуле, верно ли он вычислен.</p>
<p>Не зная <code>secret</code>, невозможно сгенерировать token, который сервер воспримет как правильный.</p>
<p>Далее, токен добавляется в качестве скрытого поля к каждой форме, генерируемой на сервере.</p>
<p>То есть, «честная» форма для отсылки сообщений, созданная на <code>http://mail.com</code>, будет выглядеть так:</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;form action=&quot;http://mail.com/send&quot; method=&quot;POST&quot;&gt;
  &lt;input type=&quot;hidden&quot; name=&quot;csrf&quot; value=&quot;1234:5ad02792a3285252e524ccadeeda3401&quot;&gt;
  &lt;textarea name=&quot;message&quot;&gt;
    ...
  &lt;/textarea&gt;
&lt;/form&gt;</code></pre>
        </div>
      </div>
      
      </div><p>При её отправке сервер проверит поле <code>csrf</code>, удостоверится в правильности токена, и лишь после этого отошлёт сообщение.</p>
<p>«Злая страница» при всём желании не сможет сгенерировать подобную форму, так как не владеет <code>secret</code>, и токен будет неверным.</p>
<p>Такой токен также называют «подписью» формы, которая удостоверяет, что форма сгенерирована именно на сервере.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Подпись с полями формы</span></div>
            <div class="important__content"><p>Эта подпись говорит о том, что автор формы – сервер, но ничего не гарантирует относительно её содержания.</p>
<p>Есть ситуации, когда мы хотим быть уверены, что некоторые из полей формы посетитель не изменил самовольно. Тогда мы можем включить в MD5 для формулы токена эти поля, например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-none"><code class="language-none">token = salt + &quot;:&quot; + MD5(salt + &quot;:&quot; + secret + &quot;:&quot; + fields.money)</code></pre>
        </div>
      </div>
      
      </div><p>При отправке формы сервер проверит подпись, подставив в неё известный ему <code>secret</code> и присланное значение <code>fields.money</code>. При несовпадении либо <code>secret</code> не тот (хакер), либо <code>fields.money</code> изменено.</p>
</div></div>
<h2><a class="main__anchor" name="токен-и-ajax" href="#токен-и-ajax">Токен и AJAX</a></h2><p>Теперь перейдём к AJAX-запросам.</p>
<p>Что если посылка сообщений в нашем интерфейсе реализуется через XMLHttpRequest?</p>
<p>Как и в случае с формой, мы должны «подписать» запрос токеном, чтобы гарантировать, что его содержимое прислано на сервер именно интерфейсом сайта, а не «злой страницей».</p>
<p>Здесь возможны варианты, самый простой – это дополнительная кука.</p>
<ol>
<li>
<p>При авторизации сервер устанавливает куку с именем <code>CSRF-TOKEN</code>, и пишет в неё токен.</p>
</li>
<li>
<p>Код, осуществляющий XMLHttpRequest, получает куку и ставит заголовок <code>X-CSRF-TOKEN</code> с ней:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var request = new XMLHttpRequest();

var csrfCookie = document.cookie.match(/CSRF-TOKEN=([\w-]+)/);
if (csrfCookie) {
  request.setRequestHeader(&quot;X-CSRF-TOKEN&quot;, csrfCookie[1]);
}</code></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p>Сервер проверяет, есть ли заголовок и содержит ли он правильный токен.</p>
</li>
</ol>
<p>Защита действует потому, что прочитать куку может только JavaScript с того же домена. «Злая страница» не сможет «переложить» куку в заголовок.</p>
<p>Если нужно сделать не XMLHttpRequest, а, к примеру, динамически сгенерировать форму из JavaScript – она также подписывается аналогичным образом, скрытое поле или дополнительный URL-параметр генерируется по куке.</p>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><ul>
<li>
<p>CSRF-атака – это когда «злая страница» отправляет форму или запрос на сайт, где посетитель, предположительно, залогинен.</p>
<p>Если сайт проверяет только куки, то он такую форму принимает. А делать это не следует, так как её сгенерировал злой хакер.</p>
</li>
<li>
<p>Для защиты от атаки формы, которые генерирует <code>mail.com</code>, подписываются специальным токеном. Можно не все формы, а только те, которые осуществляют действия от имени посетителя, то есть могут служить объектом атаки.</p>
</li>
<li>
<p>Для подписи XMLHttpRequest токен дополнительно записывается в куку. Тогда JavaScript с домена <code>mail.com</code> сможет прочитать её и добавить в заголовок, а сервер – проверить, что заголовок есть и содержит корректный токен.</p>
</li>
<li>
<p>Динамически сгенерированные формы подписываются аналогично: токен из куки добавляется как URL-параметр или дополнительное поле.</p>
</li>
</ul>
</div></article></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>