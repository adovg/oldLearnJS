<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="ui.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Документ, события, интерфейсы</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="widgets.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Создание графических компонентов</span></a></li></ol><h1 class="main__header-title">Вёрстка графических компонентов</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Вёрстка графических компонентов"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>При создании графических компонентов («виджетов») в первую очередь придумывается их HTML/CSS-структура.</p>
<p>Как будет выглядеть виджет в обычном состоянии? Как будет меняться в процессе взаимодействия с посетителем?</p>
<p>Чтобы разработка виджета была удобной, при вёрстке полезно соблюдать несколько простых, но очень важных соглашений.</p>
<h2><a class="main__anchor" name="семантическая-вёрстка" href="#семантическая-вёрстка">Семантическая вёрстка</a></h2><p>HTML-разметка и названия CSS-классов должны отражать не оформление, а смысл.</p>
<p>Например, сообщение об ошибке можно сверстать так:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:5-45">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div style=&quot;color:red; border: 1px solid red&quot;&gt;
  Плохая вёрстка сообщения об ошибке: атрибут style!
&lt;/div&gt;</code></pre>
        </div>
      </div>
      
      </div><p>…Или так:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:5-27">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div class=&quot;red red-border&quot;&gt;
  Плохая вёрстка сообщения об ошибке: несемантический class!
&lt;/div&gt;</code></pre>
        </div>
      </div>
      
      </div><p>В обоих случаях вёрстка не является семантической. В первом случае – стиль, а во втором – класс содержат информацию об <em>оформлении</em>.</p>
<p><strong>При семантической вёрстке классы описывают смысл («что это?» – меню, кнопка…) и состояние (открыто, закрыто, отключено…) компонента.</strong></p>
<p>Например:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:5-18">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div class=&quot;error&quot;&gt;
  Сообщение об ошибке (error), правильная вёрстка!
&lt;/div&gt;</code></pre>
        </div>
      </div>
      
      </div><p>У предупреждения будет класс <code>warning</code> и так далее, по смыслу.</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:5-20">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div class=&quot;warning&quot;&gt;
  Предупреждение  (warning), правильная вёрстка!
&lt;/div&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Семантическая верстка упрощает поддержку и развитие CSS, упрощает взаимодействие между членами команды.</p>
<p>Такая верстка удобна для организации JS-кода. В коде мы просто ставим нужный класс, остальное делает CSS.</p>
<h2><a class="main__anchor" name="состояние-виджета-класс-на-элементе" href="#состояние-виджета-класс-на-элементе">Состояние виджета – класс на элементе</a></h2><p>Зачастую компонент может иметь несколько состояний. Например, меню может быть открыто или закрыто.</p>
<p><strong>Состояние должно добавляться CSS-классом не на тот элемент, который нужно скрыть/показать/…, а на тот, к которому оно «по смыслу» относится, обычно – на корневой элемент.</strong></p>
<p>Например, меню в закрытом состоянии скрывает свой список элементов. Класс <code>open</code> нужно добавлять не к списку опций <code>&lt;ul&gt;</code>, который скрывается-показывается, а к <em>корневому элементу</em> виджета, поскольку это состояние касается всего меню:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:17-21">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div class=&quot;menu open&quot;&gt;
  &lt;span class=&quot;title&quot;&gt;Заголовок меню&lt;/span&gt;
  &lt;ul&gt;
    &lt;li&gt;Список элементов&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Или, к примеру, разметка для индикатора загрузки может выглядеть так:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:22-29">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div class=&quot;indicator loading&quot;&gt;
  &lt;span class=&quot;progress&quot;&gt;Тут показывается прогресс&lt;/span&gt;
&lt;/div&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Состояние индикатора может быть «в процессе» (loading) или «загрузка завершена» (complete). С точки зрения оформления оно может влиять только на показ внутреннего <code>span</code>, но ставить его нужно всё равно на внешний элемент, ведь это – состояние всего компонента.</p>
<p>Из примеров выше можно подумать, что классы, описывающие состояние, всегда ставятся на корневой элемент. Но это не так.</p>
<p>Возможно и такое, что состояние относится к внутреннему элементу. Например, для дерева состояние открыт/закрыт относится к узлу, соответственно, класс должен быть на узле.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="1:13-19,4:13-17">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;ul class=&quot;tree&quot;&gt;
  &lt;li class=&quot;closed&quot;&gt;
    Закрытый узел дерева
  &lt;/li&gt;
  &lt;li class=&quot;open&quot;&gt;
    Открытый узел дерева
  &lt;/li&gt;
  ...
&lt;/ul&gt;</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="префиксы-компонента-у-классов" href="#префиксы-компонента-у-классов">Префиксы компонента у классов</a></h2><p>Рассмотрим пример вёрстки «диалогового окна»:</p>
<div data-trusted="1" class="code-example" data-demo-height="100" data-autorun="true" data-highlight-block="17-21">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div class=&quot;dialog&quot;&gt;
  &lt;h2 class=&quot;title&quot;&gt;Заголовок&lt;/h2&gt;
  &lt;div class=&quot;content&quot;&gt;
    HTML-содержимое.
  &lt;/div&gt;
  &lt;div class=&quot;close&quot;&gt;Закрыть&lt;/div&gt;
&lt;/div&gt;

&lt;style&gt;
.dialog {
  background: lightgreen;
  border: lime 2px solid;
  border-radius: 10px;
  padding: 4px;
  position: relative;
}

.dialog .title {
  margin: 0;
  font-size: 24px;
  color: darkgreen;
}

.dialog .content {
  padding: 10px 0 0 0;
}

.dialog .close {
  position: absolute;
  right: 4px;
  top: 4px;
  font-size: 10px;
}
&lt;/style&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-8wrimr"
          style="height:100px"
          src="about:blank"></iframe>
      </div>
      </div><p>Диалоговое окно может иметь любое HTML-содержимое.</p>
<p>А что будет, если в этом содержимом окажется меню – да-да, то самое, которое рассмотрели выше, со <code>&lt;span class=&quot;title&quot;&gt;</code> ?</p>
<p>Правило <code>.dialog .title</code> применяется ко всем <code>.title</code> внутри <code>.dialog</code>, а значит – и к нашему меню тоже. Будет конфликт стилей с непредсказуемыми последствиями.</p>
<p>Конечно, можно попытаться бороться с этим. Например, жёстко задать вложенность – использовать класс <code>.dialog &gt; .title</code>. Это сработает в данном конкретном примере, но как быть в тех местах, где между <code>.dialog</code> и <code>.title</code> есть другие элементы? Длинные цепочки вида <code>.dialog &gt; ... &gt; .title</code> страшновато выглядят и делают вёрстку ужасно негибкой. К счастью, есть альтернативный путь.</p>
<p><strong>Чтобы избежать возможных проблем, все классы внутри виджета начинают с его имени.</strong></p>
<p>Здесь имя <code>dialog</code>, так что все, относящиеся к диалогу, будем начинать с <code>dialog__</code></p>
<p>Получится так:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:12-18">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div class=&quot;dialog&quot;&gt;
  &lt;h2 class=&quot;dialog__title&quot;&gt;Заголовок&lt;/h2&gt;
  &lt;div class=&quot;dialog__content&quot;&gt;
    HTML-содержимое.
  &lt;/div&gt;
  &lt;div class=&quot;dialog__close&quot;&gt;Закрыть&lt;/div&gt;
&lt;/div&gt;

&lt;style&gt;
  .dialog { ... }
  .dialog__title { стиль заголовка }
  .dialog__content { стиль содержимого  }
  ...
&lt;/style&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Здесь двойное подчёркивание <code>__</code> служит «стандартным» разделителем. Можно выбрать и другой разделитель, но при этом стоит иметь в виду, что иногда имя класса может состоять из нескольких слов. Например <code>title-picture</code>. С двойным подчёркиванием: <code>dialog__title-picture</code>, очень наглядно видно где что.</p>
<p>Есть ещё одно полезное правило, которое заключается в том, что стили должны вешаться на класс, а не на тег. То есть, не <code>h2 { ... }</code>, а <code>.dialog__title { ... }</code>, где <code>.dialog__title</code> – класс на соответствующем заголовке.</p>
<p>Это позволяет и избежать конфликтов на вложенных <code>h2</code>, и использовать всегда те теги, которые имеют правильный смысл, не оглядываясь на встроенные стили (которые можно обнулить своими).</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Без фанатизма</span></div>
            <div class="important__content"><p>На практике из этих правил зачастую делают исключения. Можно «вешать» стили на теги и использовать CSS-каскады без префиксов, если мы при этом твёрдо понимаем, что конфликты заведомо исключены.</p>
<p>Например, когда мы точно знаем, что никакого произвольного HTML внутри элемента (или внутри данного поддерева DOM) не будет.</p>
</div></div>
<h2><a class="main__anchor" name="бэм" href="#бэм">БЭМ</a></h2><p>Описанное выше правило именования элементов является частью более общей концепции «БЭМ», которая разработана в Яндексе.</p>
<p>БЭМ предлагает способ организации HTML/CSS/JS в виде независимых «блоков» – компонентов, которые можно легко перемещать по файловой системе и между проектами.</p>
<p>Можно как взять часть идеологии, например систему именования классов, так и полностью перейти на инструментарий БЭМ, который даёт инструменты сборки для HTML/JS/CSS, описанных по БЭМ-методу.</p>
<p>Более подробное описание основ БЭМ можно почитать в статье <a href="https://ru.bem.info/articles/bem-for-small-projects/">https://ru.bem.info/articles/bem-for-small-projects/</a>, а о системе вообще – на сайте <a href="http://ru.bem.info/">http://ru.bem.info</a>.</p>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><ul>
<li>
<p>Вёрстка должна быть семантической, использовать соответствующие смыслу информации теги и классы.</p>
</li>
<li>
<p>Класс, описывающий состояние всего компонента, нужно ставить на его корневом элементе, а не на том, который нужно «украсить» в этом состоянии. Если состояние относится не ко всему компоненту, а к его части – то на соответствующем «по смыслу» DOM-узле.</p>
</li>
<li>
<p>Классы внутри компонента должны начинаться с префикса – имени компонента.</p>
<p>Это не всегда строго необходимо, но позволяет избежать проблем в случаях, когда компонент может содержать произвольный DOM, как например диалоговое окно с произвольным HTML-текстом.</p>
<p>Использование <code>.dialog__title</code> вместо <code>.dialog .title</code> гарантирует, что CSS не применится по ошибке к какому-нибудь другому <code>.title</code> внутри диалога.</p>
</li>
</ul>
</div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#семантическое-меню" name="семантическое-меню" class="main__anchor">Семантическое меню</a></h3><a href="task/semantic-menu.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Посмотрите на вёрстку горизонтального меню.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div class=&quot;rounded-horizontal-blocks&quot;&gt;
  &lt;div class=&quot;item&quot;&gt;Главная&lt;/div&gt;
  &lt;div class=&quot;vertical-splitter&quot;&gt;|&lt;/div&gt;
  &lt;div class=&quot;item&quot;&gt;Товары&lt;/div&gt;
  &lt;div class=&quot;item&quot;&gt;Фотографии&lt;/div&gt;
  &lt;div class=&quot;item&quot;&gt;Контакты&lt;/div&gt;
&lt;/div&gt;</code></pre>
        </div>
      </div>
      
      </div><div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-css"><code class="language-css">/*+ hide=&quot;Результат со стилями (показать стили)&quot; */
.rounded-horizontal-blocks .item {
  float: left;
  padding: 6px;
  margin: 0 2px;
  border: 1px solid gray;
  border-radius: 10px;
  cursor: pointer;
  font-size: 90%;
  background: #FFF5EE;
}

.vertical-splitter {
  float: left;
  padding: 6px;
  margin: 0 2px;
}

.item:hover {
  text-decoration: underline;
}</code></pre>
        </div>
      </div>
      
      </div><div class="code-result">
    <div class="code-result__toolbar toolbar"><div class="toolbar__tool">
        <a href="https://js.cx/task/semantic-menu/source/" target="_blank" title="открыть в новом окне" class="toolbar__button toolbar__button_external"></a>
      </div>
      <div class="toolbar__tool">
        <a href="http://plnkr.co/edit/0iD6tPU3jMMTaO8F1T4e?p=preview" target="_blank" title="открыть в песочнице"
        data-plunk-id="0iD6tPU3jMMTaO8F1T4e" class="toolbar__button toolbar__button_edit"></a>
      </div>
      </div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:50px" src="https://js.cx/task/semantic-menu/source/"></iframe>
  </div><p>Что делает эту вёрстку несемантичной? Найдите 3 ошибки (или больше).</p>
<p>Как бы вы сверстали меню правильно?</p>
<p><a href="http://plnkr.co/edit/0iD6tPU3jMMTaO8F1T4e?p=preview" target="_blank" data-plunk-id="0iD6tPU3jMMTaO8F1T4e">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Несмотря на то, что меню более-менее прилично отображается, эта вёрстка совершенно не семантична.</p>
<p>Ошибки:</p>
<ol>
<li>
<p>Во-первых, меню представляет собой <em>список элементов</em>, а для списка существует тег <code>LI</code>.</p>
<p><strong>Семантический подход – это когда теги используются по назначению.</strong> Для элементов списка <code>&lt;li&gt;</code>, для адреса <code>&lt;address&gt;</code>, для заголовка таблицы <code>&lt;th&gt;</code> и т.п.</p>
</li>
<li>
<p>Во-вторых, класс <code>rounded-horizontal-blocks</code> показывает, что содержимое должно быть <em>оформлено</em> как скругленные горизонтальные блоки. Любой класс, отражающий оформление, несемантичен.</p>
<p><strong>Правильно – чтобы класс был <em>смысловым</em></strong>. Например, <code>&lt;ul class=&quot;menu&quot;&gt;</code> будет говорить о том, что смысл элемента – «меню».</p>
</li>
<li>
<p>В-третьих, элемент <code>.vertical-splitter</code>. Здесь класс вполне семантичен, этот элемент списка является вертикальным разделителем, так что здесь всё в порядке. Но на этот раз несемантичность – в содержимом.</p>
<p><strong>Мы, по возможности, стараемся, чтобы HTML содержал именно информацию, а символ вертикальной черты<code>|</code> выполняет чисто оформительскую функцию.</strong></p>
<p>Поэтому от него следует либо вообще избавиться, либо переместить в CSS при помощи <code>::before</code>.</p>
</li>
</ol>
<p>И, наконец, это не обязательно и не ошибка, но обычно элементы, которые являются ссылками или кнопками, оформляют в <code>&lt;a&gt;</code> или <code>&lt;button&gt;</code>.</p>
<p>Вариант ниже – семантичен:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;ul class=&quot;menu&quot;&gt;
  &lt;li class=&quot;menu__item&quot;&gt;&lt;a href=&quot;#&quot;&gt;Главная&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;menu__vertical-splitter&quot;&gt;&lt;/li&gt;
  &lt;li class=&quot;menu__item&quot;&gt;&lt;a href=&quot;#&quot;&gt;Товары&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;menu__item&quot;&gt;&lt;a href=&quot;#&quot;&gt;Фотографии&lt;/a&gt;&lt;/li&gt;
  &lt;li class=&quot;menu__item&quot;&gt;&lt;a href=&quot;#&quot;&gt;Контакты&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Дополнительно, классы помечены префиксом компонента, на тот случай, если в заголовках появится произвольный HTML.</p>
<p><a href="http://plnkr.co/edit/fw5hvQVUp4eAuCkTGWGb?p=preview" target="_blank" data-plunk-id="fw5hvQVUp4eAuCkTGWGb">Открыть решение в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>