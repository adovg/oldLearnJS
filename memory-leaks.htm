<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="optimize.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Оптимизация</span></a></li></ol><h1 class="main__header-title">Утечки памяти</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Утечки памяти"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p><em>Утечки памяти</em> происходят, когда браузер по какой-то причине не может освободить память от недостижимых объектов.</p>
<p>Обычно это происходит автоматически (<a href="memory-management.htm">Управление памятью в JavaScript</a>). Кроме того, браузер освобождает память при переходе на другую страницу. Поэтому утечки в реальной жизни проявляют себя в двух ситуациях:</p>
<ol>
<li>Приложение, в котором посетитель все время на одной странице и работает со сложным JavaScript-интерфейсом. В этом случае утечки могут постепенно съедать доступную память.</li>
<li>Страница регулярно делает что-то, вызывающее утечку памяти. Посетитель (например, менеджер) оставляет компьютер на ночь включенным, чтобы не закрывать браузер с кучей вкладок. Приходит утром – а браузер съел всю память <strike>и рухнул</strike> и сильно тормозит.</li>
</ol>
<p>Утечки бывают из-за ошибок браузера, ошибок в расширениях браузера и, гораздо реже, по причине ошибок в архитектуре JavaScript-кода. Мы разберём несколько наиболее частых и важных примеров.</p>
<h2><a class="main__anchor" name="коллекция-утечек-в-ie" href="#коллекция-утечек-в-ie">Коллекция утечек в IE</a></h2><h3><a class="main__anchor" name="утечка-dom-js-в-ie8" href="#утечка-dom-js-в-ie8">Утечка DOM ↔ JS в IE8-</a></h3><p>IE до версии 8 не умел очищать циклические ссылки, появляющиеся между DOM-объектами и объектами JavaScript. В результате и DOM и JS оставались в памяти навсегда.</p>
<p>В браузере IE8 была проведена серьёзная работа над ошибками, но утечка в IE8- появляется, если круговая ссылка возникает «через объект».</p>
<p>Чтобы было понятнее, о чём речь, посмотрите на следующий код. Он вызывает утечку памяти в IE8-:</p>
<div data-trusted="1" class="code-example" data-highlight-block="10-11">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-none"><code class="language-none">function leak() {
  // Создаём новый DIV, добавляем к BODY
  var elem = document.createElement('div');
  document.body.appendChild(elem);

  // Записываем в свойство жирный объект
  elem.__expando = {
    bigAss: new Array(1000000).join('lalala')
  };

  // Создаём круговую ссылку. Без этой строки утечки не будет.
  elem.__expando.__elem = elem;

  // Удалить элемент из DOM. Браузер должен очистить память.
  elem.parentElement.removeChild(elem);
}</code></pre>
        </div>
      </div>
      
      </div><p>Полный пример (только для IE8-, а также IE9 в режиме совместимости с IE8):</p>
<div class="code-tabs code-tabs_result_on"><div class="code-tabs__tools"><div class="code-tabs__scroll-wrap"><button title="&amp;larr;" data-code-tabs-left class="code-tabs__scroll-button code-tabs__scroll-button_left"></button></div><div class="code-tabs__switches-wrap"><div data-code-tabs-switches class="code-tabs__switches"><div class="code-tabs__switches-items"><div class="code-tabs__switch code-tabs__switch_current">Результат</div><div class="code-tabs__switch">index.html</div></div></div></div><div class="code-tabs__scroll-wrap"><button title="&amp;rarr;" data-code-tabs-right class="code-tabs__scroll-button code-tabs__scroll-button_right"></button></div><div class="code-tabs__buttons"><a target="_blank" title="открыть в отдельном окне" href="article/memory-leaks/leak-ie8/default.htm" class="code-tabs__button code-tabs__button_external"></a><a target="_blank" title="редактировать в песочнице" href="http://plnkr.co/edit/TdNLjafIHCgvAlFWOQXw?p=preview" class="code-tabs__button code-tabs__button_edit"></a></div></div><div data-code-tabs-content style="height:200px" class="code-tabs__content"><div class="code-tabs__section code-tabs__section_current"><iframe src="article/memory-leaks/leak-ie8/default.htm" class="code-tabs__result"></iframe></div><div class="code-tabs__section"><pre class="language-markup line-numbers"><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=8&quot;&gt;
&lt;/head&gt;

&lt;body&gt;


  &lt;script&gt;
    // Утечка в IE8 standards mode, а также в IE9 в режиме IE8
    // См. http://blog.j15r.com/2009/07/memory-leaks-in-ie8.html
    function leak() {
      // Создаём новый DIV, добавляем к BODY
      var elem = document.createElement('div');
      document.body.appendChild(elem);

      // Записываем в свойство жирный объект
      elem.__expando = {
        bigAss: new Array(1000000).join('lalala')
      };

      // Создаём круговую ссылку. Без этой строки утечки не будет.
      elem.__expando.__elem = elem;

      // Удалить элемент из DOM. Браузер должен очистить память.
      elem.parentElement.removeChild(elem);
    }
  &lt;/script&gt;

  &lt;p&gt;Нажимайте на кнопку и наблюдайте, как увеличивается количество занимаемой браузером памяти.&lt;/p&gt;
  &lt;button onclick=&quot;leak()&quot;&gt;Создать утечку!&lt;/button&gt;


&lt;/body&gt;

&lt;/html&gt;</code></pre></div></div></div><p>Круговая ссылка и, как следствие, утечка может возникать и неявным образом, через замыкание:</p>
<div data-trusted="1" class="code-example" data-highlight-block="6-6">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function leak() {
  var elem = document.createElement('div');
  document.body.appendChild(elem);

  elem.__expando = {
    bigAss: new Array(1000000).join('lalala'),
    method: function() {} // создаётся круговая ссылка через замыкание
  };

  // Удалить элемент из DOM. Браузер должен очистить память.
  elem.parentElement.removeChild(elem);
}</code></pre>
        </div>
      </div>
      
      </div><p>Полный пример (IE8-, IE9 в режиме совместимости с IE8):</p>
<div class="code-tabs code-tabs_result_on"><div class="code-tabs__tools"><div class="code-tabs__scroll-wrap"><button title="&amp;larr;" data-code-tabs-left class="code-tabs__scroll-button code-tabs__scroll-button_left"></button></div><div class="code-tabs__switches-wrap"><div data-code-tabs-switches class="code-tabs__switches"><div class="code-tabs__switches-items"><div class="code-tabs__switch code-tabs__switch_current">Результат</div><div class="code-tabs__switch">index.html</div></div></div></div><div class="code-tabs__scroll-wrap"><button title="&amp;rarr;" data-code-tabs-right class="code-tabs__scroll-button code-tabs__scroll-button_right"></button></div><div class="code-tabs__buttons"><a target="_blank" title="открыть в отдельном окне" href="article/memory-leaks/leak-ie8-2/default.htm" class="code-tabs__button code-tabs__button_external"></a><a target="_blank" title="редактировать в песочнице" href="http://plnkr.co/edit/Tge43Pc5NZoOlwDznlJO?p=preview" class="code-tabs__button code-tabs__button_edit"></a></div></div><div data-code-tabs-content style="height:200px" class="code-tabs__content"><div class="code-tabs__section code-tabs__section_current"><iframe src="article/memory-leaks/leak-ie8-2/default.htm" class="code-tabs__result"></iframe></div><div class="code-tabs__section"><pre class="language-markup line-numbers"><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=8&quot;&gt;
&lt;/head&gt;

&lt;body&gt;


  &lt;script&gt;
    // Утечка в IE8 standards mode, а также в IE9 в режиме IE8
    // См. http://blog.j15r.com/2009/07/memory-leaks-in-ie8.html
    function leak() {
      // Создаём новый DIV, добавляем к BODY
      var elem = document.createElement('div');
      document.body.appendChild(elem);

      elem.__expando = {
        bigAss: new Array(1000000).join('lalala'),
        method: function() {} // создаётся круговая ссылка через замыкание
      };

      // Удалить элемент из DOM. Браузер должен очистить память.
      elem.parentElement.removeChild(elem);
    }
  &lt;/script&gt;

  &lt;p&gt;Нажимайте на кнопку и наблюдайте, как увеличивается количество занимаемой браузером памяти.&lt;/p&gt;
  &lt;button onclick=&quot;leak()&quot;&gt;Создать утечку!&lt;/button&gt;

&lt;/body&gt;

&lt;/html&gt;</code></pre></div></div></div><p>Без привязки метода <code>method</code> к элементу здесь утечки не возникнет.</p>
<p>Бывает ли такая ситуация в реальной жизни? Или это – целиком синтетический пример, для заумных программистов?</p>
<p>Да, конечно бывает. Например, при разработке графических компонент – бывает удобно присвоить DOM-элементу ссылку на JavaScript-объект, который представляет собой компонент. Это упрощает делегирование и, в общем-то, логично, что DOM-элемент знает о компоненте на себе. Но в IE8- прямая привязка ведёт к утечке памяти!</p>
<p>Примерно так:</p>
<div data-trusted="1" class="code-example" data-highlight-block="5-5">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function Menu(elem) {
  elem.onclick = function() {};
}

var menu = new Menu(elem); // Menu содержит ссылку на elem
elem.menu = menu; // такая привязка или что-то подобное ведёт к утечке в IE8</code></pre>
        </div>
      </div>
      
      </div><p>Полный пример (IE8-, IE9 в режиме совместимости с IE8):</p>
<div class="code-tabs code-tabs_result_on"><div class="code-tabs__tools"><div class="code-tabs__scroll-wrap"><button title="&amp;larr;" data-code-tabs-left class="code-tabs__scroll-button code-tabs__scroll-button_left"></button></div><div class="code-tabs__switches-wrap"><div data-code-tabs-switches class="code-tabs__switches"><div class="code-tabs__switches-items"><div class="code-tabs__switch code-tabs__switch_current">Результат</div><div class="code-tabs__switch">index.html</div></div></div></div><div class="code-tabs__scroll-wrap"><button title="&amp;rarr;" data-code-tabs-right class="code-tabs__scroll-button code-tabs__scroll-button_right"></button></div><div class="code-tabs__buttons"><a target="_blank" title="открыть в отдельном окне" href="article/memory-leaks/leak-ie8-widget/default.htm" class="code-tabs__button code-tabs__button_external"></a><a target="_blank" title="редактировать в песочнице" href="http://plnkr.co/edit/tvS6hJIZ4M16N2qEKmvI?p=preview" class="code-tabs__button code-tabs__button_edit"></a></div></div><div data-code-tabs-content style="height:200px" class="code-tabs__content"><div class="code-tabs__section code-tabs__section_current"><iframe src="article/memory-leaks/leak-ie8-widget/default.htm" class="code-tabs__result"></iframe></div><div class="code-tabs__section"><pre class="language-markup line-numbers"><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=8&quot;&gt;
&lt;/head&gt;

&lt;body&gt;


  &lt;script&gt;
    // Утечка в IE8 standards mode, а также в IE9 в режиме IE8
    // См. http://blog.j15r.com/2009/07/memory-leaks-in-ie8.html
    function leak() {
      // Создаём новый DIV, добавляем к BODY
      var elem = document.createElement('div');
      document.body.appendChild(elem);

      // Записываем в свойство ссылку на объект
      var menu = new Menu(elem);
      elem.menu = menu;

      // Удалить элемент из DOM. Браузер должен очистить память.
      elem.parentElement.removeChild(elem);
    }

    function Menu(elem) {
      elem.onclick = function() {};
      this.bigAss = new Array(1000000).join('lalala');
    }
  &lt;/script&gt;

  &lt;p&gt;Нажимайте на кнопку и наблюдайте, как увеличивается количество занимаемой браузером памяти.&lt;/p&gt;
  &lt;button onclick=&quot;leak()&quot;&gt;Создать утечку!&lt;/button&gt;


&lt;/body&gt;

&lt;/html&gt;</code></pre></div></div></div><h3><a class="main__anchor" name="утечка-ie8-при-обращении-к-коллекциям-таблицы" href="#утечка-ie8-при-обращении-к-коллекциям-таблицы">Утечка IE8 при обращении к коллекциям таблицы</a></h3><p>Эта утечка происходит только в IE8 в стандартном режиме. В нём при обращении к табличным псевдо-массивам (напр. <code>rows</code>) создаются и не очищаются внутренние ссылки, что приводит к утечкам.</p>
<p>Также воспроизводится в новых IE в режиме совместимости с IE8.</p>
<p>Код:</p>
<div data-trusted="1" class="code-example" data-highlight-block="6-7">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var elem = document.createElement('div'); // любой элемент

function leak() {

  elem.innerHTML = '&lt;table&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';

  elem.firstChild.rows[0]; // просто доступ через rows[] приводит к утечке
  // при том, что мы даже не сохраняем значение в переменную

  elem.removeChild(elem.firstChild); // удалить таблицу (*)
  // alert(elem.childNodes.length) // выдал бы 0, elem очищен, всё честно
}</code></pre>
        </div>
      </div>
      
      </div><p>Полный пример (IE8):</p>
<div class="code-tabs code-tabs_result_on"><div class="code-tabs__tools"><div class="code-tabs__scroll-wrap"><button title="&amp;larr;" data-code-tabs-left class="code-tabs__scroll-button code-tabs__scroll-button_left"></button></div><div class="code-tabs__switches-wrap"><div data-code-tabs-switches class="code-tabs__switches"><div class="code-tabs__switches-items"><div class="code-tabs__switch code-tabs__switch_current">Результат</div><div class="code-tabs__switch">index.html</div></div></div></div><div class="code-tabs__scroll-wrap"><button title="&amp;rarr;" data-code-tabs-right class="code-tabs__scroll-button code-tabs__scroll-button_right"></button></div><div class="code-tabs__buttons"><a target="_blank" title="открыть в отдельном окне" href="article/memory-leaks/leak-ie8-table/default.htm" class="code-tabs__button code-tabs__button_external"></a><a target="_blank" title="редактировать в песочнице" href="http://plnkr.co/edit/FJGN44ik6GdE20i3xTUa?p=preview" class="code-tabs__button code-tabs__button_edit"></a></div></div><div data-code-tabs-content style="height:200px" class="code-tabs__content"><div class="code-tabs__section code-tabs__section_current"><iframe src="article/memory-leaks/leak-ie8-table/default.htm" class="code-tabs__result"></iframe></div><div class="code-tabs__section"><pre class="language-markup line-numbers"><code>&lt;!DOCTYPE HTML&gt;
&lt;html&gt;

&lt;body&gt;

  &lt;script&gt;
    var elem = document.createElement('div'); // любой элемент

    // Течёт в настоящем IE8, Standards Mode
    // Не течёт в других IE. Не течёт в IE9 в режиме совместимости с IE8
    function leak() {

      for (var i = 0; i &lt; 2000; i++) {

        elem.innerHTML = '&lt;table&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;';

        elem.firstChild.rows[0]; // просто доступ через rows[] приводит к утечке
        // при том, что мы даже без сохраненяем значение в переменную

        elem.removeChild(elem.firstChild); // удалить таблицу
        // elem.innerHTML = '' очистил бы память, он работает по-другому, см. главу &quot;управление памятью&quot;
      }

    }
  &lt;/script&gt;


  &lt;p&gt;Нажимайте на кнопку и наблюдайте, как увеличивается количество занимаемой браузером памяти.&lt;/p&gt;
  &lt;button onclick=&quot;leak()&quot;&gt;Создать утечку!&lt;/button&gt;


&lt;/body&gt;

&lt;/html&gt;</code></pre></div></div></div><p>Особенности:</p>
<ul>
<li>Если убрать отмеченную строку, то утечки не будет.</li>
<li>Если заменить строку <code>(*)</code> на <code>elem.innerHTML = ''</code>, то память будет очищена, т.к. этот способ работает по-другому, нежели просто <code>removeChild</code> (см. главу <a href="memory-management.htm">Управление памятью в JavaScript</a>).</li>
<li>Утечка произойдёт не только при доступе к <code>rows</code>, но и к другим свойствам, например <code>elem.firstChild.tBodies[0]</code>.</li>
</ul>
<p>Эта утечка проявляется, в частности, при удалении детей элемента следующей функцией:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function empty(elem) {
  while (elem.firstChild) elem.removeChild(elem.firstChild);
}</code></pre>
        </div>
      </div>
      
      </div><p>Если идёт доступ к табличным коллекциям и регулярное обновление таблиц при помощи DOM-методов  – утечка в IE8 будет расти.</p>
<p>Более подробно вы можете почитать об этой утечке в статье <a href="http://habrahabr.ru/post/141451/">Утечки памяти в IE8, или страшная сказка со счастливым концом</a>.</p>
<h3><a class="main__anchor" name="утечка-через-xmlhttprequest-в-ie8" href="#утечка-через-xmlhttprequest-в-ie8">Утечка через XmlHttpRequest в IE8-</a></h3><p>Следующий код вызывает утечки памяти в IE8-:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function leak() {
  var xhr = new XMLHttpRequest();

  xhr.open('GET', '/server.do', true);

  xhr.onreadystatechange = function() {
    if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) {
      // ...
    }
  }

  xhr.send(null);
}</code></pre>
        </div>
      </div>
      
      </div><p>Как вы думаете, почему? Если вы внимательно читали то, что написано выше, то имеете информацию для ответа на этот вопрос…</p>
<p>Посмотрим, какая структура памяти создается при каждом запуске:</p>
<figure><div class="image" style="width:488px">
      <div class="image__ratio" style="padding-top:63.114754098360656%"></div>
      <img src="article/memory-leaks/leak-xhr.png" alt="" width="488" height="308" class="image__image">
      </div></figure><p>Когда запускается асинхронный запрос <code>xhr</code>, браузер создаёт специальную внутреннюю ссылку (internal reference) на этот объект и будет поддерживать её, пока он находится в процессе коммуникации. Именно поэтому объект <code>xhr</code> будет жив после окончания работы функции.</p>
<p>Когда запрос завершен, браузер удаляет внутреннюю ссылку, <code>xhr</code> становится недостижимым и память очищается… Везде, кроме IE8-.</p>
<p>Полный пример (IE8):</p>
<div class="code-tabs code-tabs_result_on"><div class="code-tabs__tools"><div class="code-tabs__scroll-wrap"><button title="&amp;larr;" data-code-tabs-left class="code-tabs__scroll-button code-tabs__scroll-button_left"></button></div><div class="code-tabs__switches-wrap"><div data-code-tabs-switches class="code-tabs__switches"><div class="code-tabs__switches-items"><div class="code-tabs__switch code-tabs__switch_current">Результат</div><div class="code-tabs__switch">index.html</div></div></div></div><div class="code-tabs__scroll-wrap"><button title="&amp;rarr;" data-code-tabs-right class="code-tabs__scroll-button code-tabs__scroll-button_right"></button></div><div class="code-tabs__buttons"><a target="_blank" title="открыть в отдельном окне" href="article/memory-leaks/leak-ie8-xhr/default.htm" class="code-tabs__button code-tabs__button_external"></a><a target="_blank" title="редактировать в песочнице" href="http://plnkr.co/edit/zfcCi3JPflt3girFcIOY?p=preview" class="code-tabs__button code-tabs__button_edit"></a></div></div><div data-code-tabs-content style="height:200px" class="code-tabs__content"><div class="code-tabs__section code-tabs__section_current"><iframe src="article/memory-leaks/leak-ie8-xhr/default.htm" class="code-tabs__result"></iframe></div><div class="code-tabs__section"><pre class="language-markup line-numbers"><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
&lt;/head&gt;

&lt;body&gt;

  &lt;p&gt;Страница создаёт объект &lt;code&gt;XMLHttpRequest&lt;/code&gt; каждые 50 мс.&lt;/p&gt;

  &lt;p&gt;Нажмите на кнопку и смотрите на память, она течёт в IE&amp;lt;9.&lt;/p&gt;

  &lt;button onclick=&quot;setInterval(leak, 50);&quot;&gt;Запустить&lt;/button&gt;

  &lt;script&gt;
    function leak() {
      var xhr = new XMLHttpRequest();

      xhr.open('GET', '?' + Math.random(), true);

      xhr.onreadystatechange = function() {
        if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) {
          document.getElementById('test').innerHTML++;
        }
      }

      xhr.send(null);
    }

  &lt;/script&gt;

  &lt;div&gt;Количество запросов: &lt;span id=&quot;test&quot;&gt;0&lt;/span&gt;&lt;/div&gt;

&lt;/body&gt;

&lt;/html&gt;</code></pre></div></div></div><p>Чтобы это исправить, нам нужно разорвать круговую ссылку <code>XMLHttpRequest ↔ JS</code>. Например, можно удалить <code>xhr</code> из замыкания:</p>
<div data-trusted="1" class="code-example" data-highlight-block="12-12">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function leak() {
  var xhr = new XMLHttpRequest();

  xhr.open('GET', 'something.js?' + Math.random(), true);

  xhr.onreadystatechange = function() {
    if (xhr.readyState != 4) return;

    if (xhr.status == 200) {
      document.getElementById('test').innerHTML++;
    }

    xhr = null; // по завершении запроса удаляем ссылку из замыкания
  }

  xhr.send(null);
}</code></pre>
        </div>
      </div>
      
      </div><figure><div class="image" style="width:488px">
      <div class="image__ratio" style="padding-top:50.409836065573764%"></div>
      <img src="article/memory-leaks/leak-xhr-2.png" alt="" width="488" height="246" class="image__image">
      </div></figure><p>Теперь циклической ссылки нет – и не будет утечки.</p>
<h2><a class="main__anchor" name="объемы-утечек-памяти" href="#объемы-утечек-памяти">Объемы утечек памяти</a></h2><p>Объем «утекающей» памяти может быть небольшим. Тогда это почти не ощущается. Но так как замыкания ведут к сохранению переменных внешних функций, то одна функция может тянуть за собой много чего ещё.</p>
<p>Представьте, вы создали функцию, и одна из ее переменных содержит очень большую по объему строку (например, получает с сервера).</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f() {
  var data = &quot;Большой объем данных, например, переданных сервером&quot;

  /* делаем что-то хорошее (ну или плохое) с полученными данными */

  function inner() {
    // ...
  }

  return inner;
}</code></pre>
        </div>
      </div>
      
      </div><p>Пока функция <code>inner</code> остается в памяти, <code>LexicalEnvironment</code> с переменной большого объема внутри висит в памяти.</p>
<p>Висит до тех пор, пока функция <code>inner</code> жива.</p>
<p>Как правило, JavaScript не знает, какие из переменных функции <code>inner</code> будут использованы, поэтому оставляет их все. Исключение – виртуальная машина V8 (Chrome, Opera, Node.JS), она часто (не всегда) видит, что переменная не используется во внутренних функциях, и очистит память.</p>
<p>В других же интерпретаторах, даже если код спроектирован так, что никакой утечки нет, по вполне разумной причине может создаваться множество функций, а память будет расти потому, что функция тянет за собой своё замыкание.</p>
<p>Сэкономить память здесь вполне можно. Мы же знаем, что переменная <code>data</code> не используется в <code>inner</code>. Поэтому просто обнулим её:</p>
<div data-trusted="1" class="code-example" data-highlight-block="9-9">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f() {
  var data = &quot;Большое количество данных, например, переданных сервером&quot;

  /* действия с data */

  function inner() {
    // ...
  }

  data = null; // когда data станет не нужна -

  return inner;
}</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="поиск-и-устранение-утечек-памяти" href="#поиск-и-устранение-утечек-памяти">Поиск и устранение утечек памяти</a></h2><h3><a class="main__anchor" name="проверка-на-утечки" href="#проверка-на-утечки">Проверка на утечки</a></h3><p>Существует множество шаблонов утечек и ошибок в браузерах, которые могут приводить к утечкам. Для их устранения сперва надо постараться изолировать и воспроизвести утечку.</p>
<ul>
<li><strong>Необходимо помнить, что браузер может очистить память не сразу когда объект стал недостижим, а чуть позже.</strong> Например, сборщик мусора может ждать, пока не будет достигнут определенный лимит использования памяти, или запускаться время от времени.</li>
</ul>
<p>Поэтому если вы думаете, что нашли проблему и тестовый код, запущенный в цикле, течёт – подождите примерно минуту, добейтесь, чтобы памяти ело стабильно и много. Тогда будет понятно, что это не особенность сборщика мусора.</li></p>
<ul>
<li><strong>Если речь об IE, то надо смотреть «Виртуальную память» в списке процессов, а не только обычную «Память».</strong> Обычная может очищаться за счет того, что перемещается в виртуальную (на диск).</li>
<li>Для простоты отладки, если есть подозрение на утечку конкретных объектов, в них добавляют большие свойства-маркеры. Например, подойдет фрагмент текста: <code>new Array(999999).join('leak')</code>.</li>
</ul>
<h3><a class="main__anchor" name="настройка-браузера" href="#настройка-браузера">Настройка браузера</a></h3><p>Утечки могут возникать из-за расширений браузера, взаимодействющих со страницей. Еще более важно, что <strong>утечки могут быть следствием конфликта двух браузерных расширений</strong> Например, было такое: память текла когда включены расширения Skype и плагин антивируса одновременно.</p>
<p>Чтобы понять, в расширениях дело или нет, нужно отключить их:</p>
<ol>
<li>Отключить Flash.</li>
<li>Отключить антивирусную защиту, проверку ссылок и другие модули, и дополнения.</li>
<li>Отключить плагины. Отключить ВСЕ плагины.</li>
</ol>
<ul>
<li>Для IE есть параметр коммандной строки:</li>
</ul>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-none"><code class="language-none">&quot;C:\Program Files\Internet Explorer\iexplore.exe&quot; -extoff</code></pre>
        </div>
      </div>
      
      </div><pre><code>Кроме того необходимо отключить сторонние расширения в свойствах IE.

![](ie9_disable1.png)
</code></pre>
<figure><div class="image" style="width:451px">
      <div class="image__ratio" style="padding-top:126.16407982261642%"></div>
      <img src="article/memory-leaks/ie9_disable2.png" alt="" width="451" height="569" class="image__image">
      </div></figure><ul>
<li>Firefox необходимо запускать с чистым профилем. Используйте следующую команду для запуска менеджера профилей и создания чистого пустого профиля:</li>
</ul>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-none"><code class="language-none">firefox --profilemanager</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="инструменты" href="#инструменты">Инструменты</a></h2><p>Пожалуй, единственный браузер с поддержкой отладки памяти – это Chrome. В инструментах разработчика вкладка Timeline – Memory показывает график использования памяти.</p>
<figure><div class="image" style="width:646px">
      <div class="image__ratio" style="padding-top:54.4891640866873%"></div>
      <img src="article/memory-leaks/chrome.png" alt="" width="646" height="352" class="image__image">
      </div></figure><p>Можем посмотреть, сколько памяти используется и на что.</p>
<p>Также в Profiles есть кнопка Take Heap Snapshot, здесь можно сделать и исследовать снимок текущего состояния страницы. Снимки можно сравнивать друг с другом, выяснять количество новых объектов. Можно смотреть, почему объект не очищен и кто на него ссылается.</p>
<p>Замечательная статья на эту тему есть в документации: <a href="http://code.google.com/chrome/devtools/docs/heap-profiling.html">Chrome Developer Tools: Heap Profiling</a>.</p>
<p>Утечки памяти штука довольно сложная. В борьбе с ними вам определенно понадобится одна вещь: <em>Удача!</em></p>
<figure><div class="image" style="width:232px">
      <div class="image__ratio" style="padding-top:129.31034482758622%"></div>
      <img src="article/memory-leaks/goodluck.png" alt="" width="232" height="300" class="image__image">
      </div></figure></div></article></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>