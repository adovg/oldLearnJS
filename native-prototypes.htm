<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="js.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Язык JavaScript</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="prototypes.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">ООП в прототипном стиле</span></a></li></ol><h1 class="main__header-title">Встроенные &quot;классы&quot; в JavaScript</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Встроенные &quot;классы&quot; в JavaScript"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>В JavaScript есть встроенные объекты: <code>Date</code>, <code>Array</code>, <code>Object</code> и другие. Они используют прототипы и демонстрируют организацию «псевдоклассов» на JavaScript, которую мы вполне можем применить и для себя.</p>
<h2><a class="main__anchor" name="откуда-методы-у" href="#откуда-методы-у">Откуда методы у {} ?</a></h2><p>Начнём мы с того, что создадим пустой объект и выведем его.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var obj = {};
alert( obj ); // &quot;[object Object]&quot; ?</code></pre>
        </div>
      </div>
      
      </div><p>Где код, который генерирует строковое представление для <code>alert(obj)</code>? Объект-то ведь пустой.</p>
<h2><a class="main__anchor" name="object-prototype" href="#object-prototype">Object.prototype</a></h2><p>…Конечно же, это сделал метод <code>toString</code>, который находится… Конечно, не в самом объекте (он пуст), а в его прототипе <code>obj.__proto__</code>, можно его даже вывести:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( {}.__proto__.toString ); // function toString</code></pre>
        </div>
      </div>
      
      </div><p>Откуда новый объект <code>obj</code> получает такой <code>__proto__</code>?</p>
<ol>
<li>Запись <code>obj = {}</code> является краткой формой <code>obj = new Object</code>, где <code>Object</code> – встроенная функция-конструктор для объектов.</li>
<li>При выполнении <code>new Object</code>, создаваемому объекту ставится <code>__proto__</code> по <code>prototype</code> конструктора, который в данном случае равен встроенному <code>Object.prototype</code>.</li>
<li>В дальнейшем при обращении к <code>obj.toString()</code> – функция будет взята из <code>Object.prototype</code>.</li>
</ol>
<figure><div class="image" style="width:225px">
      <div class="image__ratio" style="padding-top:110.66666666666667%"></div>
      <img src="article/native-prototypes/native-prototypes-object.png" alt="" width="225" height="249" class="image__image">
      </div></figure><p>Это можно легко проверить:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var obj = {};

// метод берётся из прототипа?
alert( obj.toString == Object.prototype.toString ); // true, да

// проверим, правда ли что __proto__ это Object.prototype?
alert( obj.__proto__ == Object.prototype ); // true

// А есть ли __proto__ у Object.prototype?
alert( obj.__proto__.__proto__ ); // null, нет</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="встроенные-классы-в-javascript" href="#встроенные-классы-в-javascript">Встроенные «классы» в JavaScript</a></h2><p>Точно такой же подход используется в массивах <code>Array</code>, функциях <code>Function</code> и других объектах. Встроенные методы для них находятся в <code>Array.prototype</code>, <code>Function.prototype</code> и т.п.</p>
<figure><div class="image" style="width:682px">
      <div class="image__ratio" style="padding-top:60.26392961876833%"></div>
      <img src="article/native-prototypes/native-prototypes-classes.png" alt="" width="682" height="411" class="image__image">
      </div></figure><p>Например, когда мы создаём массив, <code>[1, 2, 3]</code>, то это альтернативный вариант синтаксиса <code>new Array</code>, так что у массивов есть стандартный прототип <code>Array.prototype</code>.</p>
<p>Но в нём есть методы лишь для массивов, а для общих методов всех объектов есть ссылка <code>Array.prototype.__proto__</code>, равная <code>Object.prototype</code>.</p>
<p>Аналогично, для функций.</p>
<p>Лишь для чисел (как и других примитивов) всё немного иначе, но об этом чуть далее.</p>
<p>Объект <code>Object.prototype</code> – вершина иерархии, единственный, у которого <code>__proto__</code> равно <code>null</code>.</p>
<p><strong>Поэтому говорят, что &quot;все объекты наследуют от <code>Object</code>&quot;, а если более точно, то от <code>Object.prototype</code>.</strong></p>
<p>«Псевдоклассом» или, более коротко, «классом», называют функцию-конструктор вместе с её <code>prototype</code>. Такой способ объявления классов называют «прототипным стилем ООП».</p>
<p>При наследовании часть методов переопределяется, например, у массива <code>Array</code> есть свой <code>toString</code>, который выводит элементы массива через запятую:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [1, 2, 3]
alert( arr ); // 1,2,3 &lt;-- результат Array.prototype.toString</code></pre>
        </div>
      </div>
      
      </div><p>Как мы видели раньше, у <code>Object.prototype</code> есть свой <code>toString</code>, но так как в <code>Array.prototype</code> он ищется первым, то берётся именно вариант для массивов:</p>
<figure><div class="image" style="width:233px">
      <div class="image__ratio" style="padding-top:137.3390557939914%"></div>
      <img src="article/native-prototypes/native-prototypes-array-tostring.png" alt="" width="233" height="320" class="image__image">
      </div></figure><div class="important important_smart">
            <div class="important__header"><span class="important__type">Вызов методов через <code>call</code> и <code>apply</code> из прототипа</span></div>
            <div class="important__content"><p>Ранее мы говорили о применении методов массивов к «псевдомассивам», например, можно использовать <code>[].join</code> для <code>arguments</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function showList() {
  alert( [].join.call(arguments, &quot; - &quot;) );
}

showList(&quot;Вася&quot;, &quot;Паша&quot;, &quot;Маша&quot;); // Вася - Паша - Маша</code></pre>
        </div>
      </div>
      
      </div><p>Так как метод <code>join</code> находится в <code>Array.prototype</code>, то можно вызвать его оттуда напрямую, вот так:</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function showList() {
  alert( Array.prototype.join.call(arguments, &quot; - &quot;) );
}

showList(&quot;Вася&quot;, &quot;Паша&quot;, &quot;Маша&quot;); // Вася - Паша - Маша</code></pre>
        </div>
      </div>
      
      </div><p>Это эффективнее, потому что не создаётся лишний объект массива <code>[]</code>, хотя, с другой стороны – больше букв писать.</p>
</div></div>
<h2><a class="main__anchor" name="примитивы" href="#примитивы">Примитивы</a></h2><p>Примитивы не являются объектами, но методы берут из соответствующих прототипов: <code>Number.prototype</code>, <code>Boolean.prototype</code>, <code>String.prototype</code>.</p>
<p>По стандарту, если обратиться к свойству числа, строки или логического значения, то будет создан объект соответствующего типа, например <code>new String</code> для строки, <code>new Number</code> для чисел, <code>new Boolean</code> – для логических выражений.</p>
<p>Далее будет произведена операция со свойством или вызов метода по обычным правилам, с поиском в прототипе, а затем этот объект будет уничтожен.</p>
<p>Именно так работает код ниже:</p>
<div data-trusted="1" class="code-example" data-highlight-block="2-5">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = &quot;Вася&quot;; // создали строку (примитив)

alert( user.toUpperCase() ); // ВАСЯ
// был создан временный объект new String
// вызван метод
// new String уничтожен, результат возвращён</code></pre>
        </div>
      </div>
      
      </div><p>Можно даже попробовать записать в этот временный объект свойство:</p>
<div data-trusted="1" class="code-example" data-no-strict="1" data-highlight-block="4-4">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// попытаемся записать свойство в строку:
var user = &quot;Вася&quot;;
user.age = 30;

alert( user.age ); // undefined</code></pre>
        </div>
      </div>
      
      </div><p>Свойство <code>age</code> было записано во временный объект, который был тут же уничтожен, так что смысла в такой записи немного. Пример выше выполняется без <code>use strict</code>, в строгом режиме была бы ошибка, и это хорошо, так как такая запись, по большому счету, не имеет смысла.</p>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">Конструкторы <code>String/Number/Boolean</code> – только для внутреннего использования</span></div>
            <div class="important__content"><p>Технически, можно создавать объекты для примитивов и вручную, например <code>new Number</code>. Но в ряде случаев получится откровенно бредовое поведение. Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( typeof 1 ); // &quot;number&quot;

alert( typeof new Number(1) ); // &quot;object&quot; ?!?</code></pre>
        </div>
      </div>
      
      </div><p>Или, ещё страннее:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var zero = new Number(0);

if (zero) { // объект - true, так что alert выполнится
  alert( &quot;число ноль -- true?!?&quot; );
}</code></pre>
        </div>
      </div>
      
      </div><p>Поэтому в явном виде <code>new String</code>, <code>new Number</code> и <code>new Boolean</code> никогда не вызываются.</p>
</div></div>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">Значения <code>null</code> и <code>undefined</code> не имеют свойств</span></div>
            <div class="important__content"><p>Значения <code>null</code> и <code>undefined</code> стоят особняком. Вышесказанное к ним не относится.</p>
<p>Для них нет соответствующих классов, в них нельзя записать свойство (будет ошибка), в общем, на конкурсе «самое примитивное значение» они точно разделили бы первое место.</p>
</div></div>
<h2><a class="main__anchor" name="native-prototype-change" href="#native-prototype-change">Изменение встроенных прототипов</a></h2><p>Встроенные прототипы можно изменять. В том числе – добавлять свои методы.</p>
<p>Мы можем написать метод для многократного повторения строки, и он тут же станет доступным для всех строк:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">String.prototype.repeat = function(times) {
  return new Array(times + 1).join(this);
};

alert( &quot;ля&quot;.repeat(3) ); // ляляля</code></pre>
        </div>
      </div>
      
      </div><p>Аналогично мы могли бы создать метод <code>Object.prototype.each(func)</code>, который будет применять <code>func</code> к каждому свойству:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">Object.prototype.each = function(f) {
  for (var prop in this) {
    var value = this[prop];
    f.call(value, prop, value); // вызовет f(prop, value), this=value
  }
}

// Попробуем! (внимание, пока что это работает неверно!)
var user = {
  name: 'Вася',
  age: 25
};

user.each(function(prop, val) {
  alert( prop ); // name -&gt; age -&gt; (!) each
});</code></pre>
        </div>
      </div>
      
      </div><p>Обратите внимание – пример выше работает не совсем корректно. Вместе со свойствами объекта <code>user</code> он выводит и наше свойство <code>each</code>. Технически, это правильно, так как цикл <code>for..in</code> перебирает свойства и в прототипе тоже, но не очень удобно.</p>
<p>Конечно, это легко поправить добавлением проверки <code>hasOwnProperty</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="4-5">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">Object.prototype.each = function(f) {

  for (var prop in this) {

    // пропускать свойства из прототипа
    if (!this.hasOwnProperty(prop)) continue;

    var value = this[prop];
    f.call(value, prop, value);

  }

};

// Теперь все будет в порядке
var obj = {
  name: 'Вася',
  age: 25
};

obj.each(function(prop, val) {
  alert( prop ); // name -&gt; age
});</code></pre>
        </div>
      </div>
      
      </div><p>Здесь это сработало, теперь код работает верно. Но мы же не хотим добавлять  <code>hasOwnProperty</code> в цикл по любому объекту! Поэтому либо не добавляйте свойства в <code>Object.prototype</code>, либо можно использовать <a href="descriptors-getters-setters.htm">дескриптор свойства</a> и флаг <code>enumerable</code>.</p>
<p>Это, конечно, не будет работать в IE8-:</p>
<div data-trusted="1" class="code-example" data-highlight-block="9-12">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">Object.prototype.each = function(f) {

  for (var prop in this) {
    var value = this[prop];
    f.call(value, prop, value);
  }

};

// поправить объявление свойства, установив флаг enumerable: false
Object.defineProperty(Object.prototype, 'each', {
  enumerable: false
});

// Теперь все будет в порядке
var obj = {
  name: 'Вася',
  age: 25
};

obj.each(function(prop, val) {
  alert( prop ); // name -&gt; age
});</code></pre>
        </div>
      </div>
      
      </div><p>Есть несколько «за» и «против» модификации встроенных прототипов:</p>
<div class="balance"><div class="balance__pluses">
      <div class="balance__content">
      <div class="balance__title">Достоинства</div><ul class="balance__list"><li>Методы в прототипе автоматически доступны везде, их вызов прост и красив.</li>
</ul></div></div><div class="balance__minuses">
      <div class="balance__content">
      <div class="balance__title">Недостатки</div><ul class="balance__list"><li>Новые свойства, добавленные в прототип из разных мест, могут конфликтовать между собой. Представьте, что вы подключили две библиотеки, которые добавили одно и то же свойство в прототип, но определили его по-разному. Конфликт неизбежен.</li>
<li>Изменения встроенных прототипов влияют глобально, на все-все скрипты, делать их не очень хорошо с архитектурной точки зрения.</li>
</ul></div></div></div><p>Как правило, минусы весомее, но есть одно исключение, когда изменения встроенных прототипов не только разрешены, но и приветствуются.</p>
<p><strong>Допустимо изменение прототипа встроенных объектов, которое добавляет поддержку метода из современных стандартов в те браузеры, где её пока нет.</strong></p>
<p>Например, добавим <code>Object.create(proto)</code> в старые браузеры:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">if (!Object.create) {

  Object.create = function(proto) {
    function F() {}
    F.prototype = proto;
    return new F;
  };

}</code></pre>
        </div>
      </div>
      
      </div><p>Именно так работает библиотека <a href="https://github.com/kriskowal/es5-shim">es5-shim</a>, которая предоставляет многие функции современного JavaScript для старых браузеров. Они добавляются во встроенные объекты и их прототипы.</p>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><ul>
<li>
<p>Методы встроенных объектов хранятся в их прототипах.</p>
</li>
<li>
<p>Встроенные прототипы можно расширить или поменять.</p>
</li>
<li>
<p>Добавление методов в <code>Object.prototype</code>, если оно не сопровождается <code>Object.defineProperty</code> с установкой <code>enumerable</code> (IE9+), «сломает» циклы <code>for..in</code>, поэтому стараются в этот прототип методы не добавлять.</p>
<p>Другие прототипы изменять менее опасно, но все же не рекомендуется во избежание конфликтов.</p>
<p>Отдельно стоит изменение с целью добавления современных методов в старые браузеры, таких как <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/create">Object.create</a>, <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/keys">Object.keys</a>, <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind">Function.prototype.bind</a> и т.п. Это допустимо и как раз делается <a href="https://github.com/kriskowal/es5-shim">es5-shim</a>.</p>
</li>
</ul>
</div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#добавить-функциям-defer" name="добавить-функциям-defer" class="main__anchor">Добавить функциям defer</a></h3><a href="task/defer-to-prototype.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Добавьте всем функциям в прототип метод <code>defer(ms)</code>, который откладывает вызов функции на <code>ms</code> миллисекунд.</p>
<p>После этого должен работать такой код:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f() {
  alert( &quot;привет&quot; );
}

f.defer(1000); // выведет &quot;привет&quot; через 1 секунду</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">Function.prototype.defer = function(ms) {
  setTimeout(this, ms);
}

function f() {
  alert( &quot;привет&quot; );
}

f.defer(1000); // выведет &quot;привет&quot; через 1 секунду</code></pre>
        </div>
      </div>
      
      </div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#добавить-функциям-defer-с-аргументами" name="добавить-функциям-defer-с-аргументами" class="main__anchor">Добавить функциям defer с аргументами</a></h3><a href="task/defer-to-prototype-extended.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 4</span></div><div class="task__content"><p>Добавьте всем функциям в прототип метод defer(ms), который возвращает обёртку, откладывающую вызов функции на ms миллисекунд.</p>
<p>Например, должно работать так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f(a, b) {
  alert( a + b );
}

f.defer(1000)(1, 2); // выведет 3 через 1 секунду.</code></pre>
        </div>
      </div>
      
      </div><p>То есть, должны корректно передаваться аргументы.</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">Function.prototype.defer = function(ms) {
  var f = this;
  return function() {
    var args = arguments,
      context = this;
    setTimeout(function() {
      f.apply(context, args);
    }, ms);
  }
}

// проверка
function f(a, b) {
  alert( a + b );
}

f.defer(1000)(1, 2); // выведет 3 через 1 секунду.</code></pre>
        </div>
      </div>
      
      </div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>