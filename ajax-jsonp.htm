<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="ajax.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">AJAX и COMET</span></a></li></ol><h1 class="main__header-title">Протокол JSONP</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Протокол JSONP"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Если создать тег <code>&lt;script src&gt;</code>, то при добавлении в документ запустится процесс загрузки <code>src</code>. В ответ сервер может прислать скрипт, содержащий нужные данные.</p>
<p>Таким образом можно запрашивать данные с любого сервера, в любом браузере, без каких-либо разрешений и дополнительных проверок.</p>
<p>Протокол JSONP – это «надстройка» над таким способом коммуникации. Здесь мы рассмотрим его использование в деталях.</p>
<h2><a class="main__anchor" name="запрос" href="#запрос">Запрос</a></h2><p>Простейший пример запроса:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function addScript(src) {
  var elem = document.createElement(&quot;script&quot;);
  elem.src = src;
  document.head.appendChild(elem);
}

addScript('user?id=123');</code></pre>
        </div>
      </div>
      
      </div><p>Такой вызов добавит в <code>&lt;head&gt;</code> документа тег:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script src=&quot;user?id=123&quot;&gt;&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>При добавлении тега <code>&lt;script&gt;</code> с внешним <code>src</code> в документ браузер тут же начинает его скачивать, а затем – выполняет.</p>
<p>В данном случае браузер запросит скрипт с URL <code>/user?id=123</code> и выполнит.</p>
<h2><a class="main__anchor" name="обработка-ответа-jsonp" href="#обработка-ответа-jsonp">Обработка ответа, JSONP</a></h2><p>В примере выше рассмотрено создание запроса, но как получить ответ? Допустим, сервер хочет прислать объект с данными.</p>
<p>Конечно, он может присвоить её в переменную, например так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// ответ сервера
var user = {name: &quot;Вася&quot;, age: 25 };</code></pre>
        </div>
      </div>
      
      </div><p>…А браузер по <code>script.onload</code> отловит окончание загрузки и прочитает значение <code>user</code>.</p>
<p>Но что, если одновременно делается несколько запросов? Получается, нужно присваивать в разные переменные.</p>
<p>Протокол JSONP как раз и призван облегчить эту задачу.</p>
<p>Он очень простой:</p>
<ol>
<li>
<p>Вместе с запросом клиент в специальном, заранее оговорённом, параметре передаёт название функции.</p>
<p>Обычно такой параметр называется <code>callback</code>. Например :</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:23-42">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">addScript('user?id=123&amp;callback=onUserData');</code></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p>Сервер кодирует данные в JSON и оборачивает их в вызов функции, название которой получает из параметра <code>callback</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// ответ сервера
onUserData({
  name: &quot;Вася&quot;,
  age: 25
});</code></pre>
        </div>
      </div>
      
      </div></li>
</ol>
<p>Это и называется JSONP («JSON with Padding»).</p>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">Аспект безопасности</span></div>
            <div class="important__content"><p>Клиентский код должен доверять серверу при таком запросе. Ведь серверу ничего не стоит добавить в скрипт любые команды.</p>
</div></div>
<h2><a class="main__anchor" name="реестр-callbackregistry" href="#реестр-callbackregistry">Реестр CallbackRegistry</a></h2><p>В примере выше функция <code>onUserData</code> должна быть глобальной, ведь <code>&lt;script src&gt;</code> выполняется в глобальной области видимости.</p>
<p>Хотелось бы не загрязнять глобальное пространство имён, или по крайней мере свести загрязнение к минимуму.</p>
<p>Как правило, для этого создают один глобальный объект «реестр», который мы назовём <code>CallbackRegistry</code>. Далее для каждого запроса в нём генерируется временная функция.</p>
<p>Тег будет выглядеть так:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:34-60">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script src=&quot;user?id=123&amp;callback=CallbackRegistry.func12345&quot;&gt;&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Сервер обернёт ответ в функцию <code>CallbackRegistry.func12345</code>, она вызывает нужный обработчик и очищает память, удаляя себя.</p>
<p>Далее мы посмотрим более полный код всего этого, но перед этим – важный момент! Нужно предусмотреть обработку ошибок.</p>
<h2><a class="main__anchor" name="обнаружение-ошибок" href="#обнаружение-ошибок">Обнаружение ошибок</a></h2><p>При запросе данных при помощи <code>SCRIPT</code> возможны различные ошибки:</p>
<ol>
<li>Скрипт может не загрузиться: отказ в соединении, разрыв связи…</li>
<li>Ошибка HTTP, например 500.</li>
<li>Скрипт загрузился, но внутри некорректен и не вызывает функцию. Например, на сервере произошла ошибка и в ответе передан её текст, а вовсе не данные.</li>
</ol>
<p>Чтобы отловить их все «одним махом», используем следующий алгоритм:</p>
<ol>
<li>Создаётся <code>&lt;script&gt;</code>.</li>
<li>На <code>&lt;script&gt;</code> ставятся обработчики <code>onreadystatechange</code> (для старых IE) и <code>onload/onerror</code> (для остальных браузеров).</li>
<li>При загрузке скрипт выполняет функцию-коллбэк <code>CallbackRegistry...</code>. Пусть она при запуске ставит флажок «все ок». А мы в обработчиках проверим – если флага нет, то функция не вызывалась – стало быть, ошибка при загрузке или содержимое скрипта некорректно.</li>
</ol>
<h2><a class="main__anchor" name="полный-пример" href="#полный-пример">Полный пример</a></h2><p>Итак, код функции, которая вызывается с <code>url</code> и коллбэками.</p>
<p>Он совсем небольшой, а без комментариев был бы ещё меньше:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var CallbackRegistry = {}; // реестр

// при успехе вызовет onSuccess, при ошибке onError
function scriptRequest(url, onSuccess, onError) {

  var scriptOk = false; // флаг, что вызов прошел успешно

  // сгенерировать имя JSONP-функции для запроса
  var callbackName = 'cb' + String(Math.random()).slice(-6);

  // укажем это имя в URL запроса
  url += ~url.indexOf('?') ? '&amp;' : '?';
  url += 'callback=CallbackRegistry.' + callbackName;

  // ..и создадим саму функцию в реестре
  CallbackRegistry[callbackName] = function(data) {
    scriptOk = true; // обработчик вызвался, указать что всё ок
    delete CallbackRegistry[callbackName]; // можно очистить реестр
    onSuccess(data); // и вызвать onSuccess
  };

  // эта функция сработает при любом результате запроса
  // важно: при успешном результате - всегда после JSONP-обработчика
  function checkCallback() {
    if (scriptOk) return; // сработал обработчик?
    delete CallbackRegistry[callbackName];
    onError(url); // нет - вызвать onError
  }

  var script = document.createElement('script');

  // в старых IE поддерживается только событие, а не onload/onerror
  // в теории 'readyState=loaded' означает &quot;скрипт загрузился&quot;,
  // а 'readyState=complete' -- &quot;скрипт выполнился&quot;, но иногда
  // почему-то случается только одно из них, поэтому проверяем оба
  script.onreadystatechange = function() {
    if (this.readyState == 'complete' || this.readyState == 'loaded') {
      this.onreadystatechange = null;
      setTimeout(checkCallback, 0); // Вызвать checkCallback - после скрипта
    }
  }

  // события script.onload/onerror срабатывают всегда после выполнения скрипта
  script.onload = script.onerror = checkCallback;
  script.src = url;

  document.body.appendChild(script);
}</code></pre>
        </div>
      </div>
      
      </div><p>Пример использования:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function ok(data) {
  alert( &quot;Загружен пользователь &quot; + data.name );
}

function fail(url) {
  alert( 'Ошибка при запросе ' + url );
}

// Внимание! Ответы могут приходить в любой последовательности!
scriptRequest(&quot;user?id=123&quot;, ok, fail); // Загружен
scriptRequest(&quot;/badurl.js&quot;, ok, fail); // fail, 404
scriptRequest(&quot;/&quot;, ok, fail); // fail, 200 но некорректный скрипт</code></pre>
        </div>
      </div>
      
      </div><p>Демо, по нажатию на кнопке запускаются запросы выше:</p>
<div class="code-tabs code-tabs_result_on"><div class="code-tabs__tools"><div class="code-tabs__scroll-wrap"><button title="&amp;larr;" data-code-tabs-left class="code-tabs__scroll-button code-tabs__scroll-button_left"></button></div><div class="code-tabs__switches-wrap"><div data-code-tabs-switches class="code-tabs__switches"><div class="code-tabs__switches-items"><div class="code-tabs__switch code-tabs__switch_current">Результат</div><div class="code-tabs__switch">scriptRequest.js</div><div class="code-tabs__switch">server.js</div><div class="code-tabs__switch">index.html</div></div></div></div><div class="code-tabs__scroll-wrap"><button title="&amp;rarr;" data-code-tabs-right class="code-tabs__scroll-button code-tabs__scroll-button_right"></button></div><div class="code-tabs__buttons"><a target="_blank" title="открыть в отдельном окне" href="article/ajax-jsonp/jsonp/default.htm" class="code-tabs__button code-tabs__button_external"></a><a target="_blank" href="http://learn.javascript.ru/tutorial/zipview/jsonp.zip?plunkId=DArSMeTX1J1LH87FVtqt" class="code-tabs__button code-tabs__button_download"></a></div></div><div data-code-tabs-content style="height:100px" class="code-tabs__content"><div class="code-tabs__section code-tabs__section_current"><iframe src="article/ajax-jsonp/jsonp/default.htm" class="code-tabs__result"></iframe></div><div class="code-tabs__section"><pre class="language-javascript line-numbers"><code>var CallbackRegistry = {}; // реестр

// при успехе вызовет onSuccess, при ошибке onError
function scriptRequest(url, onSuccess, onError) {

  var scriptOk = false; // флаг, что вызов прошел успешно

  // сгенерировать имя JSONP-функции для запроса
  var callbackName = 'cb' + String(Math.random()).slice(-6);

  // укажем это имя в URL запроса
  url += ~url.indexOf('?') ? '&amp;' : '?';
  url += 'callback=CallbackRegistry.' + callbackName;

  // ..и создадим саму функцию в реестре
  CallbackRegistry[callbackName] = function(data) {
    scriptOk = true; // обработчик вызвался, указать что всё ок
    delete CallbackRegistry[callbackName]; // можно очистить реестр
    onSuccess(data); // и вызвать onSuccess
  };

  // эта функция сработает при любом результате запроса
  // важно: при успешном результате - всегда после JSONP-обработчика
  function checkCallback() {
    if (scriptOk) return; // сработал обработчик?
    delete CallbackRegistry[callbackName];
    onError(url); // нет - вызвать onError
  }

  var script = document.createElement('script');

  // в старых IE поддерживается только событие, а не onload/onerror
  // в теории 'readyState=loaded' означает &quot;скрипт загрузился&quot;,
  // а 'readyState=complete' -- &quot;скрипт выполнился&quot;, но иногда
  // почему-то случается только одно из них, поэтому проверяем оба
  script.onreadystatechange = function() {
    if (this.readyState == 'complete' || this.readyState == 'loaded') {
      this.onreadystatechange = null;
      setTimeout(checkCallback, 0); // Вызвать checkCallback - после скрипта
    }
  }

  // события script.onload/onerror срабатывают всегда после выполнения скрипта
  script.onload = script.onerror = checkCallback;
  script.src = url;

  document.body.appendChild(script);
}</code></pre></div><div class="code-tabs__section"><pre class="language-javascript line-numbers"><code>var http = require('http');
var url = require('url');
var static = require('node-static');
var file = new static.Server('.', {
  cache: 0
});


function accept(req, res) {

  var urlParsed = url.parse(req.url, true);

  if (urlParsed.pathname == '/user') {
    var id = urlParsed.query.id;
    var callback = urlParsed.query.callback;

    res.setHeader('Content-Type', 'application/javascript; charset=utf-8');

    var user = {
      name: &quot;Вася&quot;,
      id: id
    };

    res.end(callback + '(' + JSON.stringify(user) + ')');

  } else {
    file.serve(req, res);
  }

}


// ------ запустить сервер -------

if (!module.parent) {
  http.createServer(accept).listen(8080);
} else {
  exports.accept = accept;
}</code></pre></div><div class="code-tabs__section"><pre class="language-markup line-numbers"><code>&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
  &lt;meta charset=&quot;UTF-8&quot;&gt;
  &lt;script src=&quot;scriptRequest.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;

  &lt;script&gt;
    function ok(data) {
      alert(&quot;Загружен пользователь &quot; + data.id + &quot;: &quot; + data.name);
    }

    function fail(url) {
      alert('Ошибка при запросе ' + url);
    }

    function go() {
      // ответы могут приходить в любой последовательности!
      scriptRequest(&quot;user?id=123&quot;, ok, fail); // Загружен
      scriptRequest(&quot;/badurl.js&quot;, ok, fail); // fail, 404
      scriptRequest(&quot;index.html&quot;, ok, fail); // fail, 200 но некорректный скрипт
    }
  &lt;/script&gt;

  &lt;button onclick='go()'&gt;Сделать запросы&lt;/button&gt;


&lt;/body&gt;

&lt;/html&gt;</code></pre></div></div></div><h2><a class="main__anchor" name="comet" href="#comet">COMET</a></h2><p>COMET через <code>SCRIPT</code> реализуется при помощи длинных опросов, также как мы обсуждали в главе <a href="xhr-longpoll.htm">COMET с XMLHttpRequest: длинные опросы</a>.</p>
<p>То есть, создаётся тег <code>&lt;script&gt;</code>, браузер запрашивает скрипт у сервера и… Сервер оставляет соединение висеть, пока не появится, что сказать. Когда сервер хочет отправить сообщение – он отвечает, используя формат JSONP. И, тут же, новый запрос…</p>
</div></article></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>