<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="ui.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Документ, события, интерфейсы</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="document.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Документ и объекты страницы</span></a></li></ol><h1 class="main__header-title">Внутреннее устройство поисковых методов</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Внутреннее устройство поисковых методов"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Эта глава не обязательна при первом чтении учебника.</p>
<p>Если вы хотите действительно глубоко понимать, что происходит при поиске, то посмотрите эту главу. Если нет – её можно пропустить.</p>
<p>Несмотря на схожесть в синтаксисе, поисковые методы <code>get*</code> и <code>querySelector*</code> внутри устроены очень по-разному.</p>
<h2><a class="main__anchor" name="document-getelementbyid-id" href="#document-getelementbyid-id">document.getElementById(id)</a></h2><p>Браузер поддерживает у себя внутреннее соответствие <code>id -&gt; элемент</code>. Поэтому нужный элемент возвращается сразу. Это очень быстро.</p>
<h2><a class="main__anchor" name="elem-queryselector-query-elem-queryselectorall-query" href="#elem-queryselector-query-elem-queryselectorall-query">elem.querySelector(query), elem.querySelectorAll(query)</a></h2><p>Чтобы найти элементы, удовлетворяющие поисковому запросу, браузер не использует никаких сложных структур данных.</p>
<p>Он просто перебирает все подэлементы внутри элемента <code>elem</code>(или по всему документу, если вызов в контексте документа) и проверяет каждый элемент на соответствие запросу <code>query</code>.</p>
<p>Вызов <code>querySelector</code> прекращает перебор после первого же найденного элемента, а <code>querySelectorAll</code> собирает найденные элементы в «псевдомассив»: внутреннюю структуру данных, по сути аналогичную массиву JavaScript.</p>
<p>Этот перебор происходит очень быстро, так как осуществляется непосредственно движком браузера, а не JavaScript-кодом.</p>
<p>Оптимизации:</p>
<ul>
<li>В случае поиска по ID: <code>elem.querySelector('#id')</code>, большинство браузеров оптимизируют поиск, используя вызов <code>getElementById</code>.</li>
<li>Последние результаты поиска сохраняются в кеше. Но это до тех пор, пока документ как-нибудь не изменится.</li>
</ul>
<h2><a class="main__anchor" name="elem-getelementsby" href="#elem-getelementsby">elem.getElementsBy*(…)</a></h2><p>Результаты поиска <code>getElementsBy*</code> –  живые!  При изменении документа – изменяется и результат запроса.</p>
<p>Например, найдём все <code>div</code> при помощи <code>querySelectorAll</code> и <code>getElementsByTagName</code>, а потом изменим документ:</p>
<div data-trusted="1" class="code-example" data-demo-height="50" data-highlight-block="9-9">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div&gt;&lt;/div&gt;
&lt;script&gt;
  var resultGet = document.getElementsByTagName('div');
  var resultQuery = document.querySelectorAll('div');

  alert( resultQuery.length + ', ' + resultGet.length ); // 1, 1

  document.body.innerHTML = ''; // удалить всё содержимое BODY

  alert( resultQuery.length + ', ' + resultGet.length ); // 1, 0
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Как видно, длина коллекции, найденной через <code>querySelectorAll</code>, осталась прежней. А длина коллекции, возвращённой <code>getElementsByTagName</code>, изменилась.</p>
<p>Дело в том, что результат запросов <code>getElementsBy*</code> – это не массив, а специальный объект, имеющий тип <a href="http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-536297177">NodeList</a> или <a href="http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-75708506">HTMLCollection</a>. Он похож на массив, так как имеет нумерованные элементы и длину, но внутри это не готовая коллекция, а «живой поисковой запрос».</p>
<p>Собственно поиск выполняется только при обращении к элементам коллекции или к её длине.</p>
<h2><a class="main__anchor" name="алгоритмы-getelementsby" href="#алгоритмы-getelementsby">Алгоритмы getElementsBy*</a></h2><p>Поиск <code>getElementsBy*</code> наиболее сложно сделать эффективно, так как его результат – «живая» коллекция, она должна быть всегда актуальной для текущего состояния документа.</p>
<div data-trusted="1" class="code-example" data-highlight-block="2-2">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var elems = document.getElementsByTagName('div');
alert( elems[0] );
// изменили документ
alert( elems[0] ); // результат может быть уже другой</code></pre>
        </div>
      </div>
      
      </div><p>Можно искать заново при каждой попытке получить элемент из <code>elems</code>. Тогда результат будет всегда актуален, но поиск будет работать уж слишком медленно. Да и зачем? Ведь, скорее всего, документ не поменялся.</p>
<p><strong>Чтобы производительность <code>getElementsBy*</code> была достаточно хорошей, активно используется кеширование результатов поиска.</strong></p>
<p>Для этого есть два основных способа: назовём их условно «Способ Firefox» (Firefox, IE) и «Способ WebKit» (Chrome, Safari, Opera).</p>
<p>Для примера, рассмотрим поиск в произвольном документе, в котором есть 1000 элементов <code>div</code>.</p>
<p>Посмотрим, как будут работать браузеры, если нужно выполнить следующий код:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// вместо document может быть любой элемент
var elems = document.getElementsByTagName('div');
alert( elems[0] );
alert( elems[995] );
alert( elems[500] );
alert( elems.length );</code></pre>
        </div>
      </div>
      
      </div><dl>
<dt>Способ Firefox</dt>
<dd>
<p>Перебрать подэлементы <code>document.body</code> в порядке их появления в поддереве. Запоминать <em>все найденные элементы</em> во внутренней структуре данных, чтобы при повторном обращении обойтись без поиска.</p>
<p>Разбор действий браузера при выполнении кода выше:</p>
</dd>
</dl>
<ol>
<li>Браузер создаёт пустую «живую коллекцию» <code>elems</code>. Пока ничего не ищет.</li>
<li>Перебирает элементы, пока не найдёт первый <code>div</code>. Запоминает его и возвращает.</li>
<li>Перебирает элементы дальше, пока не найдёт элемент с индексом <code>995</code>. Запоминает все найденные.</li>
<li>Возвращает ранее запомненный элемент с индексом <code>500</code>, без дополнительного поиска!</li>
<li>Продолжает обход поддерева с элемента, на котором остановился (<code>995</code>) и до конца. Запоминает найденные элементы и возвращает их количество.</li>
</ol>
<dl>
<dt>Способ WebKit</dt>
<dd>
<p>Перебирать подэлементы <code>document.body</code>. Запоминать только один, <em>последний найденный</em>, элемент, а также, по окончании перебора – длину коллекции.</p>
<p>Здесь кеширование используется меньше.</p>
<p>Разбор действий браузера по строкам:</p>
</dd>
</dl>
<ol>
<li>Браузер создаёт пустую «живую коллекцию» <code>elems</code>. Пока ничего не ищет.</li>
<li>Перебирает элементы, пока не найдёт первый <code>div</code>. Запоминает его и возвращает.</li>
<li>Перебирает элементы дальше, пока не найдёт элемент с индексом <code>995</code>. Запоминает его и возвращает.</li>
<li>Браузер запоминает только последний найденный, поэтому не помнит об элементе <code>500</code>. Нужно найти его перебором поддерева. Этот перебор можно начать либо с начала – вперед по поддереву, 500-й по счету) либо с элемента <code>995</code> –  назад по поддереву, 495-й по счету. Так как назад разница в индексах меньше, то браузер выбирает второй путь и идёт от 995-го назад 495 раз. Запоминает теперь уже 500-й элемент и возвращает его.</li>
<li>Продолжает обход поддерева с 500-го (не 995-го!) элемента и до конца. Запоминает число найденных элементов и возвращает его.</li>
</ol>
<p>Основное различие – в том, что Firefox запоминает все найденные, а Webkit – только последний. Таким образом, «метод Firefox» требует больше памяти, но гораздо эффективнее при повторном доступе к предыдущим элементам.</p>
<p>А «метод Webkit» ест меньше памяти и при этом работает не хуже в самом важном и частом случае – последовательном переборе коллекции, без возврата к ранее выбранным.</p>
<p><strong>Запомненные элементы сбрасываются при изменениях DOM.</strong></p>
<p>Документ может меняться. При этом, если изменение может повлиять на результаты поиска, то запомненные элементы необходимо сбросить. Например, добавление нового узла <code>div</code> сбросит запомненные элементы коллекции <code>elem.getElementsByTagName('div')</code>.</p>
<p>Сбрасывание запомненных элементов при изменении документа выполняется интеллектуально.</p>
<ol>
<li>
<p>Во-первых, при добавлении элемента будут сброшены только те коллекции, которые могли быть затронуты обновлением. Например, если в документе есть два независимых раздела <code>&lt;section&gt;</code>, и поисковая коллекция привязана к первому из них, то при добавлении во второй – она сброшена не будет.</p>
<p>Если точнее – будут сброшены все коллекции, привязанные к элементам вверх по иерархии от непосредственного родителя нового <code>div</code> и выше, то есть такие, которые потенциально могли измениться. И только они.</p>
</li>
<li>
<p>Во-вторых, если добавлен только <code>div</code>, то не будут сброшены запомненные элементы для поиска по другим тегам, например <code>elem.getElementsByTagName('a')</code>.</p>
</li>
<li>
<p>…И, конечно же, не любые изменения DOM приводят к сбросу кешей, а только те, которые могут повлиять на коллекцию. Если где-то добавлен новый атрибут элементу –  с кешем для <code>getElementsByTagName</code> ничего не произойдёт, так как атрибут никак не может повлиять на результат поиска по тегу.</p>
</li>
</ol>
<p>Прочие поисковые методы, такие как <code>getElementsByClassName</code> тоже сбрасывают кеш при изменениях интеллектуально.</p>
<p>Разницу в алгоритмах поиска легко «пощупать». Посмотрите сами:</p>
<div data-trusted="1" class="code-example" data-highlight-block="7-7,11-11">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script&gt;
  for (var i = 0; i &lt; 10000; i++) document.write('&lt;span&gt; &lt;/span&gt;');

  var elements = document.body.getElementsByTagName('span');
  var len = elements.length;

  var d = new Date;
  for (var i = 0; i &lt; len; i++) elements[i];
  alert( &quot;Последовательно: &quot; + (new Date - d) + &quot;мс&quot; ); // (1)

  var d = new Date;
  for (var i = 0; i &lt; len; i += 2) elements[i], elements[len - i - 1];
  alert( &quot;Вразнобой: &quot; + (new Date - d) + &quot;мс&quot; ); // (2)
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>В примере выше первый цикл проходит элементы последовательно. А второй – идет по шагам: один с начала, потом один с конца, потом ещё один с начала, ещё один – с конца, и так далее.</p>
<p>Количество обращений к элементам одинаково.</p>
<ul>
<li>В браузерах, которые запоминают все найденные (Firefox, IE) – скорость будет одинаковой.</li>
<li>В браузерах, которые запоминают только последний (Webkit) – разница будет порядка 100 и более раз, так как браузер вынужден бегать по дереву при каждом запросе заново.</li>
</ul>
</div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#длина-коллекции-после-удаления-элементов" name="длина-коллекции-после-удаления-элементов" class="main__anchor">Длина коллекции после удаления элементов</a></h3><a href="task/collection-length-after-remove.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Вот небольшой документ:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;ul id=&quot;menu&quot;&gt;
  &lt;li&gt;Главная страница&lt;/li&gt;
  &lt;li&gt;Форум&lt;/li&gt;
  &lt;li&gt;Магазин&lt;/li&gt;
&lt;/ul&gt;</code></pre>
        </div>
      </div>
      
      </div><ol>
<li>Что выведет следующий код (простой вопрос)?</li>
</ol>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var lis = document.body.getElementsByTagName('li');

document.body.innerHTML = &quot;&quot;;

alert( lis.length );</code></pre>
        </div>
      </div>
      
      </div><ol start="2">
<li>А такой код (вопрос посложнее)?</li>
</ol>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var menu = document.getElementById('menu');
var lis = menu.getElementsByTagName('li');

document.body.innerHTML = &quot;&quot;;

alert( lis.length );</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__step"><button type="button" class="task__step-show">Ответ на первый вопрос</button><div class="task__answer-content"><h4 class="task__step-title">Ответ на первый вопрос</h4><p>Ответ: 0, пустая коллекция.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;ul id=&quot;menu&quot;&gt;
  &lt;li&gt;Главная страница&lt;/li&gt;
  &lt;li&gt;Форум&lt;/li&gt;
  &lt;li&gt;Магазин&lt;/li&gt;
&lt;/ul&gt;
&lt;script&gt;
  var lis = document.body.getElementsByTagName('li');

  document.body.innerHTML = &quot;&quot;;

  alert( lis.length );
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Это потому, что все элементы из <code>BODY</code> удаляются, а коллекция – <em>живая</em>.</p>
</div></div><div class="task__step"><button type="button" class="task__step-show">Ответ на второй вопрос</button><div class="task__answer-content"><h4 class="task__step-title">Ответ на второй вопрос</h4><p>Ответ на второй вопрос зависит от браузера. В большинстве браузеров будет 3, коллекция не изменилась, так как она теперь привязана не к <code>BODY</code>, а к элементу, на котором идёт поиск, т.е. к <code>menu</code>.</p>
<p>Но элемент <code>menu</code> находится в переменной, и поэтому должен быть жив, а значит и его дети тоже. Но некоторые браузеры (IE10) используют агрессивный подход при работе с памятью и очищают все элементы, кроме тех, которые непосредственно хранятся в переменных.</p>
<p>Поэтому результат кода ниже в большинстве браузеров: <code>3</code>, а в IE10: <code>0</code>.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;ul id=&quot;menu&quot;&gt;
  &lt;li&gt;Главная страница&lt;/li&gt;
  &lt;li&gt;Форум&lt;/li&gt;
  &lt;li&gt;Магазин&lt;/li&gt;
&lt;/ul&gt;
&lt;script&gt;
  var menu = document.getElementById('menu');
  var lis = menu.getElementsByTagName('li');

  document.body.innerHTML = &quot;&quot;;

  alert( lis.length );
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div></div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#сравнение-количества-элементов" name="сравнение-количества-элементов" class="main__anchor">Сравнение количества элементов</a></h3><a href="task/compare-elements-count.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Для любого документа сделаем следующее:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var aList1 = document.getElementsByTagName('a');
var aList2 = document.querySelectorAll('a');</code></pre>
        </div>
      </div>
      
      </div><p>Что произойдёт со значениями <code>aList1.length</code>, <code>aList2.length</code>, если в документе вдруг появится ещё одна ссылка <code>&lt;a href=&quot;#&quot;&gt;...&lt;/a&gt;</code>?</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Значение <code>aList1</code> изменится, потому что <code>getElementsByTagName</code> – <em>живая</em> коллекция. Она автоматически дополнится новым элементом <code>a</code> и ее длина увеличится на 1.</p>
<p>А вот <code>querySelector</code>, наоборот, возвращает статичный список узлов. Он ссылается на те же самые элементы, что бы не происходило с документом. Поэтому длина <code>aList2.length</code> останется неизменной.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#бенчмаркинг-методов-поиска-в-dom" name="бенчмаркинг-методов-поиска-в-dom" class="main__anchor">Бенчмаркинг методов поиска в DOM</a></h3><a href="task/benchmark-search-dom.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 2</span></div><div class="task__content"><p>Какой метод поиска элементов работает быстрее: <code>getElementsByTagName(tag)</code> или <code>querySelectorAll(tag)</code>?</p>
<p>Напишите код, который измеряет разницу между ними.</p>
<p><em>P.S. В задаче есть подвох, все не так просто. Если разница больше 10 раз – вы решили ее неверно. Тогда подумайте, почему такое может быть.</em></p>
<p><a href="http://plnkr.co/edit/VlYCL8IYgIaDFAJWtx9R?p=preview" target="_blank" data-plunk-id="VlYCL8IYgIaDFAJWtx9R">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Для бенчмаркинга будем использовать функцию <code>bench(f, times)</code>, которая запускает функцию <code>f</code> <code>times</code> раз и возвращает разницу во времени:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function bench(f, times) {
  var d = new Date();
  for (var i = 0; i &lt; times; i++) f();
  return new Date() - d;
}</code></pre>
        </div>
      </div>
      
      </div><p>Первый вариант (неверный) – замерять разницу между функциями <code>runGet/runQuery</code>, вот так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function runGet() {
  var results = document.getElementsByTagName('p');
}

function runQuery() {
  var results = document.querySelectorAll('p');
}

alert( bench(runGet, 10000) ); // вывести время 1000*runGet</code></pre>
        </div>
      </div>
      
      </div><p>Он даст неверные результаты, т.к. <code>getElementsByTagName</code> является «живым поисковым запросом». Если не обратиться к его результатам, то поиска не произойдет вообще, т.е. <code>runGet</code> ничего по сути не ищет.</p>
<p>…А <code>querySelectorAll</code> всегда производит поиск и формирует список элементов.</p>
<p>Более правильный тест – это не только запустить поиск, но и получить все элементы, как это делается в реальной жизни.</p>
<p><a href="http://plnkr.co/edit/e7WzWq693geUa0YiaJ9y?p=preview" target="_blank" data-plunk-id="e7WzWq693geUa0YiaJ9y">Открыть решение в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#получить-второй-li" name="получить-второй-li" class="main__anchor">Получить второй LI</a></h3><a href="task/get-second-li.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Есть длинный список <code>ul</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;ul&gt;
  &lt;li&gt;...&lt;/li&gt;
  &lt;li&gt;...&lt;/li&gt;
  &lt;li&gt;...&lt;/li&gt;
  ...
&lt;/ul&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Как наиболее эффективно получить второй <code>LI</code>?</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Можно так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var li = ul.getElementsByTagName('li')[1];</code></pre>
        </div>
      </div>
      
      </div><p>Или так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var li = ul.querySelector('li:nth-child(2)');</code></pre>
        </div>
      </div>
      
      </div><p>Оба этих вызова будут перебирать детей <code>UL</code> и остановят перебор на найденном элементе.</p>
<p>А вот так – браузер найдет все элементы, а затем выберет второй. Это дольше:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var li = ul.querySelectorAll('li')[1];</code></pre>
        </div>
      </div>
      
      </div><p>На практике разница в производительности будет видна только для действительно больших списков, либо при частом выполнении запроса. Браузер перебирает элементы весьма шустро.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>