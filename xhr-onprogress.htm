<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="ajax.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">AJAX и COMET</span></a></li></ol><h1 class="main__header-title">XMLHttpRequest: индикация прогресса</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="XMLHttpRequest: индикация прогресса"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Запрос <code>XMLHttpRequest</code> состоит из двух фаз:</p>
<ol>
<li>Стадия закачки (upload). На ней данные загружаются на сервер. Эта фаза может быть долгой для POST-запросов. Для отслеживания прогресса на стадии закачки существует объект типа <a href="https://xhr.spec.whatwg.org/#xmlhttprequesteventtarget">XMLHttpRequestUpload</a>, доступный как <code>xhr.upload</code> и события на нём.</li>
<li>Стадия скачивания (download). После того, как данные загружены, браузер скачивает ответ с сервера. Если он большой, то это может занять существенное время. На этой стадии используется обработчик <code>xhr.onprogress</code>.</li>
</ol>
<p>Далее – обо всём по порядку.</p>
<h2><a class="main__anchor" name="стадия-закачки" href="#стадия-закачки">Стадия закачки</a></h2><p>На стадии закачки для получения информации используем объект <code>xhr.upload</code>. У этого объекта нет методов, он только генерирует события в процессе закачки. А они-то как раз и нужны.</p>
<p>Вот полный список событий:</p>
<ul>
<li><code>loadstart</code></li>
<li><code>progress</code></li>
<li><code>abort</code></li>
<li><code>error</code></li>
<li><code>load</code></li>
<li><code>timeout</code></li>
<li><code>loadend</code></li>
</ul>
<p>Пример установки обработчиков на стадию закачки:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">xhr.upload.onprogress = function(event) {
  alert( 'Загружено на сервер ' + event.loaded + ' байт из ' + event.total );
}

xhr.upload.onload = function() {
  alert( 'Данные полностью загружены на сервер!' );
}

xhr.upload.onerror = function() {
  alert( 'Произошла ошибка при загрузке данных на сервер!' );
}</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="стадия-скачивания" href="#стадия-скачивания">Стадия скачивания</a></h2><p>После того, как загрузка завершена, и сервер соизволит ответить на запрос, <code>XMLHttpRequest</code> начнёт скачивание ответа сервера.</p>
<p>На этой фазе <code>xhr.upload</code> уже не нужен, а в дело вступают обработчики событий на самом объекте <code>xhr</code>. В частности, событие <code>xhr.onprogress</code> содержит информацию о количестве принятых байт ответа.</p>
<p>Пример обработчика:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">xhr.onprogress = function(event) {
  alert( 'Получено с сервера ' + event.loaded + ' байт из ' + event.total );
}</code></pre>
        </div>
      </div>
      
      </div><p>Все события, возникающие в этих обработчиках, имеют тип <a href="https://xhr.spec.whatwg.org/#progressevent">ProgressEvent</a>, то есть имеют свойства <code>loaded</code> – количество уже пересланных данных в байтах и <code>total</code> – общее количество данных.</p>
<h2><a class="main__anchor" name="демо-загрузка-файла-с-индикатором-прогресса" href="#демо-загрузка-файла-с-индикатором-прогресса">Демо: загрузка файла с индикатором прогресса</a></h2><p>Современный <code>XMLHttpRequest</code> позволяет отправить на сервер всё, что угодно. Текст, файл, форму.</p>
<p>Мы, для примера, рассмотрим загрузку файла с индикацией прогресса. Это требует от браузера поддержки <a href="http://www.w3.org/TR/FileAPI/">File API</a>, то есть исключает IE9-.</p>
<p>File API позволяет получить доступ к содержимому файла, который перенесён в браузер при помощи Drag’n’Drop или выбран в поле формы, и отправить его при помощи <code>XMLHttpRequest</code>.</p>
<p>Форма для выбора файла с обработчиком <code>submit</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="10-10">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;form name=&quot;upload&quot;&gt;
  &lt;input type=&quot;file&quot; name=&quot;myfile&quot;&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Загрузить&quot;&gt;
&lt;/form&gt;

&lt;script&gt;
  document.forms.upload.onsubmit = function() {
    var input = this.elements.myfile;
    var file = input.files[0];
    if (file) {
      upload(file);
    }
    return false;
  }
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Мы получаем файл из формы через свойство <code>files</code> элемента <code>&lt;input&gt;</code> и передаём его в функцию <code>upload</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function upload(file) {

  var xhr = new XMLHttpRequest();

  // обработчик для закачки
  xhr.upload.onprogress = function(event) {
    log(event.loaded + ' / ' + event.total);
  }

  // обработчики успеха и ошибки
  // если status == 200, то это успех, иначе ошибка
  xhr.onload = xhr.onerror = function() {
    if (this.status == 200) {
      log(&quot;success&quot;);
    } else {
      log(&quot;error &quot; + this.status);
    }
  };

  xhr.open(&quot;POST&quot;, &quot;upload&quot;, true);
  xhr.send(file);

}</code></pre>
        </div>
      </div>
      
      </div><p>Этот код отправит файл на сервер и будет сообщать о прогрессе при его закачке (<code>xhr.upload.onprogress</code>), а также об окончании запроса (<code>xhr.onload</code>, <code>xhr.onerror</code>).</p>
<p>Полный пример индикации прогресса при загрузке, основанный на коде выше:</p>
<div class="code-tabs code-tabs_result_on"><div class="code-tabs__tools"><div class="code-tabs__scroll-wrap"><button title="&amp;larr;" data-code-tabs-left class="code-tabs__scroll-button code-tabs__scroll-button_left"></button></div><div class="code-tabs__switches-wrap"><div data-code-tabs-switches class="code-tabs__switches"><div class="code-tabs__switches-items"><div class="code-tabs__switch code-tabs__switch_current">Результат</div><div class="code-tabs__switch">server.js</div><div class="code-tabs__switch">index.html</div></div></div></div><div class="code-tabs__scroll-wrap"><button title="&amp;rarr;" data-code-tabs-right class="code-tabs__scroll-button code-tabs__scroll-button_right"></button></div><div class="code-tabs__buttons"><a target="_blank" title="открыть в отдельном окне" href="article/xhr-onprogress/progress/default.htm" class="code-tabs__button code-tabs__button_external"></a><a target="_blank" href="http://learn.javascript.ru/tutorial/zipview/progress.zip?plunkId=LUxvsTD9LtQJw41AJUvR" class="code-tabs__button code-tabs__button_download"></a></div></div><div data-code-tabs-content style="height:200px" class="code-tabs__content"><div class="code-tabs__section code-tabs__section_current"><iframe src="article/xhr-onprogress/progress/default.htm" class="code-tabs__result"></iframe></div><div class="code-tabs__section"><pre class="language-javascript line-numbers"><code>var http = require('http');
var url = require('url');
var querystring = require('querystring');
var static = require('node-static');
var file = new static.Server('.', {
  cache: 0
});


function accept(req, res) {

  if (req.url == '/upload') {
    var length = 0;
    req.on('data', function(chunk) {
      // ничего не делаем с приходящими данными, просто считываем
      length += chunk.length;
      if (length &gt; 50 * 1024 * 1024) {
        res.statusCode = 413;
        res.end(&quot;File too big&quot;);
      }
    }).on('end', function() {
      res.end('ok');
    });

  } else {
    file.serve(req, res);
  }

}


// ------ запустить сервер -------

if (!module.parent) {
  http.createServer(accept).listen(8080);
} else {
  exports.accept = accept;
}</code></pre></div><div class="code-tabs__section"><pre class="language-markup line-numbers"><code>&lt;!DOCTYPE HTML&gt;
&lt;html&gt;

&lt;body&gt;

  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;/head&gt;
  &lt;form name=&quot;upload&quot;&gt;
    &lt;input type=&quot;file&quot; name=&quot;myfile&quot;&gt;
    &lt;input type=&quot;submit&quot; value=&quot;Загрузить&quot;&gt;
  &lt;/form&gt;

  &lt;div id=&quot;log&quot;&gt;Прогресс загрузки&lt;/div&gt;

  &lt;script&gt;
    function log(html) {
      document.getElementById('log').innerHTML = html;
    }

    document.forms.upload.onsubmit = function() {
      var file = this.elements.myfile.files[0];
      if (file) {
        upload(file);
      }
      return false;
    }


    function upload(file) {

      var xhr = new XMLHttpRequest();

      // обработчики можно объединить в один,
      // если status == 200, то это успех, иначе ошибка
      xhr.onload = xhr.onerror = function() {
        if (this.status == 200) {
          log(&quot;success&quot;);
        } else {
          log(&quot;error &quot; + this.status);
        }
      };

      // обработчик для закачки
      xhr.upload.onprogress = function(event) {
        log(event.loaded + ' / ' + event.total);
      }

      xhr.open(&quot;POST&quot;, &quot;upload&quot;, true);
      xhr.send(file);

    }
  &lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;</code></pre></div></div></div><h2><a class="main__anchor" name="событие-onprogress-в-деталях" href="#событие-onprogress-в-деталях">Событие onprogress в деталях</a></h2><p>При обработке события <code>onprogress</code> есть ряд важных тонкостей.</p>
<p>Можно, конечно, их игнорировать, но лучше бы знать.</p>
<p>Заметим, что событие, возникающее при <code>onprogress</code>, имеет одинаковый вид на стадии закачки (в обработчике <code>xhr.upload.onprogress</code>) и при получении ответа (в обработчике <code>xhr.onprogress</code>).</p>
<p>Оно представляет собой объект типа <a href="https://xhr.spec.whatwg.org/#progressevent">ProgressEvent</a> со свойствами:</p>
<dl>
<dt><code>loaded</code></dt>
<dd>
<p>Сколько байт уже переслано.</p>
<p>Имеется в виду только тело запроса, заголовки не учитываются.</p>
</dd>
<dt><code>lengthComputable</code></dt>
<dd>
<p>Если <code>true</code>, то известно полное количество байт для пересылки, и оно хранится в свойстве <code>total</code>.</p>
</dd>
<dt><code>total</code></dt>
<dd>
<p>Общее количество байт для пересылки, если известно.</p>
<p>А может ли оно быть неизвестно?</p>
</dd>
</dl>
<ul>
<li>При закачке на сервер браузер всегда знает полный размер пересылаемых данных, так что <code>total</code> всегда содержит конкретное количество байт, а значение <code>lengthComputable</code> всегда будет <code>true</code>.</li>
<li>При скачивании данных – обычно сервер в начале сообщает их общее количество в HTTP-заголовке <code>Content-Length</code>. Но он может и не делать этого, например если сам не знает, сколько данных будет или если генерирует их динамически. Тогда <code>total</code> будет равно <code>0</code>. А чтобы отличить нулевой размер данных от неизвестного – как раз служит <code>lengthComputable</code>, которое в данном случае равно <code>false</code>.</li>
</ul>
<p>Ещё особенности, которые необходимо учитывать при использовании <code>onprogress</code>:</p>
<ul>
<li>
<p><strong>Событие происходит при каждом полученном/отправленном байте, но не чаще чем раз в 50 мс.</strong></p>
<p>Это обозначено в <a href="http://www.w3.org/TR/XMLHttpRequest/#make-progress-notifications">спецификации progress notifications</a>.</p>
</li>
<li>
<p><strong>В процессе получения данных, ещё до их полной передачи, доступен <code>xhr.responseText</code>, но он не обязательно содержит корректную строку.</strong></p>
<p>Можно до окончания запроса заглянуть в него и прочитать текущие полученные данные. Важно, что при пересылке строки в кодировке UTF-8 кириллические символы, как, впрочем, и многие другие, кодируются 2 байтами. Возможно, что в конце одного пакета данных окажется первая половинка символа, а в начале следующего – вторая. Поэтому полагаться на то, что до окончания запроса в <code>responseText</code> находится корректная строка нельзя. Она может быть обрезана посередине символа.</p>
<p>Исключение – заведомо однобайтные символы, например цифры или латиница.</p>
</li>
<li>
<p><strong>Сработавшее событие <code>xhr.upload.onprogress</code> не гарантирует, что данные дошли.</strong></p>
<p>Событие <code>xhr.upload.onprogress</code> срабатывает, когда данные отправлены браузером. Но оно не гарантирует, что сервер получил, обработал и записал данные на диск. Он говорит лишь о самом факте отправки.</p>
<p>Поэтому прогресс-индикатор, получаемый при его помощи, носит приблизительный и оптимистичный характер.</p>
</li>
</ul>
<h2><a class="main__anchor" name="файлы-и-формы" href="#файлы-и-формы">Файлы и формы</a></h2><p>Выше мы использовали <code>xhr.send(file)</code> для передачи файла непосредственно в теле запроса.</p>
<p>При этом посылается только <em>содержимое</em> файла.</p>
<p>Если нужно дополнительно передать имя файла или что-то ещё – это можно удобно сделать через форму, при помощи объекта <a href="https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/FormData/Using_FormData_Objects">FormData</a>:</p>
<p>Создадим форму <code>formData</code> и прибавим к ней поле с файлом <code>file</code> и именем <code>&quot;myfile&quot;</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var formData = new FormData();
formData.append(&quot;myfile&quot;, file);
xhr.send(formData);</code></pre>
        </div>
      </div>
      
      </div><p>Данные будут отправлены в кодировке <code>multipart/form-data</code>. Серверный фреймворк увидит это как обычную форму с файлом, практически все серверные технологии имеют их встроенную поддержку. Индикация прогресса реализуется точно так же.</p>
</div></article></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>