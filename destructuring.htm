<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="js.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Язык JavaScript</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="es-modern.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Современные возможности ES-2015</span></a></li></ol><h1 class="main__header-title">Деструктуризация</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Деструктуризация"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p><em>Деструктуризация</em> (destructuring assignment) – это особый синтаксис присваивания, при котором можно присвоить массив или объект сразу нескольким переменным, разбив его на части.</p>
<h2><a class="main__anchor" name="массив" href="#массив">Массив</a></h2><p>Пример деструктуризации массива:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

let [firstName, lastName] = [&quot;Илья&quot;, &quot;Кантор&quot;];

alert(firstName); // Илья
alert(lastName);  // Кантор</code></pre>
        </div>
      </div>
      
      </div><p>При таком присвоении первое значение массива пойдёт в переменную <code>firstName</code>, второе – в <code>lastName</code>, а последующие (если есть) – будут отброшены.</p>
<p>Ненужные элементы массива также можно отбросить, поставив лишнюю запятую:</p>
<div data-trusted="1" class="code-example" data-highlight-block="2-3">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

// первый и второй элементы не нужны
let [, , title] = &quot;Юлий Цезарь Император Рима&quot;.split(&quot; &quot;);

alert(title); // Император</code></pre>
        </div>
      </div>
      
      </div><p>В коде выше первый и второй элементы массива никуда не записались, они были отброшены. Как, впрочем, и все элементы после третьего.</p>
<h3><a class="main__anchor" name="оператор-spread" href="#оператор-spread">Оператор «spread»</a></h3><p>Если мы хотим получить и последующие значения массива, но не уверены в их числе – можно добавить ещё один параметр, который получит «всё остальное», при помощи оператора <code>&quot;...&quot;</code> («spread», троеточие):</p>
<div data-trusted="1" class="code-example" data-highlight-block="2-2">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

let [firstName, lastName, ...rest] = &quot;Юлий Цезарь Император Рима&quot;.split(&quot; &quot;);

alert(firstName); // Юлий
alert(lastName);  // Цезарь
alert(rest);      // Император,Рима (массив из 2х элементов)</code></pre>
        </div>
      </div>
      
      </div><p>Значением <code>rest</code> будет массив из оставшихся элементов массива. Вместо <code>rest</code> можно использовать и другое имя переменной, оператор здесь – троеточие. Оно должно стоять только последним элементом в списке слева.</p>
<h3><a class="main__anchor" name="значения-по-умолчанию" href="#значения-по-умолчанию">Значения по умолчанию</a></h3><p>Если значений в массиве меньше, чем переменных – ошибки не будет, просто присвоится <code>undefined</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="2-2">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

let [firstName, lastName] = [];

alert(firstName); // undefined</code></pre>
        </div>
      </div>
      
      </div><p>Впрочем, как правило, в таких случаях задают значение по умолчанию. Для этого нужно после переменной использовать символ <code>=</code> со значением, например:</p>
<div data-trusted="1" class="code-example" data-highlight-block="2-3">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

// значения по умолчанию
let [firstName=&quot;Гость&quot;, lastName=&quot;Анонимный&quot;] = [];

alert(firstName); // Гость
alert(lastName);  // Анонимный</code></pre>
        </div>
      </div>
      
      </div><p>В качестве значений по умолчанию можно использовать не только примитивы, но и выражения, даже включающие в себя вызовы функций:</p>
<div data-trusted="1" class="code-example" data-highlight-block="6-7">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

function defaultLastName() {
  return Date.now() + '-visitor';
}

// lastName получит значение, соответствующее текущей дате:
let [firstName, lastName=defaultLastName()] = [&quot;Вася&quot;];

alert(firstName); // Вася
alert(lastName);  // 1436...-visitor</code></pre>
        </div>
      </div>
      
      </div><p>Заметим, что вызов функции <code>defaultLastName()</code> для генерации значения по умолчанию будет осуществлён только при необходимости, то есть если значения нет в массиве.</p>
<h2><a class="main__anchor" name="деструктуризация-объекта" href="#деструктуризация-объекта">Деструктуризация объекта</a></h2><p>Деструктуризацию можно использовать и с объектами. При этом мы указываем, какие свойства в какие переменные должны «идти».</p>
<p>Базовый синтаксис:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">let {var1, var2} = {var1: …, var2: …};</code></pre>
        </div>
      </div>
      
      </div><p>Объект справа – уже существующий, который мы хотим разбить на переменные. А слева – список переменных, в которые нужно соответствующие свойства записать.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example" data-highlight-block="8-8">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

let options = {
  title: &quot;Меню&quot;,
  width: 100,
  height: 200
};

let {title, width, height} = options;

alert(title);  // Меню
alert(width);  // 100
alert(height); // 200</code></pre>
        </div>
      </div>
      
      </div><p>Как видно, свойства <code>options.title</code>, <code>options.width</code> и <code>options.height</code> автоматически присвоились соответствующим переменным.</p>
<p>Если хочется присвоить свойство объекта в переменную с другим именем, например, чтобы свойство <code>options.width</code> пошло в переменную <code>w</code>, то можно указать соответствие через двоеточие, вот так:</p>
<div data-trusted="1" class="code-example" data-highlight-block="8-8">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

let options = {
  title: &quot;Меню&quot;,
  width: 100,
  height: 200
};

let {width: w, height: h, title} = options;

alert(title);  // Меню
alert(w);      // 100
alert(h);      // 200</code></pre>
        </div>
      </div>
      
      </div><p>В примере выше свойство <code>width</code> отправилось в переменную <code>w</code>, свойство <code>height</code> – в переменную <code>h</code>, а <code>title</code> – в переменную с тем же названием.</p>
<p>Если каких-то свойств в объекте нет, можно указать значение по умолчанию через знак равенства <code>=</code>, вот так;</p>
<div data-trusted="1" class="code-example" data-highlight-block="6-6">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

let options = {
  title: &quot;Меню&quot;
};

let {width=100, height=200, title} = options;

alert(title);  // Меню
alert(width);  // 100
alert(height); // 200</code></pre>
        </div>
      </div>
      
      </div><p>Можно и сочетать одновременно двоеточие и равенство:</p>
<div data-trusted="1" class="code-example" data-highlight-block="6-6">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

let options = {
  title: &quot;Меню&quot;
};

let {width:w=100, height:h=200, title} = options;

alert(title);  // Меню
alert(w);      // 100
alert(h);      // 200</code></pre>
        </div>
      </div>
      
      </div><p>А что, если в объекте больше значений, чем переменных? Можно ли куда-то присвоить «остаток», аналогично массивам?</p>
<p>Такой возможности в текущем стандарте нет. Она планируется в будущем стандарте, и выглядеть она будет примерно так:</p>
<div data-trusted="1" class="code-example" data-highlight-block="8-8">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

let options = {
  title: &quot;Меню&quot;,
  width: 100,
  height: 200
};

let {title, ...size} = options;

// title = &quot;Меню&quot;
// size = { width: 100, height: 200} (остаток)</code></pre>
        </div>
      </div>
      
      </div><p>Этот код будет работать, например, при использовании Babel со включёнными экспериментальными возможностями, но ещё раз заметим, что в текущий стандарт такая возможность не вошла.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Деструктуризация без объявления</span></div>
            <div class="important__content"><p>В примерах выше переменные объявлялись прямо перед присваиванием: <code>let {…} = {…}</code>. Конечно, можно и без <code>let</code>, использовать уже существующие переменные.</p>
<p>Однако, здесь есть небольшой «подвох». В JavaScript, если в основном потоке кода (не внутри другого выражения) встречается <code>{...}</code>, то это воспринимается как блок.</p>
<p>Например, можно использовать такой блок для ограничения видимости переменных:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';
{
  // вспомогательные переменные, локальные для блока
  let a = 5;
  // поработали с ними
  alert(a); // 5
  // больше эти переменные не нужны
}
alert(a); // ошибка нет такой переменной</code></pre>
        </div>
      </div>
      
      </div><p>Конечно, это бывает удобно, но в данном случае это создаст проблему при деструктуризации:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">let a, b;
{a, b} = {a:5, b:6}; // будет ошибка, оно посчитает, что {a,b} - блок</code></pre>
        </div>
      </div>
      
      </div><p>Чтобы избежать интерпретации <code>{a, b}</code> как блока, нужно обернуть всё присваивание в скобки:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">let a, b;
({a, b} = {a:5, b:6}); // внутри выражения это уже не блок</code></pre>
        </div>
      </div>
      
      </div></div></div>
<h2><a class="main__anchor" name="вложенные-деструктуризации" href="#вложенные-деструктуризации">Вложенные деструктуризации</a></h2><p>Если объект или массив содержат другие объекты или массивы, и их тоже хочется разбить на переменные – не проблема.</p>
<p>Деструктуризации можно как угодно сочетать и вкладывать друг в друга.</p>
<p>В коде ниже <code>options</code> содержит подобъект и подмассив. В деструктуризации ниже сохраняется та же структура:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

let options = {
  size: {
    width: 100,
    height: 200
  },
  items: [&quot;Пончик&quot;, &quot;Пирожное&quot;]
}

let { title=&quot;Меню&quot;, size: {width, height}, items: [item1, item2] } = options;

// Меню 100 200 Пончик Пирожное
alert(title);  // Меню
alert(width);  // 100
alert(height); // 200
alert(item1);  // Пончик
alert(item2);  // Пирожное</code></pre>
        </div>
      </div>
      
      </div><p>Как видно, весь объект <code>options</code> корректно разбит на переменные.</p>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><ul>
<li>
<p>Деструктуризация позволяет разбивать объект или массив на переменные при присвоении.</p>
</li>
<li>
<p>Синтаксис:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">let {prop : varName = default, ...} = object</code></pre>
        </div>
      </div>
      
      </div><p>Здесь двоеточие <code>:</code> задаёт отображение свойства <code>prop</code> в переменную <code>varName</code>, а равенство <code>=default</code> задаёт выражение, которое будет использовано, если значение отсутствует (не указано или <code>undefined</code>).</p>
<p>Для массивов имеет значение порядок, поэтому нельзя использовать <code>:</code>, но значение по умолчанию – можно:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">let [var1 = default, var2, ...rest] = array</code></pre>
        </div>
      </div>
      
      </div><p>Объявление переменной в начале конструкции не обязательно. Можно использовать и существующие переменные. Однако при деструктуризации объекта может потребоваться обернуть выражение в скобки.</p>
</li>
<li>
<p>Вложенные объекты и массивы тоже работают, при деструктуризации нужно лишь сохранить ту же структуру, что и исходный объект/массив.</p>
</li>
</ul>
<p>Как мы увидим далее, деструктуризации особенно удобны при чтении объектных параметров функций.</p>
</div></article></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>