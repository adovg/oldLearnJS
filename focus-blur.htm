<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="ui.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Документ, события, интерфейсы</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="forms-controls.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Формы, элементы управления</span></a></li></ol><h1 class="main__header-title">Фокусировка: focus/blur</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Фокусировка: focus/blur"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Говорят, что элемент «получает фокус», когда посетитель фокусируется на нём. Обычно фокусировка автоматически происходит при нажатии на элементе мышкой, но также можно перейти на нужный элемент клавиатурой – через клавишу <kbd class="shortcut">Tab</kbd>, нажатие пальцем на планшете и так далее.</p>
<p>Момент получения фокуса и потери очень важен.</p>
<p>При получении фокуса мы можем подгрузить данные для автодополнения, начать отслеживать изменения. При потере – проверить данные, которые ввёл посетитель.</p>
<p>Кроме того, иногда полезно «вручную», из JavaScript перевести фокус на нужный элемент, например, на поле в динамически созданной форме.</p>
<h2><a class="main__anchor" name="события-focus-blur" href="#события-focus-blur">События focus/blur</a></h2><p>Событие <code>focus</code> вызывается тогда, когда пользователь фокусируется на элементе, а  <code>blur</code> – когда фокус исчезает, например посетитель кликает на другом месте экрана.</p>
<p>Давайте сразу посмотрим на них в деле, используем для проверки («валидации») введённых в форму значений.</p>
<p>В примере ниже:</p>
<ul>
<li>Обработчик <code>onblur</code> проверяет, что в поле введено число, если нет – показывает ошибку.</li>
<li>Обработчик <code>onfocus</code>, если текущее состояние поля ввода – «ошибка» – скрывает её (потом при <code>onblur</code> будет повторная проверка).</li>
</ul>
<p>В примере ниже, если набрать что-нибудь в поле «возраст» и завершить ввод, нажав <kbd class="shortcut">Tab</kbd> или кликнув в другое место страницы, то введённое значение будет автоматически проверено:</p>
<div data-trusted="1" class="code-example" data-demo-height="60" data-autorun="true" data-highlight-inline="7:0-12,15:0-13">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;style&gt; .error { border-color: red; } &lt;/style&gt;

Введите ваш возраст: &lt;input type=&quot;text&quot; id=&quot;input&quot;&gt;

&lt;div id=&quot;error&quot;&gt;&lt;/div&gt;

&lt;script&gt;
input.onblur = function() {
  if (isNaN(this.value)) { // введено не число
    // показать ошибку
    this.className = &quot;error&quot;;
    error.innerHTML = 'Вы ввели не число. Исправьте, пожалуйста.'
  }
};

input.onfocus = function() {
  if (this.className == 'error') { // сбросить состояние &quot;ошибка&quot;, если оно есть
    this.className = &quot;&quot;;
    error.innerHTML = &quot;&quot;;
  }
};
&lt;/script&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-2d2v22"
          style="height:60px"
          src="about:blank"></iframe>
      </div>
      </div><h2><a class="main__anchor" name="методы-focus-blur" href="#методы-focus-blur">Методы focus/blur</a></h2><p>Методы с теми же названиями переводят/уводят фокус с элемента.</p>
<p>Для примера модифицируем пример выше, чтобы при неверном вводе посетитель просто не мог уйти с элемента:</p>
<div data-trusted="1" class="code-example" data-demo-height="80" data-autorun="true" data-highlight-block="19-20">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;style&gt;
  .error {
    background: red;
  }
&lt;/style&gt;

&lt;div&gt;Возраст:
  &lt;input type=&quot;text&quot; id=&quot;age&quot;&gt;
&lt;/div&gt;

&lt;div&gt;Имя:
  &lt;input type=&quot;text&quot;&gt;
&lt;/div&gt;

&lt;script&gt;
  age.onblur = function() {
    if (isNaN(this.value)) { // введено не число
      // показать ошибку
      this.classList.add(&quot;error&quot;);
      //... и вернуть фокус обратно
      age.focus();
    } else {
      this.classList.remove(&quot;error&quot;);
    }
  };
&lt;/script&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-4qharz"
          style="height:80px"
          src="about:blank"></iframe>
      </div>
      </div><p>Этот пример работает во всех браузерах, кроме Firefox (<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=53579">ошибка</a>).</p>
<p>Если ввести что-то нецифровое в поле «возраст», и потом попытаться табом или мышкой перейти на другой <code>&lt;input&gt;</code>, то обработчик <code>onblur</code> вернёт фокус обратно.</p>
<p>Обратим внимание – если из <code>onblur</code> сделать <code>event.preventDefault()</code>, то такого же эффекта не будет, потому что <code>onblur</code> срабатывает уже <em>после</em> того, как элемент потерял фокус.</p>
<h2><a class="main__anchor" name="html5-и-css3-вместо-focus-blur" href="#html5-и-css3-вместо-focus-blur">HTML5 и CSS3 вместо focus/blur</a></h2><p>Прежде чем переходить к более сложным примерам, использующим JavaScript, мы рассмотрим три примера, когда его использовать не надо, а достаточно современного HTML/CSS.</p>
<h3><a class="main__anchor" name="подсветка-при-фокусировке" href="#подсветка-при-фокусировке">Подсветка при фокусировке</a></h3><p>Стилизация полей ввода может быть решена средствами CSS (CSS2.1), а именно – селектором <code>:focus</code>:</p>
<div data-trusted="1" class="code-example" data-demo-height="100" data-autorun="true" data-highlight-inline="1:0-11">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;style&gt;
input:focus {
  background: #FA6;
  outline: none;  /* убрать рамку */
}
&lt;/style&gt;
&lt;input type=&quot;text&quot;&gt;

&lt;p&gt;Селектор :focus выделит элемент при фокусировке на нем и уберёт рамку, которой браузер выделяет этот элемент по умолчанию.&lt;/p&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-diy1q4"
          style="height:100px"
          src="about:blank"></iframe>
      </div>
      </div><p>В IE (включая более старые) скрыть фокус также может установка специального атрибута <a href="http://msdn.microsoft.com/en-us/library/ie/ms533783.aspx">hideFocus</a>.</p>
<h3><a class="main__anchor" name="автофокус" href="#автофокус">Автофокус</a></h3><p>При загрузке страницы, если на ней существует элемент с атрибутом <code>autofocus</code> – браузер автоматически фокусируется на этом элементе. Работает во всех браузерах, кроме IE9-.</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:33-42">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input type=&quot;text&quot; name=&quot;search&quot; autofocus&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Если нужны старые IE, то же самое может сделать JavaScript:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input type=&quot;text&quot; name=&quot;search&quot;&gt;
&lt;script&gt;
  document.getElementsByName('search')[0].focus();
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Как правило, этот атрибут используется при изначальной загрузке, для страниц поиска и так далее, где главный элемент очевиден.</p>
<h3><a class="main__anchor" name="плейсхолдер" href="#плейсхолдер">Плейсхолдер</a></h3><p><em>Плейсхолдер</em> – это значение-подсказка внутри <code>INPUT</code>, которое автоматически исчезает при фокусировке и существует, пока посетитель не начал вводить текст.</p>
<p>Во всех браузерах, кроме IE9-, это реализуется специальным атрибутом <code>placeholder</code>:</p>
<div data-trusted="1" class="code-example" data-demo-height="80" data-autorun="true">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input type=&quot;text&quot; placeholder=&quot;E-mail&quot;&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-b414yg"
          style="height:80px"
          src="about:blank"></iframe>
      </div>
      </div><p>В некоторых браузерах этот текст можно стилизовать:</p>
<div data-trusted="1" class="code-example" data-demo-height="80" data-autorun="true" data-highlight-inline="1:3-30,5:3-27,9:3-26">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;style&gt;
.my::-webkit-input-placeholder {
  color: red;
  font-style: italic;
}
.my::-moz-input-placeholder {
  color: red;
  font-style: italic;
}
.my::-ms-input-placeholder {
  color: red;
  font-style: italic;
}
&lt;/style&gt;

&lt;input class=&quot;my&quot; type=&quot;text&quot; placeholder=&quot;E-mail&quot;&gt;
Стилизованный плейсхолдер</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-9xyqsk"
          style="height:80px"
          src="about:blank"></iframe>
      </div>
      </div><h2><a class="main__anchor" name="разрешаем-фокус-на-любом-элементе-tabindex" href="#разрешаем-фокус-на-любом-элементе-tabindex">Разрешаем фокус на любом элементе: tabindex</a></h2><p>По умолчанию не все элементы поддерживают фокусировку.</p>
<p>Перечень элементов немного рознится от браузера к браузеру, например, список для IE описан <a href="http://msdn.microsoft.com/en-us/library/ms536934.aspx">в MSDN</a>, одно лишь верно всегда – заведомо поддерживают <code>focus/blur</code> те элементы, c которыми посетитель может взаимодействовать: <code>&lt;button&gt;</code>, <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, <code>&lt;a&gt;</code> и т.д.</p>
<p>С другой стороны, на элементах для форматирования, таких как <code>&lt;div&gt;</code>, <code>&lt;span&gt;</code>, <code>&lt;table&gt;</code> – по умолчанию сфокусироваться нельзя. Впрочем, существует способ включить фокусировку и для них.</p>
<p>В HTML есть атрибут <code>tabindex</code>.</p>
<p>Его основной смысл – это указать номер элемента при переборе клавишей <kbd class="shortcut">Tab</kbd>.</p>
<p>То есть, если есть два элемента, первый имеет <code>tabindex=&quot;1&quot;</code>, а второй <code>tabindex=&quot;2&quot;</code>, то нажатие <kbd class="shortcut">Tab</kbd> при фокусе на первом элементе – переведёт его на второй.</p>
<p>Исключением являются специальные значения:</p>
<ul>
<li><code>tabindex=&quot;0&quot;</code> делает элемент всегда последним.</li>
<li><code>tabindex=&quot;-1&quot;</code> означает, что клавиша <kbd class="shortcut">Tab</kbd> будет элемент игнорировать.</li>
</ul>
<p><strong>Любой элемент поддерживает фокусировку, если у него есть <code>tabindex</code>.</strong></p>
<p>В примере ниже есть список элементов. Кликните на любой из них и нажмите «tab».</p>
<div data-trusted="1" class="code-example" data-autorun="true">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">Кликните на первый элемент списка и нажмите Tab. Внимание! Дальнейшие нажатия Tab могут вывести за границы iframe'а с примером.
&lt;ul&gt;
  &lt;li tabindex=&quot;1&quot;&gt;Один&lt;/li&gt;
  &lt;li tabindex=&quot;0&quot;&gt;Ноль&lt;/li&gt;
  &lt;li tabindex=&quot;2&quot;&gt;Два&lt;/li&gt;
  &lt;li tabindex=&quot;-1&quot;&gt;Минус один&lt;/li&gt;
&lt;/ul&gt;

&lt;style&gt;
  li { cursor: pointer; }
  :focus { outline: 1px dashed green; }
&lt;/style&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-7ozbd4"
          style="height:200px"
          src="about:blank"></iframe>
      </div>
      </div><p>Порядок перемещения по клавише «Tab» в примере выше должен быть таким: <code>1 - 2 - 0</code> (ноль всегда последний). Продвинутые пользователи частенько используют «Tab» для навигации, и ваше хорошее отношение к ним будет вознаграждено :)</p>
<p>Обычно <code>&lt;li&gt;</code> не поддерживает фокусировку, но здесь есть <code>tabindex</code>.</p>
<h2><a class="main__anchor" name="делегирование-с-focus-blur" href="#делегирование-с-focus-blur">Делегирование с focus/blur</a></h2><p>События <code>focus</code> и <code>blur</code> не всплывают.</p>
<p>Это грустно, поскольку мы не можем использовать делегирование с ними. Например, мы не можем сделать так, чтобы при фокусировке в форме она вся подсвечивалась:</p>
<div data-trusted="1" class="code-example" data-demo-height="100" data-autorun="true" data-highlight-inline="1:6-40">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;!-- при фокусировке на форме ставим ей класс --&gt;
&lt;form onfocus=&quot;this.className='focused'&quot;&gt;
  &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;Ваше имя&quot;&gt;
  &lt;input type=&quot;text&quot; name=&quot;surname&quot; value=&quot;Ваша фамилия&quot;&gt;
&lt;/form&gt;

&lt;style&gt; .focused { outline: 1px solid red; } &lt;/style&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-3nkx54"
          style="height:100px"
          src="about:blank"></iframe>
      </div>
      </div><p>Пример выше не работает, т.к. при фокусировке на любом <code>&lt;input&gt;</code> событие <code>focus</code> срабатывает только на этом элементе и не всплывает наверх. Так что обработчик <code>onfocus</code> на форме никогда не сработает.</p>
<p>Что делать? Неужели мы должны присваивать обработчик каждому полю <code>&lt;input&gt;</code>?</p>
<p><strong>Это забавно, но хотя <code>focus/blur</code> не всплывают, они могут быть пойманы на фазе перехвата.</strong></p>
<p>Вот так сработает:</p>
<div data-trusted="1" class="code-example" data-demo-height="100" data-autorun="true" data-highlight-block="12-19">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;form id=&quot;form&quot;&gt;
  &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;Ваше имя&quot;&gt;
  &lt;input type=&quot;text&quot; name=&quot;surname&quot; value=&quot;Ваша фамилия&quot;&gt;
&lt;/form&gt;

&lt;style&gt;
  .focused {
    outline: 1px solid red;
  }
&lt;/style&gt;

&lt;script&gt;
  // ставим обработчики на фазе перехвата, последний аргумент true
  form.addEventListener(&quot;focus&quot;, function() {
    this.classList.add('focused');
  }, true);

  form.addEventListener(&quot;blur&quot;, function() {
    this.classList.remove('focused');
  }, true);
&lt;/script&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-6rn401"
          style="height:100px"
          src="about:blank"></iframe>
      </div>
      </div><h3><a class="main__anchor" name="события-focusin-focusout" href="#события-focusin-focusout">События focusin/focusout</a></h3><p>События <code>focusin/focusout</code> – то же самое, что и <code>focus/blur</code>, только они всплывают.</p>
<p>У них две особенности:</p>
<ul>
<li>Не поддерживаются Firefox (хотя поддерживаются даже старейшими IE), см. <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=687787">https://bugzilla.mozilla.org/show_bug.cgi?id=687787</a>.</li>
<li>Должны быть назначены не через <code>on</code>-свойство, а при помощи <code>elem.addEventListener</code>.</li>
</ul>
<p>Из-за отсутствия подержки Firefox эти события используют редко. Получается, что во всех браузерах можно использовать <code>focus</code> на стадии перехвата, ну а <code>focusin/focusout</code> – в IE8-, где стадии перехвата нет.</p>
<p>Подсветка формы в примере ниже работает во всех браузерах.</p>
<div data-trusted="1" class="code-example" data-demo-height="60" data-autorun="true">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;form name=&quot;form&quot;&gt;
  &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;Ваше имя&quot;&gt;
  &lt;input type=&quot;text&quot; name=&quot;surname&quot; value=&quot;Ваша фамилия&quot;&gt;
&lt;/form&gt;
&lt;style&gt;
  .focused {
    outline: 1px solid red;
  }
&lt;/style&gt;

&lt;script&gt;
  function onFormFocus() {
    this.className = 'focused';
  }

  function onFormBlur() {
    this.className = '';
  }

  var form = document.forms.form;

  if (form.addEventListener) {
    // focus/blur на стадии перехвата срабатывают во всех браузерах
    // поэтому используем их
    form.addEventListener('focus', onFormFocus, true);
    form.addEventListener('blur', onFormBlur, true);
  } else {
    // ветка для IE8-, где нет стадии перехвата, но есть focusin/focusout
    form.onfocusin = onFormFocus;
    form.onfocusout = onFormBlur;
  }
&lt;/script&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-7bpufr"
          style="height:60px"
          src="about:blank"></iframe>
      </div>
      </div><h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><p>События <code>focus/blur</code> происходят при получении и снятии фокуса с элемента.</p>
<p>У них есть особенности:</p>
<ul>
<li>
<p>Они не всплывают. Но на фазе перехвата их можно перехватить. Это странно, но это так, не спрашивайте почему.</p>
<p>Везде, кроме Firefox, поддерживаются всплывающие альтернативы <code>focusin/focusout</code>.</p>
</li>
<li>
<p>По умолчанию многие элементы не могут получить фокус. Например, если вы кликните по <code>DIV</code>, то фокусировка на нем не произойдет.</p>
<p>Но это можно изменить, если поставить элементу атрибут <code>tabIndex</code>. Этот атрибут также дает возможность контролировать порядок перехода при нажатии <kbd class="shortcut">Tab</kbd>.</p>
</li>
</ul>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Текущий элемент: <code>document.activeElement</code></span></div>
            <div class="important__content"><p>Кстати, текущий элемент, на котором фокус, доступен как <code>document.activeElement</code>.</p>
</div></div>
</div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#улучшенный-плейсхолдер" name="улучшенный-плейсхолдер" class="main__anchor">Улучшенный плейсхолдер</a></h3><a href="task/emulate-placeholder.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Реализуйте более удобный плейсхолдер-подсказку на JavaScript через атрибут <code>data-placeholder</code>.</p>
<p>Правила работы плейсхолдера:</p>
<ul>
<li>Элемент изначально содержит плейсхолдер. Специальный класс <code>placeholder</code> придает ему синий цвет.</li>
<li>При фокусировке плейсхолдер показывается уже над полем, становясь «подсказкой».</li>
<li>При снятии фокуса, подсказка убирается, если поле пустое – плейсхолдер возвращается в него.</li>
</ul>
<p>Демо:</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:100px" src="https://js.cx/task/emulate-placeholder/solution/"></iframe>
  </div><p>В этой задаче плейсхолдер должен работать на одном конкретном input. Подумайте, если input много, как здесь применить делегирование?</p>
<p><a href="http://plnkr.co/edit/tvSkh0I87qweXeyefgGc?p=preview" target="_blank" data-plunk-id="tvSkh0I87qweXeyefgGc">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>В данном случае достаточно событий <code>input.focus/input.blur</code>.</p>
<p>Если бы мы хотели реализовать это на уровне документа, то применили бы делегирование и события <code>focusin/focusout</code> (эмуляцию для firefox), так как обычные <code>focus/blur</code> не всплывают.</p>
<p><a href="http://plnkr.co/edit/YJKURoqtXX5SGWv0rYB3?p=preview" target="_blank" data-plunk-id="YJKURoqtXX5SGWv0rYB3">Открыть решение в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#мышонок-на-клавиатурном-приводе" name="мышонок-на-клавиатурном-приводе" class="main__anchor">Мышонок на &quot;клавиатурном&quot; приводе</a></h3><a href="task/keyboard-mouse.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 4</span></div><div class="task__content"><p>Кликните по мышонку. Затем нажимайте клавиши со стрелками, и он будет двигаться.</p>
<p><a href="https://js.cx/task/keyboard-mouse/solution/" target="blank">Демо в новом окне</a></p><p>В этой задаче запрещается ставить обработчики куда-либо, кроме элемента <code>#mouse</code>.</p>
<p>Можно изменять атрибуты и классы в HTML.</p>
<p><a href="http://plnkr.co/edit/vuoj7pkc6hqfUy1Vh1q8?p=preview" target="_blank" data-plunk-id="vuoj7pkc6hqfUy1Vh1q8">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Нам нужно ловить <code>onclick</code> на мышонке и в <code>onkeydown</code> на нём смотреть коды символов. При скан-кодах стрелок двигать мышонка через <code>position:absolute</code> или <code>position:fixed</code>.</p>
<p>Скан-коды для клавиш стрелок можно узнать, нажимая на них на <a href="keyboard-events.htm#keyboard-test-stand">тестовом стенде</a>. Вот они: 37-38-39-40 (влево-вверх-вправо-вниз).</p>
<p>Проблема может возникнуть одна – <code>keydown</code> не возникает на элементе, если на нём нет фокуса.</p>
<p>Чтобы фокус был – нужно добавить мышонку атрибут <code>tabindex</code> через JS или в HTML.</p>
<p><a href="http://plnkr.co/edit/3cTK6an0SoHwdWi6ZtAw?p=preview" target="_blank" data-plunk-id="3cTK6an0SoHwdWi6ZtAw">Открыть решение в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#горячие-клавиши" name="горячие-клавиши" class="main__anchor">Горячие клавиши</a></h3><a href="task/hotkeys.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Создайте <code>&lt;div&gt;</code>, который при нажатии <kbd class="shortcut">Ctrl<span class="shortcut__plus">+</span>E</kbd> превращается в <code>&lt;textarea&gt;</code>.</p>
<p>Изменения, внесенные в поле, можно сохранить обратно в <code>&lt;div&gt;</code> сочетанием клавиш <kbd class="shortcut">Ctrl<span class="shortcut__plus">+</span>S</kbd>, при этом <code>&lt;div&gt;</code> получит в виде HTML содержимое <code>&lt;textarea&gt;</code>.</p>
<p>Если же нажать <kbd class="shortcut">Esc</kbd>, то <code>&lt;textarea&gt;</code> снова превращается в <code>&lt;div&gt;</code>, изменения не сохраняются.</p>
<p><a href="https://js.cx/task/hotkeys/solution/" target="blank">Демо в новом окне</a></p><p><a href="http://plnkr.co/edit/ecKFxlIwITCnts0XOi8m?p=preview" target="_blank" data-plunk-id="ecKFxlIwITCnts0XOi8m">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__step"><button type="button" class="task__step-show">CSS для решения</button><div class="task__answer-content"><h4 class="task__step-title">CSS для решения</h4><p>Как видно из исходного кода, <code>#view</code> – это <code>&lt;div&gt;</code>, который будет содержать результат, а <code>#area</code> – это редактируемое текстовое поле.</p>
<p>Так как мы преобразуем <code>&lt;div&gt;</code> в <code>&lt;textarea&gt;</code> и обратно, нам нужно сделать их практически одинаковыми с виду:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-css"><code class="language-css">#view,
#area {
  height: 150px;
  width: 400px;
  font-family: arial;
  font-size: 14px;
}</code></pre>
        </div>
      </div>
      
      </div><p>Текстовое поле нужно как-то выделить. Можно добавить границу, но тогда изменится блок: он увеличится в размерах и немного съедет текст.</p>
<p>Для того, чтобы сделать размер <code>#area</code> таким же, как и <code>#view</code>, добавим поля(padding):</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-css"><code class="language-css">#view {
  /* padding + border = 3px */

  padding: 2px;
  border: 1px solid black;
}</code></pre>
        </div>
      </div>
      
      </div><p>CSS для <code>#area</code> заменяет поля границами:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-css"><code class="language-css">#area {
  border: 3px groove blue;
  padding: 0px;
  display: none;
}</code></pre>
        </div>
      </div>
      
      </div><p>По умолчанию, текстовое поле скрыто. Кстати, этот код убирает дополнительную рамку в ряде браузеров, которая появляется вокруг поля, когда на него попадает фокус:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-css"><code class="language-css">/*+ no-beautify */
#area:focus {
  outline: none; /* убирает рамку при фокусе */
}</code></pre>
        </div>
      </div>
      
      </div></div></div><div class="task__step"><button type="button" class="task__step-show">Горячие клавиши</button><div class="task__answer-content"><h4 class="task__step-title">Горячие клавиши</h4><p>Чтобы отследить горячие клавиши, нам нужны их скан-коды, а не символы. Это важно, потому что горячие клавиши должны работать независимо от языковой раскладки. Поэтому, мы будем использовать <code>keydown</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">document.onkeydown = function(e) {
  if (e.keyCode == 27) { // escape
    cancel();
    return false;
  }

  if ((e.ctrlKey &amp;&amp; e.keyCode == 'E'.charCodeAt(0)) &amp;&amp; !area.offsetHeight) {
    edit();
    return false;
  }

  if ((e.ctrlKey &amp;&amp; e.keyCode == 'S'.charCodeAt(0)) &amp;&amp; area.offsetHeight) {
    save();
    return false;
  }
};</code></pre>
        </div>
      </div>
      
      </div><p>В примере выше, <code>offsetHeight</code> используется для того, чтобы проверить, отображается элемент или нет. Это очень надежный способ для всех элементов, кроме <code>&lt;tr&gt;</code> в некоторых старых браузерах.</p>
<p>В отличие от простой проверки <code>display=='none'</code>, этот способ работает с элементом, спрятанным с помощью стилей, а так же для элементов, у которых скрыты родители.</p>
</div></div><div class="task__step"><button type="button" class="task__step-show">Редактирование</button><div class="task__answer-content"><h4 class="task__step-title">Редактирование</h4><p>Следующие функции переключают режимы. HTML-код разрешен, поэтому возможна прямая трансформация в <code>&lt;textarea&gt;</code> и обратно.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function edit() {
  view.style.display = 'none';
  area.value = view.innerHTML;
  area.style.display = 'block';
  area.focus();
}

function save() {
  area.style.display = 'none';
  view.innerHTML = area.value;
  view.style.display = 'block';
}

function cancel() {
  area.style.display = 'none';
  view.style.display = 'block';
}</code></pre>
        </div>
      </div>
      
      </div><p><a href="http://plnkr.co/edit/VkTGOO7NSXi47RwpGREM?p=preview" target="_blank" data-plunk-id="VkTGOO7NSXi47RwpGREM">Открыть решение в песочнице.</a></p></div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#редактирование-td-по-клику" name="редактирование-td-по-клику" class="main__anchor">Редактирование TD по клику</a></h3><a href="task/edit-td-click.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Сделать ячейки таблицы <code>td</code> редактируемыми по клику.</p>
<ul>
<li>При клике – ячейка <code>&lt;td&gt;</code> превращается в редактируемую, можно менять HTML. Размеры ячеек при этом не должны меняться.</li>
<li>В один момент может редактироваться одна ячейка.</li>
<li>При редактировании под ячейкой появляются кнопки для приема и отмены редактирования, только клик на них заканчивает редактирование.</li>
</ul>
<p>Демо:</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:300px" src="https://js.cx/task/edit-td-click/solution/"></iframe>
  </div><p><a href="http://plnkr.co/edit/LttOLvpbN6SUxu4PSwUb?p=preview" target="_blank" data-plunk-id="LttOLvpbN6SUxu4PSwUb">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><ol>
<li>При клике – заменяем <code>innerHTML</code> ячейки на <code>&lt;textarea&gt;</code> с размерами «под ячейку», без рамки.</li>
<li>В <code>textarea.value</code> присваиваем содержимое ячейки.</li>
<li>Фокусируем посетителя на ячейке вызовом <code>focus()</code>.</li>
<li>Показываем кнопки OK/CANCEL под ячейкой.</li>
</ol>
<p><a href="http://plnkr.co/edit/9dHKw8j1PAB1J8d84tHp?p=preview" target="_blank" data-plunk-id="9dHKw8j1PAB1J8d84tHp">Открыть решение в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#красивый-плейсхолдер-для-input" name="красивый-плейсхолдер-для-input" class="main__anchor">Красивый плейсхолдер для INPUT</a></h3><a href="task/input-nice-placeholder.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Создайте для <code>&lt;input type=&quot;password&quot;&gt;</code> красивый, стилизованный плейсхолдер, например (кликните на тексте):</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:90px" src="https://js.cx/task/input-nice-placeholder/solution/"></iframe>
  </div><p>При клике плейсхолдер просто исчезает и дальше не показывается.</p>
<p><a href="http://plnkr.co/edit/1ra3f8LKWX9zlDm6kBKV?p=preview" target="_blank" data-plunk-id="1ra3f8LKWX9zlDm6kBKV">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__step"><button type="button" class="task__step-show">Вёрстка</button><div class="task__answer-content"><h4 class="task__step-title">Вёрстка</h4><p>Для вёрстки можно использовать отрицательный <code>margin</code> у текста с подсказкой.</p>
<p>Решение в плане вёрстки есть в решении задачи <a href="task/position-text-into-input.htm">Расположить текст внутри INPUT</a>.</p>
</div></div><div class="task__step"><button type="button" class="task__step-show">Решение</button><div class="task__answer-content"><h4 class="task__step-title">Решение</h4><div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">placeholder.onclick = function() {
  input.focus();
}

// onfocus сработает и при вызове input.focus() и при клике на input
input.onfocus = function() {
  if (placeholder.parentNode) {
    placeholder.parentNode.removeChild(placeholder);
  }
}</code></pre>
        </div>
      </div>
      
      </div><p><a href="http://plnkr.co/edit/IBs1A6wYEIPjN45KXzkk?p=preview" target="_blank" data-plunk-id="IBs1A6wYEIPjN45KXzkk">Открыть решение в песочнице.</a></p></div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#поле-предупреждающее-о-включенном-capslock" name="поле-предупреждающее-о-включенном-capslock" class="main__anchor">Поле, предупреждающее о включенном CapsLock</a></h3><a href="task/capslock-warning-field.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 3</span></div><div class="task__content"><p>Создайте поле, которое будет предупреждать пользователя, если включен <kbd class="shortcut">CapsLock</kbd>. Выключение <kbd class="shortcut">CapsLock</kbd> уберёт предупреждение.</p>
<p>Такое поле может помочь избежать ошибок при вводе пароля.</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:80px" src="https://js.cx/task/capslock-warning-field/solution/"></iframe>
  </div><p><a href="http://plnkr.co/edit/yS73r1zkI9g69LocCuey?p=preview" target="_blank" data-plunk-id="yS73r1zkI9g69LocCuey">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__step"><button type="button" class="task__step-show">Алгоритм</button><div class="task__answer-content"><h4 class="task__step-title">Алгоритм</h4><p>JavaScript не имеет доступа к текущему состоянию <kbd class="shortcut">CapsLock</kbd>. При загрузке страницы не известно, включён он или нет.</p>
<p>Но мы можем догадаться о его состоянии из событий:</p>
<ol>
<li>Проверив символ, полученный по <code>keypress</code>. Символ в верхнем регистре без нажатого <kbd class="shortcut">Shift</kbd> означает, что включён <kbd class="shortcut">CapsLock</kbd>. Аналогично, символ в нижнем регистре, но с <kbd class="shortcut">Shift</kbd> говорят о включенном <kbd class="shortcut">CapsLock</kbd>. Свойство <code>event.shiftKey</code> показывает, нажат ли <kbd class="shortcut">Shift</kbd>. Так мы можем точно узнать, нажат ли <kbd class="shortcut">CapsLock</kbd>.</li>
<li>Проверять <code>keydown</code>. Если нажат CapsLock (скан-код равен <code>20</code>), то переключить состояние, но лишь в том случае, когда оно уже известно.
Под Mac так делать не получится, поскольку клавиатурные события с CapsLock  <a href="keyboard-events.htm#keyboard-events-order">работают некорректно</a>.</li>
</ol>
<p>Имея состояние <code>CapsLock</code> в переменной, можно при фокусировке на <code>INPUT</code> выдавать предупреждение.</p>
<p>Отслеживать оба события: <code>keydown</code> и <code>keypress</code> хорошо бы на уровне документа, чтобы уже на момент входа в поле ввода мы знали состояние CapsLock.</p>
<p>Но при вводе сразу в нужный <code>input</code> событие <code>keypress</code> событие доплывёт до <code>document</code> и поставит состояние CapsLock <em>после того, как сработает на <code>input</code></em>. Как это обойти – подумайте сами.</p>
</div></div><div class="task__step"><button type="button" class="task__step-show">Решение</button><div class="task__answer-content"><h4 class="task__step-title">Решение</h4><p>При загрузке страницы, когда еще ничего не набрано, мы ничего не знаем о состоянии <kbd class="shortcut">CapsLock</kbd>, поэтому оно равно <code>null</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var capsLockEnabled = null;</code></pre>
        </div>
      </div>
      
      </div><p>Когда нажата клавиша, мы можем попытаться проверить, совпадает ли регистр символа и состояние <kbd class="shortcut">Shift</kbd>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">document.onkeypress = function(e) {

  var chr = getChar(e);
  if (!chr) return; // специальная клавиша

  if (chr.toLowerCase() == chr.toUpperCase()) {
    // символ, который не имеет регистра, такой как пробел,
    // мы не можем использовать для определения состояния CapsLock
    return;
  }

  capsLockEnabled = (chr.toLowerCase() == chr &amp;&amp; e.shiftKey) || (chr.toUpperCase() == chr &amp;&amp; !e.shiftKey);
}</code></pre>
        </div>
      </div>
      
      </div><p>Когда пользователь нажимает <kbd class="shortcut">CapsLock</kbd>, мы должны изменить его текущее состояние. Но мы можем сделать это только если знаем, что был нажат <kbd class="shortcut">CapsLock</kbd>.</p>
<p>Например, когда пользователь открыл страницу, мы не знаем, включен ли <kbd class="shortcut">CapsLock</kbd>. Затем, мы получаем событие <code>keydown</code> для <kbd class="shortcut">CapsLock</kbd>. Но мы все равно не знаем его состояния, был ли <kbd class="shortcut">CapsLock</kbd> <em>выключен</em> или, наоборот, включен.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">if (navigator.platform.substr(0, 3) != 'Mac') { // событие для CapsLock глючит под Mac
  document.onkeydown = function(e) {
    if (e.keyCode == 20 &amp;&amp; capsLockEnabled !== null) {
      capsLockEnabled = !capsLockEnabled;
    }
  };
}</code></pre>
        </div>
      </div>
      
      </div><p>Теперь поле. Задание состоит в том, чтобы предупредить пользователя о включенном CapsLock, чтобы уберечь его от неправильного ввода.</p>
<ol>
<li>
<p>Для начала, когда пользователь сфокусировался на поле, мы должны вывести предупреждение о CapsLock, если он включен.</p>
</li>
<li>
<p>Пользователь начинает ввод. Каждое событие <code>keypress</code> всплывает до обработчика <code>document.keypress</code>, который обновляет состояние <code>capsLockEnabled</code>.</p>
<p>Мы не можем использовать событие <code>input.onkeypress</code>, для отображения состояния пользователю, потому что оно сработает <em>до</em> <code>document.onkeypress</code> (из-за всплытия) и, следовательно, до того, как мы узнаем состояние <kbd class="shortcut">CapsLock</kbd>.</p>
<p>Есть много способов решить эту проблему. Можно, например, назначить обработчик состояния CapsLock на  событие <code>input.onkeyup</code>. То есть, индикация будет с задержкой, но это несущественно.</p>
<p>Альтернативное решение – добавить на <code>input</code> такой же обработчик, как и на <code>document.onkeypress</code>.</p>
</li>
<li>
<p>…И наконец, пользователь убирает фокус с поля. Предупреждение может быть видно, если <kbd class="shortcut">CapsLock</kbd> включен, но так как пользователь уже ушел с поля, то нам нужно спрятать предупреждение.</p>
</li>
</ol>
<p>Код проверки поля:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;input type=&quot;text&quot; onkeyup=&quot;checkCapsWarning(event)&quot; onfocus=&quot;checkCapsWarning(event)&quot; onblur=&quot;removeCapsWarning()&quot; /&gt;

&lt;div style=&quot;display:none;color:red&quot; id=&quot;caps&quot;&gt;Внимание: нажат CapsLock!&lt;/div&gt;

&lt;script&gt;
  function checkCapsWarning() {
    document.getElementById('caps').style.display = capsLockEnabled ? 'block' : 'none';
  }

  function removeCapsWarning() {
    document.getElementById('caps').style.display = 'none';
  }
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p><a href="http://plnkr.co/edit/6V1honnJn6WeOtX5TUcF?p=preview" target="_blank" data-plunk-id="6V1honnJn6WeOtX5TUcF">Открыть решение в песочнице.</a></p></div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>