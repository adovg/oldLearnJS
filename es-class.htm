<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="js.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Язык JavaScript</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="es-modern.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Современные возможности ES-2015</span></a></li></ol><h1 class="main__header-title">Классы</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Классы"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>В современном JavaScript появился новый, «более красивый» синтаксис для классов.</p>
<p>Новая конструкция <code>class</code> – удобный «синтаксический сахар» для задания конструктора вместе с прототипом.</p>
<h2><a class="main__anchor" name="class" href="#class">Class</a></h2><p>Синтаксис для классов выглядит так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">class Название [extends Родитель]  {
  constructor
  методы
}</code></pre>
        </div>
      </div>
      
      </div><p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

class User {

  constructor(name) {
    this.name = name;
  }

  sayHi() {
    alert(this.name);
  }

}

let user = new User(&quot;Вася&quot;);
user.sayHi(); // Вася</code></pre>
        </div>
      </div>
      
      </div><p>Функция <code>constructor</code> запускается при создании <code>new User</code>, остальные методы записываются в <code>User.prototype</code>.</p>
<p>Это объявление примерно аналогично такому:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function User(name) {
  this.name = name;
}

User.prototype.sayHi = function() {
  alert(this.name);
};</code></pre>
        </div>
      </div>
      
      </div><p>В обоих случаях <code>new User</code> будет создавать объекты. Метод <code>sayHi</code> также в обоих случаях находится в прототипе.</p>
<p>Но при объявлении через <code>class</code> есть и ряд отличий:</p>
<ul>
<li><code>User</code> нельзя вызывать без <code>new</code>, будет ошибка.</li>
<li>Объявление класса с точки зрения области видимости ведёт себя как <code>let</code>. В частности, оно видно только в текущем блоке и только в коде, который находится ниже объявления (Function Declaration видно и до объявления).</li>
</ul>
<p>Методы, объявленные внутри <code>class</code>, также имеют ряд особенностей:</p>
<ul>
<li>Метод <code>sayHi</code> является именно методом, то есть имеет доступ к <code>super</code>.</li>
<li>Все методы класса работают в строгом режиме <code>use strict</code>, даже если он не указан.</li>
<li>Все методы класса не перечислимы. То есть в цикле <code>for..in</code> по объекту их не будет.</li>
</ul>
<h2><a class="main__anchor" name="class-expression" href="#class-expression">Class Expression</a></h2><p>Также, как и Function Expression, классы можно задавать «инлайн», в любом выражении и внутри вызова функции.</p>
<p>Это называется Class Expression:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

let User = class {
  sayHi() { alert('Привет!'); }
};

new User().sayHi();</code></pre>
        </div>
      </div>
      
      </div><p>В примере выше у класса нет имени, что один-в-один соответствует синтаксису функций. Но имя можно дать. Тогда оно, как и в Named Function Expression, будет доступно только внутри класса:</p>
<div data-trusted="1" class="code-example" data-highlight-block="7-7">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

let SiteGuest = class User {
  sayHi() { alert('Привет!'); }
};

new SiteGuest().sayHi(); // Привет
new User(); // ошибка</code></pre>
        </div>
      </div>
      
      </div><p>В примере выше имя <code>User</code> будет доступно только внутри класса и может быть использовано, например, для создания новых объектов данного типа.</p>
<p>Наиболее очевидная область применения этой возможности – создание вспомогательного класса прямо при вызове функции.</p>
<p>Например, функция <code>createModel</code> в примере ниже создаёт объект по классу и данным, добавляет ему <code>_id</code> и пишет в «реестр» <code>allModels</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

let allModels = {};

function createModel(Model, ...args) {
  let model = new Model(...args);

  model._id = Math.random().toString(36).slice(2);
  allModels[model._id] = model;

  return model;
}

let user = createModel(class User {
  constructor(name) {
    this.name = name;
  }
  sayHi() {
    alert(this.name);
  }
}, &quot;Вася&quot;);

user.sayHi(); // Вася

alert( allModels[user._id].name ); // Вася</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="геттеры-сеттеры-и-вычисляемые-свойства" href="#геттеры-сеттеры-и-вычисляемые-свойства">Геттеры, сеттеры и вычисляемые свойства</a></h2><p>В классах, как и в обычных объектах, можно объявлять геттеры и сеттеры через <code>get/set</code>, а также использовать <code>[…]</code> для свойств с вычисляемыми именами:</p>
<div data-trusted="1" class="code-example" data-highlight-block="8-8,13-13,18-18">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

class User {
  constructor(firstName, lastName) {
    this.firstName = firstName;
    this.lastName = lastName;
  }

  // геттер
  get fullName() {
    return `${this.firstName} ${this.lastName}`;
  }

  // сеттер
  set fullName(newValue) {
    [this.firstName, this.lastName] = newValue.split(' ');
  }

  // вычисляемое название метода
  [&quot;test&quot;.toUpperCase()]() {
    alert(&quot;PASSED!&quot;);
  }

};

let user = new User(&quot;Вася&quot;, &quot;Пупков&quot;);
alert( user.fullName ); // Вася Пупков
user.fullName = &quot;Иван Петров&quot;;
alert( user.fullName ); // Иван Петров
user.TEST(); // PASSED!</code></pre>
        </div>
      </div>
      
      </div><p>При чтении <code>fullName</code> будет вызван метод <code>get fullName()</code>, при присвоении – метод <code>set fullName</code> с новым значением.</p>
<div class="important important_warn">
            <div class="important__header"><span class="important__type"><code>class</code> не позволяет задавать свойства-значения</span></div>
            <div class="important__content"><p>В синтаксисе классов, как мы видели выше, можно создавать методы. Они будут записаны в прототип, как например <code>User.prototype.sayHi</code>.</p>
<p>Однако, нет возможности задать в прототипе обычное значение (не функцию), такое как <code>User.prototype.key = &quot;value&quot;</code>.</p>
<p>Конечно, никто не мешает после объявления класса в прототип дописать подобные свойства, однако предполагается, что в прототипе должны быть только методы.</p>
<p>Если свойство-значение, всё же, необходимо, то можно создать геттер, который будет нужное значение возвращать.</p>
</div></div>
<h2><a class="main__anchor" name="статические-свойства" href="#статические-свойства">Статические свойства</a></h2><p>Класс, как и функция, является объектом. Статические свойства класса <code>User</code> – это свойства непосредственно <code>User</code>, то есть доступные из него «через точку».</p>
<p>Для их объявления используется ключевое слово <code>static</code>.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example" data-highlight-block="8-10">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

class User {
  constructor(firstName, lastName) {
    this.firstName = firstName;
    this.lastName = lastName;
  }

  static createGuest() {
    return new User(&quot;Гость&quot;, &quot;Сайта&quot;);
  }
};

let user = User.createGuest();

alert( user.firstName ); // Гость

alert( User.createGuest ); // createGuest ... (функция)</code></pre>
        </div>
      </div>
      
      </div><p>Как правило, они используются для операций, не требующих наличия объекта, например – для фабричных, как в примере выше, то есть как альтернативные варианты конструктора. Или же, можно добавить метод <code>User.compare</code>, который будет сравнивать двух пользователей для целей сортировки.</p>
<p>Также статическими удобно делать константы:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

class Menu {
  static get elemClass() {
    return &quot;menu&quot;
  }
}

alert( Menu.elemClass ); // menu</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="наследование" href="#наследование">Наследование</a></h2><p>Синтаксис:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">class Child extends Parent {
  ...
}</code></pre>
        </div>
      </div>
      
      </div><p>Посмотрим как это выглядит на практике. В примере ниже объявлено два класса: <code>Animal</code> и наследующий от него <code>Rabbit</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="12-12">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

class Animal {
  constructor(name) {
    this.name = name;
  }

  walk() {
    alert(&quot;I walk: &quot; + this.name);
  }
}

class Rabbit extends Animal {
  walk() {
    super.walk();
    alert(&quot;...and jump!&quot;);
  }
}

new Rabbit(&quot;Вася&quot;).walk();
// I walk: Вася
// and jump!</code></pre>
        </div>
      </div>
      
      </div><p>Как видим, в <code>new Rabbit</code> доступны как свои методы, так и (через <code>super</code>) методы родителя.</p>
<p>Это потому, что при наследовании через <code>extends</code> формируется стандартная цепочка прототипов: методы <code>Rabbit</code> находятся в <code>Rabbit.prototype</code>, методы <code>Animal</code> – в <code>Animal.prototype</code>, и они связаны через <code>__proto__</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

class Animal { }
class Rabbit extends Animal { }

alert( Rabbit.prototype.__proto__ == Animal.prototype ); // true</code></pre>
        </div>
      </div>
      
      </div><p>Как видно из примера выше, методы родителя (<code>walk</code>) можно переопределить в наследнике. При этом для обращения к родительскому методу используют <code>super.walk()</code>.</p>
<p>С конструктором – немного особая история.</p>
<p>Конструктор <code>constructor</code> родителя наследуется автоматически. То есть, если в потомке не указан свой <code>constructor</code>, то используется родительский. В примере выше <code>Rabbit</code>, таким образом, использует <code>constructor</code> от <code>Animal</code>.</p>
<p>Если же у потомка свой <code>constructor</code>, то, чтобы в нём вызвать конструктор родителя – используется синтаксис <code>super()</code> с аргументами для родителя.</p>
<p>Например, вызовем конструктор <code>Animal</code> в <code>Rabbit</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="13-16">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

class Animal {
  constructor(name) {
    this.name = name;
  }

  walk() {
    alert(&quot;I walk: &quot; + this.name);
  }
}

class Rabbit extends Animal {
  constructor() {
    // вызвать конструктор Animal с аргументом &quot;Кроль&quot;
    super(&quot;Кроль&quot;); // то же, что и Animal.call(this, &quot;Кроль&quot;)
  }
}

new Rabbit().walk(); // I walk: Кроль</code></pre>
        </div>
      </div>
      
      </div><p>Для такого вызова есть небольшие ограничения:</p>
<ul>
<li>Вызвать конструктор родителя можно только изнутри конструктора потомка. В частности, <code>super()</code> нельзя вызвать из произвольного метода.</li>
<li>В конструкторе потомка мы обязаны вызвать <code>super()</code> до обращения к <code>this</code>. До вызова <code>super</code> не существует <code>this</code>, так как по спецификации в этом случае именно <code>super</code> инициализирует <code>this</code>.</li>
</ul>
<p>Второе ограничение выглядит несколько странно, поэтому проиллюстрируем его примером:</p>
<div data-trusted="1" class="code-example" data-highlight-block="9-14">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">'use strict';

class Animal {
  constructor(name) {
    this.name = name;
  }
}

class Rabbit extends Animal {
  constructor() {
    alert(this); // ошибка, this не определён!
    // обязаны вызвать super() до обращения к this
    super();
    // а вот здесь уже можно использовать this
  }
}

new Rabbit();</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><ul>
<li>Классы можно объявлять как в основном потоке кода, так и «инлайн», по аналогии с Function Declaration и Expression.</li>
<li>В объявлении классов можно использовать методы, геттеры/сеттеры и вычислимые названия методов.</li>
<li>При наследовании вызов конструктора родителя осуществляется через <code>super(...args)</code>, вызов родительских методов – через <code>super.method(...args)</code>.</li>
</ul>
<p>Концепция классов, которая после долгих обсуждений получилась в стандарте ECMAScript, носит название «максимально минимальной». То есть, в неё вошли только те возможности, которые уж точно необходимы.</p>
<p>В частности, не вошли «приватные» и «защищённые» свойства. То есть, все свойства и методы класса технически доступны снаружи. Возможно, они появятся в будущих редакциях стандарта.</p>
</div></article></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>