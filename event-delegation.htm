<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="ui.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Документ, события, интерфейсы</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="events-and-interfaces.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Основы работы с событиями</span></a></li></ol><h1 class="main__header-title">Делегирование событий</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Делегирование событий"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Всплытие событий позволяет реализовать один из самых важных приёмов разработки – <em>делегирование</em>.</p>
<p>Он заключается в том, что если у нас есть много элементов, события на которых нужно обрабатывать похожим образом, то вместо того, чтобы назначать обработчик каждому – мы ставим один обработчик на их общего предка. Из него можно получить целевой элемент <code>event.target</code>, понять на каком именно потомке произошло событие и обработать его.</p>
<h2><a class="main__anchor" name="пример-ба-гуа" href="#пример-ба-гуа">Пример «Ба Гуа»</a></h2><p>Рассмотрим пример – <a href="http://en.wikipedia.org/wiki/Ba_gua">диаграмму «Ба Гуа»</a>. Это таблица, отражающая древнюю китайскую философию.</p>
<p>Вот она:</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"><div class="toolbar__tool">
        <a href="https://js.cx/article/event-delegation/bagua/" target="_blank" title="открыть в новом окне" class="toolbar__button toolbar__button_external"></a>
      </div>
      <div class="toolbar__tool">
        <a href="http://plnkr.co/edit/ymcUgcSP2h8sfxyfrzLj?p=preview" target="_blank" title="открыть в песочнице"
        data-plunk-id="ymcUgcSP2h8sfxyfrzLj" class="toolbar__button toolbar__button_edit"></a>
      </div>
      </div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:350px" src="https://js.cx/article/event-delegation/bagua/"></iframe>
  </div><p>Её HTML (схематично):</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;table&gt;
  &lt;tr&gt;
    &lt;th colspan=&quot;3&quot;&gt;&lt;em&gt;Bagua&lt;/em&gt; Chart: Direction, Element, Color, Meaning&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;...&lt;strong&gt;Northwest&lt;/strong&gt;...&lt;/td&gt;
    &lt;td&gt;...&lt;/td&gt;
    &lt;td&gt;...&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;...еще 2 строки такого же вида...&lt;/tr&gt;
  &lt;tr&gt;...еще 2 строки такого же вида...&lt;/tr&gt;
&lt;/table&gt;</code></pre>
        </div>
      </div>
      
      </div><p>В этой таблице всего 9 ячеек, но могло быть и 99, и даже 9999, не важно.</p>
<p><strong>Наша задача – реализовать подсветку ячейки <code>&lt;td&gt;</code> при клике.</strong></p>
<p>Вместо того, чтобы назначать обработчик для каждой ячейки, которых может быть очень много – мы повесим <em>единый обработчик</em> на элемент <code>&lt;table&gt;</code>.</p>
<p>Он будет использовать <code>event.target</code>, чтобы получить элемент, на котором произошло событие, и подсветить его.</p>
<p>Код будет таким:</p>
<div data-trusted="1" class="code-example" data-highlight-block="2-8">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var selectedTd;

table.onclick = function(event) {
  var target = event.target; // где был клик?

  if (target.tagName != 'TD') return; // не на TD? тогда не интересует

  highlight(target); // подсветить TD
};

function highlight(node) {
  if (selectedTd) {
    selectedTd.classList.remove('highlight');
  }
  selectedTd = node;
  selectedTd.classList.add('highlight');
}</code></pre>
        </div>
      </div>
      
      </div><p>Такому коду нет разницы, сколько ячеек в таблице. Обработчик всё равно один. Я могу добавлять, удалять <code>&lt;td&gt;</code> из таблицы, менять их количество – моя подсветка будет стабильно работать, так как обработчик стоит на <code>&lt;table&gt;</code>.</p>
<p>Однако, у текущей версии кода есть недостаток.</p>
<p><strong>Клик может быть не на том теге, который нас интересует, а внутри него.</strong></p>
<p>В нашем случае, если взглянуть на HTML таблицы внимательно, видно, что ячейка содержит вложенные теги, например <code>&lt;strong&gt;</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-1">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;td&gt;
  &lt;strong&gt;Northwest&lt;/strong&gt;
  ...Metal..Silver..Elders...
&lt;/td&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Естественно, клик может произойти внутри <code>&lt;td&gt;</code>, на элементе <code>&lt;strong&gt;</code>. Такой клик будет пойман единым обработчиком, но <code>target</code> у него будет не <code>&lt;td&gt;</code>, а <code>&lt;strong&gt;</code>:</p>
<figure><div class="image" style="width:320px">
      <div class="image__ratio" style="padding-top:67.5%"></div>
      <img src="article/event-delegation/bagua-bubble.png" alt="" width="320" height="216" class="image__image">
      </div></figure><p>Внутри обработчика <code>table.onclick</code> мы должны по <code>event.target</code> разобраться, в каком именно <code>&lt;td&gt;</code> был клик.</p>
<p>Для этого мы, используя ссылку <code>parentNode</code>, будем идти вверх по иерархии родителей от <code>event.target</code> и выше и проверять:</p>
<ul>
<li>Если нашли <code>&lt;td&gt;</code>, значит это то что нужно.</li>
<li>Если дошли до элемента <code>table</code> и при этом <code>&lt;td&gt;</code> не найден, то наверное клик был вне <code>&lt;td&gt;</code>, например на элементе заголовка таблицы.</li>
</ul>
<p>Улучшенный обработчик <code>table.onclick</code> с циклом <code>while</code>,  который это делает:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">table.onclick = function(event) {
  var target = event.target;

  // цикл двигается вверх от target к родителям до table
  while (target != table) {
    if (target.tagName == 'TD') {
      // нашли элемент, который нас интересует!
      highlight(target);
      return;
    }
    target = target.parentNode;
  }

  // возможна ситуация, когда клик был вне &lt;td&gt;
  // если цикл дошёл до table и ничего не нашёл,
  // то обработчик просто заканчивает работу
}</code></pre>
        </div>
      </div>
      
      </div><div class="important important_smart">
            <div class="important__header"><span class="important__type">На заметку:</span></div>
            <div class="important__content"><p>Кстати, в проверке <code>while</code> можно бы было использовать <code>this</code> вместо <code>table</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">while (target != this) {
  // ...
}</code></pre>
        </div>
      </div>
      
      </div><p>Это тоже будет работать, так как в обработчике <code>table.onclick</code> значением <code>this</code> является текущий элемент, то есть <code>table</code>.</p>
</div></div>
<p>Можно для этого использовать и метод <code>closest</code>, при поддержке браузером:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">table.onclick = function(event) {
  var target = event.target;

  var td = target.closest('td');
  if (!td) return; // клик вне &lt;td&gt;, не интересует

  // если клик на td, но вне этой таблицы (возможно при вложенных таблицах)
  // то не интересует
  if (!table.contains(td)) return;

  // нашли элемент, который нас интересует!
  highlight(td);
}</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="применение-делегирования-действия-в-разметке" href="#применение-делегирования-действия-в-разметке">Применение делегирования: действия в разметке</a></h2><p>Обычно делегирование – это средство оптимизации интерфейса. Мы используем один обработчик для <em>схожих</em> действий на однотипных элементах.</p>
<p>Выше мы это делали для обработки кликов на <code>&lt;td&gt;</code>.</p>
<p><strong>Но делегирование позволяет использовать обработчик и для абсолютно разных действий.</strong></p>
<p>Например, нам нужно сделать меню с разными кнопками: «Сохранить», «Загрузить», «Поиск» и т.д. И есть объект с соответствующими методами: <code>save</code>, <code>load</code>, <code>search</code> и т.п…</p>
<p>Первое, что может прийти в голову – это найти каждую кнопку и назначить ей свой обработчик среди методов объекта.</p>
<p>Но более изящно решить задачу можно путем добавления одного обработчика на всё меню, а для каждой кнопки в специальном атрибуте, который мы назовем <code>data-action</code> (можно придумать любое название, но <code>data-*</code> является валидным в HTML5), укажем, что она должна вызывать:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:8-26">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;button data-action=&quot;save&quot;&gt;Нажмите, чтобы Сохранить&lt;/button&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Обработчик считывает содержимое атрибута и выполняет метод. Взгляните на рабочий пример:</p>
<div data-trusted="1" class="code-example" data-demo-height="60" data-autorun="true" data-highlight-block="22-25">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;div id=&quot;menu&quot;&gt;
  &lt;button data-action=&quot;save&quot;&gt;Сохранить&lt;/button&gt;
  &lt;button data-action=&quot;load&quot;&gt;Загрузить&lt;/button&gt;
  &lt;button data-action=&quot;search&quot;&gt;Поиск&lt;/button&gt;
&lt;/div&gt;

&lt;script&gt;
  function Menu(elem) {
    this.save = function() {
      alert( 'сохраняю' );
    };
    this.load = function() {
      alert( 'загружаю' );
    };
    this.search = function() {
      alert( 'ищу' );
    };

    var self = this;

    elem.onclick = function(e) {
      var target = e.target;
      var action = target.getAttribute('data-action');
      if (action) {
        self[action]();
      }
    };
  }

  new Menu(menu);
&lt;/script&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-a7teqz"
          style="height:60px"
          src="about:blank"></iframe>
      </div>
      </div><p>Обратите внимание, как используется трюк с <code>var self = this</code>, чтобы сохранить ссылку на объект <code>Menu</code>. Иначе обработчик просто бы не смог вызвать методы <code>Menu</code>, потому что его собственный <code>this</code> ссылается на элемент.</p>
<p>Что в этом случае нам дает использование делегирования событий?</p>
<div class="balance balance_single"><div class="balance__pluses"><div class="balance__content"><ul class="balance__list"><li>Не нужно писать код, чтобы присвоить обработчик каждой кнопке. Меньше кода, меньше времени, потраченного на инициализацию.</li>
<li>Структура HTML становится по-настоящему гибкой. Мы можем добавлять/удалять кнопки в любое время.</li>
<li>Данный подход является семантичным. Также можно использовать классы <code>.action-save</code>, <code>.action-load</code> вместо атрибута <code>data-action</code>.</li>
</ul></div></div></div><h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><p>Делегирование событий – это здорово! Пожалуй, это один из самых полезных приёмов для работы с DOM. Он отлично подходит, если есть много элементов, обработка которых очень схожа.</p>
<p>Алгоритм:</p>
<ol>
<li>Вешаем обработчик на контейнер.</li>
<li>В обработчике: получаем <code>event.target</code>.</li>
<li>В обработчике: если <code>event.target</code> или один из его родителей в контейнере (<code>this</code>) – интересующий нас элемент – обработать его.</li>
</ol>
<p>Зачем использовать:</p>
<div class="balance balance_single"><div class="balance__pluses"><div class="balance__content"><ul class="balance__list"><li>Упрощает инициализацию и экономит память: не нужно вешать много обработчиков.</li>
<li>Меньше кода: при добавлении и удалении элементов не нужно ставить или снимать обработчики.</li>
<li>Удобство изменений: можно массово добавлять или удалять элементы путём изменения <code>innerHTML</code>.</li>
</ul></div></div></div><p>Конечно, у делегирования событий есть свои ограничения.</p>
<div class="balance balance_single"><div class="balance__minuses"><div class="balance__content"><ul class="balance__list"><li>Во-первых, событие должно всплывать. Нельзя, чтобы какой-то промежуточный обработчик вызвал <code>event.stopPropagation()</code> до того, как событие доплывёт до нужного элемента.</li>
<li>Во-вторых, делегирование создает дополнительную нагрузку на браузер, ведь обработчик запускается, когда событие происходит в любом месте контейнера, не обязательно на элементах, которые нам  интересны. Но обычно эта нагрузка настолько пустяковая, что её даже не стоит принимать во внимание.</li>
</ul></div></div></div></div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#скрытие-сообщения-с-помощью-делегирования" name="скрытие-сообщения-с-помощью-делегирования" class="main__anchor">Скрытие сообщения с помощью делегирования</a></h3><a href="task/hide-message-delegate.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Дан список сообщений. Добавьте каждому сообщению кнопку для его удаления.</p>
<p><strong>Используйте делегирование событий. Один обработчик для всего.</strong></p>
<p>В результате, должно работать вот так(кликните на крестик):</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:420px" src="https://js.cx/task/hide-message-delegate/solution/"></iframe>
  </div><p><a href="http://plnkr.co/edit/ilqRl5vAYofKPNK0cbF8?p=preview" target="_blank" data-plunk-id="ilqRl5vAYofKPNK0cbF8">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Поставьте обработчик <code>click</code> на контейнере. Он должен проверять, произошел ли клик на кнопке удаления (<code>target</code>), и если да, то удалять соответствующий ей <code>DIV</code>.</p>
<p><a href="http://plnkr.co/edit/tu8z2sXvDmXncScd5mh8?p=preview" target="_blank" data-plunk-id="tu8z2sXvDmXncScd5mh8">Открыть решение в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#раскрывающееся-дерево" name="раскрывающееся-дерево" class="main__anchor">Раскрывающееся дерево</a></h3><a href="task/sliding-tree.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Создайте дерево, которое по клику на заголовок скрывает-показывает детей:</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:300px" src="https://js.cx/task/sliding-tree/solution/"></iframe>
  </div><p>Требования:</p>
<ul>
<li>Использовать делегирование.</li>
<li>Клик вне текста заголовка (на пустом месте) ничего делать не должен.</li>
<li>При наведении на заголовок – он становится жирным, реализовать через CSS.</li>
</ul>
<p>P.S. При необходимости HTML/CSS дерева можно изменить.</p>
<p><a href="http://plnkr.co/edit/KsgE3vEEHODQIdojYeku?p=preview" target="_blank" data-plunk-id="KsgE3vEEHODQIdojYeku">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__step"><button type="button" class="task__step-show">Схема решения</button><div class="task__answer-content"><h4 class="task__step-title">Схема решения</h4><p>Дерево устроено как вложенный список.</p>
<p>Клики на все элементы можно поймать, повесив единый обработчик <code>onclick</code> на внешний <code>UL</code>.</p>
<p>Как поймать клик на заголовке? Элемент <code>LI</code> является блочным, поэтому нельзя понять, был ли клик на <em>тексте</em>, или справа от него.</p>
<p>Например, ниже – участок дерева с выделенными рамкой узлами. Кликните справа от любого заголовка. Видите, клик ловится? А лучше бы такие клики (не на тексте) игнорировать.</p>
<div data-trusted="0" class="code-example" data-demo-height="190" data-autorun="true">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;style&gt;
  li {
    border: 1px solid green;
  }
&lt;/style&gt;

&lt;ul onclick=&quot;alert(event.target)&quot;&gt;
  &lt;li&gt;Млекопетающие
    &lt;ul&gt;
      &lt;li&gt;Коровы&lt;/li&gt;
      &lt;li&gt;Ослы&lt;/li&gt;
      &lt;li&gt;Собаки&lt;/li&gt;
      &lt;li&gt;Тигры&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-buyfdf"
          style="height:190px"
          src="about:blank"></iframe>
      </div>
      </div><p>В примере выше видно, что проблема в верстке, в том что <code>LI</code> занимает всю ширину. Можно кликнуть справа от текста, это все еще <code>LI</code>.</p>
<p>Один из способов это поправить – обернуть заголовки в дополнительный элемент <code>SPAN</code>, и обрабатывать только клики внутри <code>SPAN'ов</code>, получать по <code>SPAN'у</code> его родителя <code>LI</code> и ставить ему класс открыт/закрыт.</p>
<p>Напишите для этого JavaScript-код.</p>
</div></div><div class="task__step"><button type="button" class="task__step-show">Оборачиваем заголовки в SPAN</button><div class="task__answer-content"><h4 class="task__step-title">Оборачиваем заголовки в SPAN</h4><p>Следующий код ищет все <code>LI</code> и оборачивает текстовые узлы в <code>SPAN</code>.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var treeUl = document.getElementsByTagName('ul')[0];

var treeLis = treeUl.getElementsByTagName('li');

for (var i = 0; i &lt; treeLis.length; i++) {
  var li = treeLis[i];

  var span = document.createElement('span');
  li.insertBefore(span, li.firstChild); // добавить пустой SPAN
  span.appendChild(span.nextSibling); // переместить в него заголовок
}</code></pre>
        </div>
      </div>
      
      </div><p>Теперь можно отслеживать клики <em>на заголовках</em>.</p>
<p>Так выглядит дерево с обёрнутыми в <code>SPAN</code> заголовками и делегированием:</p>
<div data-trusted="0" class="code-example" data-demo-height="190" data-autorun="true">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;style&gt;
  span {
    border: 1px solid red;
  }
&lt;/style&gt;

&lt;ul onclick=&quot;alert(event.target.tagName)&quot;&gt;
  &lt;li&gt;&lt;span&gt;Млекопетающие&lt;/span&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;span&gt;Коровы&lt;/span&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;Ослы&lt;/span&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;Собаки&lt;/span&gt;&lt;/li&gt;
      &lt;li&gt;&lt;span&gt;Тигры&lt;/span&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</code></pre>
        </div>
      </div>
      <div class="code-result code-example__result">
        <iframe
          class="code-result__iframe"
          name="code-result-6amqfl"
          style="height:190px"
          src="about:blank"></iframe>
      </div>
      </div><p>Так как <code>SPAN</code> – инлайновый элемент, он всегда такого же размера как текст. Да здравствует <code>SPAN</code>!</p>
<p>В реальной жизни дерево, скорее всего, будет сразу со <code>SPAN</code>: если HTML-код дерева генерируется на сервере, то это несложно, если дерево генерируется в JavaScript – тем более просто.</p>
</div></div><div class="task__step"><button type="button" class="task__step-show">Итоговое решение</button><div class="task__answer-content"><h4 class="task__step-title">Итоговое решение</h4><p>Для делегирования нужно по клику понять, на каком узле он произошел.</p>
<p>В нашем случае у <code>SPAN</code> нет детей-элементов, поэтому не нужно подниматься вверх по цепочке родителей. Достаточно просто проверить <code>event.target.tagName == 'SPAN'</code>, чтобы понять, где был клик, и спрятать потомков.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var tree = document.getElementsByTagName('ul')[0];

tree.onclick = function(event) {
  var target = event.target;

  if (target.tagName != 'SPAN') {
    return; // клик был не на заголовке
  }

  var li = target.parentNode; // получить родительский LI

  // получить UL с потомками -- это первый UL внутри LI
  var childrenContainer = li.getElementsByTagName('ul')[0];

  if (!childrenContainer) return; // потомков нет -- ничего не надо делать

  // спрятать/показать (можно и через CSS-класс)
  childrenContainer.hidden = !childrenContainer.hidden;
}</code></pre>
        </div>
      </div>
      
      </div><p>Выделение узлов жирным при наведении делается при помощи CSS-селектора <code>:hover</code>.</p>
<p><a href="http://plnkr.co/edit/62Z7toAcJGiLk95mBtUQ?p=preview" target="_blank" data-plunk-id="62Z7toAcJGiLk95mBtUQ">Открыть решение в песочнице.</a></p></div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#сортировка-таблицы" name="сортировка-таблицы" class="main__anchor">Сортировка таблицы</a></h3><a href="task/sort-table.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 4</span></div><div class="task__content"><p>Сделать сортировку таблицы при клике на заголовок.</p>
<p>Демо:</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"></div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:180px" src="https://js.cx/task/sort-table/solution/"></iframe>
  </div><p>Требования:</p>
<ul>
<li>Использовать делегирование.</li>
<li>Код не должен меняться при увеличении количества столбцов или строк.</li>
</ul>
<p>P.S. Обратите внимание, тип столбца задан атрибутом у заголовка. Это необходимо, ведь числа сортируются иначе чем строки. Соответственно, код это может использовать.</p>
<p>P.P.S. Вам помогут дополнительные <a href="traversing-dom.htm#dom-navigation-tables">навигационные ссылки по таблицам</a>.</p>
<p><a href="http://plnkr.co/edit/1lxq0nQBeZCPFNUdaivB?p=preview" target="_blank" data-plunk-id="1lxq0nQBeZCPFNUdaivB">Открыть песочницу для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__step"><button type="button" class="task__step-show">Подсказка (обработчик)</button><div class="task__answer-content"><h4 class="task__step-title">Подсказка (обработчик)</h4><ol>
<li>Обработчик <code>onclick</code> можно повесить один, на всю таблицу или <code>THEAD</code>. Он будет игнорировать клики не на <code>TH</code>.</li>
<li>При клике на <code>TH</code> обработчик будет получать номер из <code>TH</code>, на котором кликнули (<code>TH.cellIndex</code>) и вызывать функцию <code>sortColumn</code>, передавая ей номер колонки и тип.</li>
<li>Функция <code>sortColumn(colNum, type)</code> будет сортировать.</li>
</ol>
</div></div><div class="task__step"><button type="button" class="task__step-show">Подсказка (сортировка)</button><div class="task__answer-content"><h4 class="task__step-title">Подсказка (сортировка)</h4><p>Функция сортировки:</p>
<ol>
<li>Переносит все <code>TR</code> из <code>TBODY</code> в массив <code>rowsArr</code></li>
<li>Сортирует массив, используя <code>rowsArr.sort(compare)</code>, функция <code>compare</code> зависит от типа столбца.</li>
<li>Добавляет <code>TR</code> из массива обратно в <code>TBODY</code></li>
</ol>
<p><a href="http://plnkr.co/edit/im9GDgRDAHMGORMXeSvU?p=preview" target="_blank" data-plunk-id="im9GDgRDAHMGORMXeSvU">Открыть решение в песочнице.</a></p></div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>