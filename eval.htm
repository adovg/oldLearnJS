<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="js.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Язык JavaScript</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="js-misc.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Некоторые другие возможности</span></a></li></ol><h1 class="main__header-title">Запуск кода из строки: eval</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Запуск кода из строки: eval"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Функция <code>eval(code)</code> позволяет выполнить код, переданный ей в виде строки.</p>
<p>Этот код будет выполнен в <em>текущей области видимости</em>.</p>
<h2><a class="main__anchor" name="использование-eval" href="#использование-eval">Использование eval</a></h2><p>В простейшем случае <code>eval</code> всего лишь выполняет код, например:</p>
<div data-trusted="1" class="code-example" data-highlight-block="6-6">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var a = 1;

(function() {

  var a = 2;

  eval(' alert(a) '); // 2

})()</code></pre>
        </div>
      </div>
      
      </div><p>Но он может не только выполнить код, но и вернуть результат.</p>
<p><strong>Вызов <code>eval</code> возвращает последнее вычисленное выражение, например</strong>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( eval('1+1') ); // 2</code></pre>
        </div>
      </div>
      
      </div><p><strong>При вызове <code>eval</code> имеет полный доступ к локальным переменным.</strong></p>
<p>Это означает, что текущие переменные могут быть изменены или дополнены:</p>
<div data-trusted="0" class="code-example" data-refresh="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var x = 5;
eval(&quot; alert( x ); x = 10&quot;); // 5, доступ к старому значению
alert( x ); // 10, значение изменено внутри eval</code></pre>
        </div>
      </div>
      
      </div><div class="important important_smart">
            <div class="important__header"><span class="important__type">В строгом режиме <code>eval</code> имеет свою область видимости </span></div>
            <div class="important__content"><p>В строгом режиме функционал <code>eval</code> чуть-чуть меняется.</p>
<p>При <code>use strict</code> код внутри <code>eval</code> по-прежнему сможет читать и менять внешние переменные, однако переменные и функции, объявленные внутри <code>eval</code>, не попадут наружу.</p>
<div data-trusted="0" class="code-example" data-refresh="1" data-highlight-block="2-2">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">&quot;use strict&quot;;

eval(&quot;var a = 5; function f() { }&quot;);
alert( a ); // ошибка, переменная не определена
// функция f тоже не видна снаружи</code></pre>
        </div>
      </div>
      
      </div><p>Иными словами, в новом стандарте <code>eval</code> имеет свою область видимости, а к внешним переменным обращается через замыкание, аналогично тому, как работают обычные функции.</p>
</div></div>
<h2><a class="main__anchor" name="неграмотное-использование-eval" href="#неграмотное-использование-eval">Неграмотное использование eval</a></h2><p>Начнём с того, что <code>eval</code> применяется очень редко. Действительно редко. Есть даже такое выражение «eval is evil» (eval – зло).</p>
<p>Причина проста: когда-то JavaScript был гораздо более слабым языком, чем сейчас, и некоторые вещи без <code>eval</code> было сделать невозможно. Но те времена давно прошли. И теперь найти тот случай, когда действительно надо выполнить код из строки – это надо постараться.</p>
<p>Но если вы действительно знаете, что это именно тот случай и вам необходим <code>eval</code> – есть ряд вещей, которые нужно иметь в виду.</p>
<p>Доступ к локальным переменным – худшее, что можно сделать при <code>eval</code>.</p>
<p>Дело в том, что локальные переменные могут быть легко переименованы:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function sayHi() {
  var phrase = &quot;Привет&quot;;
  eval(str);
}</code></pre>
        </div>
      </div>
      
      </div><p>Переменная <code>phrase</code> может быть переименована в <code>hello</code>, и если строка <code>str</code> обращается к ней – будет ошибка.</p>
<p>Современные средства сжатия JavaScript переименовывают локальные переменные автоматически. Это считается безопасным, так как локальная переменная видна лишь внутри функции и если в ней везде поменять <code>phrase</code> на <code>p</code>, то никто этого не заметит.</p>
<p>До сжатия:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function sayHi() {
  var phrase = &quot;Привет&quot;;
  alert( phrase );
}</code></pre>
        </div>
      </div>
      
      </div><p>После сжатия:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function sayHi() {
  var a = &quot;Привет&quot;;
  alert( a );
}</code></pre>
        </div>
      </div>
      
      </div><p>На самом деле всё ещё проще – в данном случае утилита сжатия автоматически уберёт переменную <code>a</code> и код станет таким:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function sayHi() {
  alert( &quot;Привет&quot; );
}</code></pre>
        </div>
      </div>
      
      </div><p>Итак, если где-то в функции есть <code>eval</code>, то его взаимодействие с локальными переменными будет нарушено с непредсказуемыми побочными эффектами.</p>
<p>Некоторые инструменты сжатия предупреждают, когда видят <code>eval</code> или стараются вообще не сжимать такой код вместе с его внешними функциями, но всё это борьба с последствиями кривого кода.</p>
<p>Как правило, <code>eval</code> не нужен, именно поэтому говорят: «eval is evil».</p>
<h2><a class="main__anchor" name="запуск-скрипта-в-глобальной-области" href="#запуск-скрипта-в-глобальной-области">Запуск скрипта в глобальной области</a></h2><p>Ок, взаимодействовать с локальными переменными нельзя.</p>
<p>Но, допустим, мы загрузили с сервера или вручную сгенерировали скрипт, который нужно выполнить. Желательно в глобальной области, вне любых функций, чтобы он уж точно к локальным переменным отношения не имел.</p>
<p>Здесь <code>eval</code> может пригодиться. Есть два трюка для выполнения кода в глобальной области:</p>
<ol>
<li>
<p>Везде, кроме IE8-, достаточно вызвать <code>eval</code> не напрямую, а через <code>window.eval</code>.</p>
<p>Вот так:</p>
<div data-trusted="1" class="code-example" data-highlight-block="5-5">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var a = 1;

(function() {

  var a = 2;
  window.eval(' alert(a) '); // 1, выполнено глобально везде, кроме IE8-
})();</code></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p>В IE8- можно применить нестандартную фунцию <a href="http://msdn.microsoft.com/en-us/library/ie/ms536420%28v=vs.85%29.aspx">execScript</a>. Она, как и <code>eval</code>, выполняет код, но всегда в глобальной области видимости и не возвращает значение.</p>
</li>
</ol>
<p>Оба способа можно объединить в единой функции <code>globalEval(code)</code>, выполняющей код без доступа к локальным переменным:</p>
<div data-trusted="1" class="code-example" data-highlight-block="0-2">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function globalEval(code) { // объединим два способа в одну функцию
  window.execScript ? execScript(code) : window.eval(code);
}

var a = 1;

(function() {

  var a = 2;

  globalEval(' alert(a) '); // 1, во всех браузерах

})();</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="внешние-данные-через-new-function" href="#внешние-данные-через-new-function">Внешние данные через new Function</a></h2><p>Итак, у нас есть код, который всё же нужно выполнить динамически, через <code>eval</code>, но не просто скрипт – а ему нужно передать какие-то значения.</p>
<p>Как мы говорили ранее, считать их из локальных переменных нельзя: это подвержено ошибкам при переименовании переменных и сразу ломается при сжатии JavaScript. Да и вообще, неочевидно и криво.</p>
<p><strong>К счастью, существует отличная альтернатива <code>eval</code>, которая позволяет корректно взаимодействовать с внешним кодом: <code>new Function</code>.</strong></p>
<p>Вызов <code>new Function('a,b', '..тело..')</code> создает функцию с указанными аргументами <code>a,b</code> и телом. Как мы помним, доступа к текущему замыканию у такой функции не будет, но можно передать параметры и получить результат.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example" data-highlight-block="3-5">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var a = 2,
  b = 3;

// вместо обращения к a,b через eval
// будем принимать их как аргументы динамически созданной функции
var mul = new Function('a, b', ' return a * b;');

alert( mul(a, b) ); // 6</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="json-и-eval" href="#json-и-eval">JSON и eval</a></h2><p>В браузерах IE7- не было методов <code>JSON.stringify</code> и <code>JSON.parse</code>, поэтому работа с JSON происходила через <code>eval</code>.</p>
<p>Этот способ работы с JSON давно устарел, но его можно встретить кое-где в старом коде, так что для примера рассмотрим его.</p>
<p>Вызов <code>eval(code)</code> выполняет код и, если это выражение, то возвращает его значение, поэтому можно в качестве кода передать JSON.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example" data-highlight-block="5-5">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var str = '{ \
    &quot;name&quot;: &quot;Вася&quot;, \
    &quot;age&quot;: 25 \
}';

var user = eval('(' + str + ')');

alert( user.name ); // Вася</code></pre>
        </div>
      </div>
      
      </div><p>Зачем здесь нужны скобки <code>eval( '(' + str + ')' )</code>, почему не просто <code>eval(str)</code>?</p>
<p>…Всё дело в том, что в JavaScript с фигурной скобки <code>{</code> начинаются не только объекты, а в том числе и «блоки кода». Что имеется в виду в данном случае – интерпретатор определяет по контексту. Если в основном потоке кода – то блок, если в контексте выражения, то объект.</p>
<p>Поэтому если передать в <code>eval</code> объект напрямую, то интерпретатор подумает, что это на самом деле блок кода, а там внутри какие-то двоеточия…</p>
<p>Вот, для примера, <code>eval</code> без скобок, он выдаст ошибку:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = eval('{  &quot;name&quot;: &quot;Вася&quot;,  &quot;age&quot;: 25  }');</code></pre>
        </div>
      </div>
      
      </div><p>А если <code>eval</code> получает выражение в скобках <code>( ... )</code>, то интерпретатор точно знает, что это не блок кода, а объект:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = eval('( {  &quot;name&quot;: &quot;Вася&quot;,  &quot;age&quot;: 25  } )');
alert( user.age ); // 25</code></pre>
        </div>
      </div>
      
      </div><div class="important important_warn">
            <div class="important__header"><span class="important__type">Осторожно, злой JSON!</span></div>
            <div class="important__content"><p>Если мы получаем JSON из недоверенного источника, например с чужого сервера, то разбор через <code>eval</code> может быть опасен.</p>
<p>Например, чужой сервер может быть взломан (за свой-то код мы отвечаем, а за чужой – нет), и вместо JSON вставлен злонамеренный JavaScript-код.</p>
<p><strong>Поэтому рекомендуется, всё же, использовать <code>JSON.parse</code>.</strong></p>
<p>При разборе через <code>JSON.parse</code> некорректный JSON просто приведёт к ошибке, а вот при разборе через <code>eval</code> этот код реально выполнится, он может вывести что-то на странице, перенаправить посетителя куда-то и т.п.</p>
</div></div>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><ul>
<li>Функция <code>eval(str)</code> выполняет код и возвращает последнее вычисленное выражение. В современном JavaScript она используется редко.</li>
<li>Вызов <code>eval</code> может читать и менять локальные переменные. Это – зло, которого нужно избегать.</li>
<li>Для выполнения скрипта в глобальной области используются трюк с <code>window.eval/execScript</code>. При этом локальные переменные не будут затронуты, так что такое выполнение безопасно и иногда, в редких архитектурах, может быть полезным.</li>
<li>Если выполняемый код всё же должен взаимодействовать с локальными переменными – используйте <code>new Function</code>. Создавайте функцию из строки и передавайте переменные ей, это надёжно и безопасно.</li>
</ul>
<p>Ещё примеры использования <code>eval</code> вы найдёте далее, в главе <a href="json.htm">Формат JSON, метод toJSON</a>.</p>
</div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#eval-калькулятор" name="eval-калькулятор" class="main__anchor">Eval-калькулятор</a></h3><a href="task/eval-calculator.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 4</span></div><div class="task__content"><p>Напишите интерфейс, который принимает математическое выражение (<code>prompt</code>) и возвращает его результат.</p>
<p>Проверять выражение на корректность не требуется.</p>
<p><a href="#" onclick="event.preventDefault(); runDemo(this)">Запустить демо</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Вычислить любое выражение нам поможет <code>eval</code>:</p>
<div data-trusted="1" class="code-example" data-demo="1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var expr = prompt(&quot;Введите выражение?&quot;, '2*3+2');

alert( eval(expr) );</code></pre>
        </div>
      </div>
      
      </div><p>При этом посетитель потенциально может делать все, что угодно.</p>
<p>Чтобы ограничить выражения только математикой, вводимую строку нужно проверять при помощи <a href="regular-expressions-javascript.htm">регулярных выражений</a> на наличие любых символов, кроме букв, пробелов и знаков пунктуации.</p>
</div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>