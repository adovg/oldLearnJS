<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><div style="display:none" class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="../default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="../js.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Язык JavaScript</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-3" itemprop="child" class="breadcrumbs__item"><a href="../functions-closures.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Замыкания, область видимости</span></a></li><li id="breadcrumb-3" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="../closures-usage.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Локальные переменные для объекта</span></a></li></div><div itemscope itemtype="http://schema.org/TechArticle" class="task-single"><meta itemprop="name" content="Армия функций"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><a href="../closures-usage.htm" class="task-single__back"><span>Вернуться к уроку</span></a><div itemprop="articleBody" class="task task-single__task"><div class="task__header"><div class="task__title-wrap"><h2 class="task__title">Армия функций</h2></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div></div><div class="task__content"><p>Следующий код создает массив функций-стрелков <code>shooters</code>. По замыслу, каждый стрелок должен выводить свой номер:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function makeArmy() {

  var shooters = [];

  for (var i = 0; i &lt; 10; i++) {
    var shooter = function() { // функция-стрелок
      alert( i ); // выводит свой номер
    };
    shooters.push(shooter);
  }

  return shooters;
}

var army = makeArmy();

army[0](); // стрелок выводит 10, а должен 0
army[5](); // стрелок выводит 10...
// .. все стрелки выводят 10 вместо 0,1,2...9</code></pre>
        </div>
      </div>
      
      </div><p>Почему все стрелки́ выводят одно и то же? Поправьте код, чтобы стрелки работали как задумано. Предложите несколько вариантов исправления.</p>
<p><a href="http://plnkr.co/edit/fsQbPO42ysweeUOtTuoQ?p=preview" target="_blank" data-plunk-id="fsQbPO42ysweeUOtTuoQ">Открыть песочницу с тестами для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__step"><button type="button" class="task__step-show">Что происходит в этом коде</button><div class="task__answer-content"><h4 class="task__step-title">Что происходит в этом коде</h4><p>Функция <code>makeArmy</code> делает следующее:</p>
<ol>
<li>
<p>Создаёт пустой массив <code>shooters</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var shooters = [];</code></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p>В цикле заполняет массив элементами через <code>shooters.push</code>.
При этом каждый элемент массива – это функция, так что в итоге после цикла массив будет таким:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">shooters = [
  function () { alert(i); },
  function () { alert(i); },
  function () { alert(i); },
  function () { alert(i); },
  function () { alert(i); },
  function () { alert(i); },
  function () { alert(i); },
  function () { alert(i); },
  function () { alert(i); },
  function () { alert(i); }
];</code></pre>
        </div>
      </div>
      
      </div><p>Этот массив возвращается из функции.</p>
</li>
<li>
<p>Вызов <code>army[5]()</code> – это получение элемента массива (им будет функция), и тут же – её запуск.</p>
</li>
</ol>
</div></div><div class="task__step"><button type="button" class="task__step-show">Почему ошибка</button><div class="task__answer-content"><h4 class="task__step-title">Почему ошибка</h4><p>Вначале разберемся, почему все стрелки выводят одно и то же значение.</p>
<p>В функциях-стрелках <code>shooter</code> отсутствует переменная <code>i</code>. Когда такая функция вызывается, то <code>i</code> она берет из внешнего <code>LexicalEnvironment</code>.</p>
<p>Чему же будет равно это значение <code>i</code>?</p>
<p>К моменту вызова <code>army[0]()</code>, функция <code>makeArmy</code> уже закончила работу. Цикл  завершился, последнее значение было <code>i=10</code>.</p>
<p>В результате все функции <code>shooter</code> получают из внешнего лексического окружения это, одно и то же, последнее, значение <code>i=10</code>.</p>
<p>Попробуйте исправить проблему самостоятельно.</p>
</div></div><div class="task__step"><button type="button" class="task__step-show">Исправление (3 варианта)</button><div class="task__answer-content"><h4 class="task__step-title">Исправление (3 варианта)</h4><p>Есть несколько способов исправить ситуацию.</p>
<ol>
<li>
<p><strong>Первый способ исправить код – это привязать значение непосредственно к функции-стрелку:</strong></p>
<div data-trusted="1" class="code-example" data-highlight-block="6-9">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function makeArmy() {

  var shooters = [];

  for (var i = 0; i &lt; 10; i++) {

    var shooter = function me() {
      alert( me.i );
    };
    shooter.i = i;

    shooters.push(shooter);
  }

  return shooters;
}

var army = makeArmy();

army[0](); // 0
army[1](); // 1</code></pre>
        </div>
      </div>
      
      </div><p>В этом случае каждая функция хранит в себе свой собственный номер.</p>
<p>Кстати, обратите внимание на использование Named Function Expression, вот в этом участке:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">...
var shooter = function me() {
  alert( me.i );
};
...</code></pre>
        </div>
      </div>
      
      </div><p>Если убрать имя <code>me</code> и оставить обращение через <code>shooter</code>, то работать не будет:</p>
<div data-trusted="1" class="code-example" data-highlight-block="2-4">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">for (var i = 0; i &lt; 10; i++) {
  var shooter = function() {
    alert( shooter.i ); // вывести свой номер (не работает!)
    // потому что откуда функция возьмёт переменную shooter?
    // ..правильно, из внешнего объекта, а там она одна на всех
  };
  shooter.i = i;
  shooters.push(shooter);
}</code></pre>
        </div>
      </div>
      
      </div><p>Вызов <code>alert(shooter.i)</code> при вызове будет искать переменную <code>shooter</code>, а эта переменная меняет значение по ходу цикла, и к моменту вызова она равна последней функции, созданной в цикле.</p>
<p>Если использовать Named Function Expression, то имя жёстко привязывается к конкретной функции, и поэтому в коде выше <code>me.i</code> возвращает правильный <code>i</code>.</p>
</li>
<li>
<p><strong>Другое, более продвинутое решение – использовать дополнительную функцию для того, чтобы «поймать» текущее значение <code>i</code></strong>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="6-12">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function makeArmy() {

  var shooters = [];

  for (var i = 0; i &lt; 10; i++) {

    var shooter = (function(x) {

      return function() {
        alert( x );
      };

    })(i);

    shooters.push(shooter);
  }

  return shooters;
}

var army = makeArmy();

army[0](); // 0
army[1](); // 1</code></pre>
        </div>
      </div>
      
      </div><p>Посмотрим выделенный фрагмент более внимательно, чтобы понять, что происходит:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var shooter = (function(x) {
  return function() {
    alert( x );
  };
})(i);</code></pre>
        </div>
      </div>
      
      </div><p>Функция <code>shooter</code> создана как результат вызова промежуточного функционального выражения <code>function(x)</code>, которое объявляется – и тут же выполняется, получая <code>x = i</code>.</p>
<p>Так как <code>function(x)</code> тут же завершается, то значение <code>x</code> больше не меняется. Оно и будет использовано в возвращаемой функции-стрелке.</p>
<p>Для красоты можно изменить название переменной <code>x</code> на <code>i</code>, суть происходящего при этом не изменится:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var shooter = (function(i) {
  return function() {
    alert( i );
  };
})(i);</code></pre>
        </div>
      </div>
      
      </div><p><strong>Кстати, обратите внимание – скобки вокруг <code>function(i)</code> не нужны</strong>, можно и так:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:31-60">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var shooter = function(i) { // без скобок вокруг function(i)
  return function() {
    alert( i );
  };
}(i);</code></pre>
        </div>
      </div>
      
      </div><p>Скобки добавлены в код для лучшей читаемости, чтобы человек, который просматривает его, не подумал, что <code>var shooter = function</code>, а понял что это вызов «на месте», и присваивается его результат.</p>
</li>
<li>
<p><strong>Еще один забавный способ – обернуть весь цикл во временную функцию</strong>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="4-12">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function makeArmy() {

  var shooters = [];

  for (var i = 0; i &lt; 10; i++)(function(i) {

    var shooter = function() {
      alert( i );
    };

    shooters.push(shooter);

  })(i);

  return shooters;
}

var army = makeArmy();

army[0](); // 0
army[1](); // 1</code></pre>
        </div>
      </div>
      
      </div><p>Вызов <code>(function(i) { ... })</code> обернут в скобки, чтобы интерпретатор понял, что это <code>Function Expression</code>.</p>
<p>Плюс этого способа – в большей читаемости. Фактически, мы не меняем создание <code>shooter</code>, а просто обертываем итерацию в функцию.</p>
</li>
</ol>
<p><a href="http://plnkr.co/edit/VwQ5RBinvhH6aPhIzKNH?p=preview" target="_blank" data-plunk-id="VwQ5RBinvhH6aPhIzKNH">Открыть решение с тестами в песочнице.</a></p></div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></main></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>