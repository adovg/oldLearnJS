<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="js.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Язык JavaScript</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="objects-more.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Методы объектов и контекст вызова</span></a></li></ol><h1 class="main__header-title">Функции-обёртки, декораторы</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Функции-обёртки, декораторы"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>JavaScript предоставляет удивительно гибкие возможности по работе с функциями: их можно передавать, в них можно записывать данные как в объекты, у них есть свои встроенные методы…</p>
<p>Конечно, этим нужно уметь пользоваться. В этой главе, чтобы более глубоко понимать работу с функциями, мы рассмотрим создание функций-обёрток или, иначе говоря, «декораторов».</p>
<p><a href="http://en.wikipedia.org/wiki/Decorator_pattern">Декоратор</a> – приём программирования, который позволяет взять существующую функцию и изменить/расширить ее поведение.</p>
<p><em>Декоратор</em> получает функцию и возвращает обертку, которая делает что-то своё «вокруг» вызова основной функции.</p>
<h2><a class="main__anchor" name="bind-привязка-контекста" href="#bind-привязка-контекста">bind – привязка контекста</a></h2><p>Один простой декоратор вы уже видели ранее – это функция <a href="bind.htm">bind</a>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function bind(func, context) {
  return function() {
    return func.apply(context, arguments);
  };
}</code></pre>
        </div>
      </div>
      
      </div><p>Вызов <code>bind(func, context)</code> возвращает обёртку, которая ставит <code>this</code> и передаёт основную работу функции <code>func</code>.</p>
<h2><a class="main__anchor" name="декоратор-таймер" href="#декоратор-таймер">Декоратор-таймер</a></h2><p>Создадим более сложный декоратор, замеряющий время выполнения функции.</p>
<p>Он будет называться <code>timingDecorator</code> и получать функцию вместе с «названием таймера», а возвращать – функцию-обёртку, которая измеряет время и прибавляет его в специальный объект <code>timer</code> по свойству-названию.</p>
<p>Использование:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f(x) {} // любая функция

var timers = {}; // объект для таймеров

// отдекорировали
f = timingDecorator(f, &quot;myFunc&quot;);

// запускаем
f(1);
f(2);
f(3); // функция работает как раньше, но время подсчитывается

alert( timers.myFunc ); // общее время выполнения всех вызовов f</code></pre>
        </div>
      </div>
      
      </div><p>При помощи декоратора <code>timingDecorator</code> мы сможем взять произвольную функцию и одним движением руки прикрутить к ней измеритель времени.</p>
<p>Его реализация:</p>
<div data-trusted="1" class="code-example" data-highlight-block="21-22,29-30">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var timers = {};

// прибавит время выполнения f к таймеру timers[timer]
function timingDecorator(f, timer) {
  return function() {
    var start = performance.now();

    var result = f.apply(this, arguments); // (*)

    if (!timers[timer]) timers[timer] = 0;
    timers[timer] += performance.now() - start;

    return result;
  }
}

// функция может быть произвольной, например такой:
var fibonacci = function f(n) {
  return (n &gt; 2) ? f(n - 1) + f(n - 2) : 1;
}

// использование: завернём fibonacci в декоратор
fibonacci = timingDecorator(fibonacci, &quot;fibo&quot;);

// неоднократные вызовы...
alert( fibonacci(10) ); // 55
alert( fibonacci(20) ); // 6765
// ...

// в любой момент можно получить общее количество времени на вызовы
alert( timers.fibo + 'мс' );</code></pre>
        </div>
      </div>
      
      </div><p>Обратим внимание на строку <code>(*)</code> внутри декоратора, которая и осуществляет передачу вызова:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var result = f.apply(this, arguments); // (*)</code></pre>
        </div>
      </div>
      
      </div><p>Этот приём называется «форвардинг вызова» (от англ. forwarding): текущий контекст и аргументы через <code>apply</code> передаются в функцию <code>f</code>, так что изнутри <code>f</code> всё выглядит так, как была вызвана она напрямую, а не декоратор.</p>
<h2><a class="main__anchor" name="декоратор-для-проверки-типа" href="#декоратор-для-проверки-типа">Декоратор для проверки типа</a></h2><p>В JavaScript, как правило, пренебрегают проверками типа. В функцию, которая должна получать число, может быть передана строка, булево значение или даже объект.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function sum(a, b) {
  return a + b;
}

// передадим в функцию для сложения чисел нечисловые значения
alert( sum(true, { name: &quot;Вася&quot;, age: 35 }) ); // true[Object object]</code></pre>
        </div>
      </div>
      
      </div><p>Функция «как-то» отработала, но в реальной жизни передача в <code>sum</code> подобных значений, скорее всего, будет следствием программной ошибки. Всё-таки <code>sum</code> предназначена для суммирования чисел, а не объектов.</p>
<p>Многие языки программирования позволяют прямо в объявлении функции указать, какие типы данных имеют параметры. И это удобно, поскольку повышает надёжность кода.</p>
<p>В JavaScript же проверку типов приходится делать дополнительным кодом в начале функции, который во-первых обычно  лень писать, а во-вторых он увеличивает общий объем текста, тем самым ухудшая читаемость.</p>
<p><strong>Декораторы способны упростить рутинные, повторяющиеся задачи, вынести их из кода функции.</strong></p>
<p>Например, создадим декоратор, который принимает функцию и массив, который описывает для какого аргумента какую проверку типа применять:</p>
<div data-trusted="1" class="code-example" data-highlight-block="23-24,29-31">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// вспомогательная функция для проверки на число
function checkNumber(value) {
  return typeof value == 'number';
}

// декоратор, проверяющий типы для f
// второй аргумент checks - массив с функциями для проверки
function typeCheck(f, checks) {
  return function() {
    for (var i = 0; i &lt; arguments.length; i++) {
      if (!checks[i](arguments[i])) {
        alert( &quot;Некорректный тип аргумента номер &quot; + i );
        return;
      }
    }
    return f.apply(this, arguments);
  }
}

function sum(a, b) {
  return a + b;
}

// обернём декоратор для проверки
sum = typeCheck(sum, [checkNumber, checkNumber]); // оба аргумента - числа

// пользуемся функцией как обычно
alert( sum(1, 2) ); // 3, все хорошо

// а вот так - будет ошибка
sum(true, null); // некорректный аргумент номер 0
sum(1, [&quot;array&quot;, &quot;in&quot;, &quot;sum?!?&quot;]); // некорректный аргумент номер 1</code></pre>
        </div>
      </div>
      
      </div><p>Конечно, этот декоратор можно ещё расширять, улучшать, дописывать проверки, но… Вы уже поняли принцип, не правда ли?</p>
<p><strong>Один раз пишем декоратор и дальше просто применяем этот функционал везде, где нужно.</strong></p>
<h2><a class="main__anchor" name="декоратор-проверки-доступа" href="#декоратор-проверки-доступа">Декоратор проверки доступа</a></h2><p>И наконец посмотрим ещё один, последний пример.</p>
<p>Предположим, у нас есть функция <code>isAdmin()</code>, которая возвращает <code>true</code>, если у посетителя есть права администратора.</p>
<p>Можно создать декоратор <code>checkPermissionDecorator</code>, который добавляет в любую функцию проверку прав:</p>
<p>Например, создадим декоратор <code>checkPermissionDecorator(f)</code>. Он будет возвращать обертку, которая передает вызов <code>f</code> в том случае, если у посетителя достаточно прав:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function checkPermissionDecorator(f) {
  return function() {
    if (isAdmin()) {
      return f.apply(this, arguments);
    }
    alert( 'Недостаточно прав' );
  }
}</code></pre>
        </div>
      </div>
      
      </div><p>Использование декоратора:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function save() { ... }

save = checkPermissionDecorator(save);
// Теперь вызов функции save() проверяет права</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><p>Декоратор – это обёртка над функцией, которая модифицирует её поведение. При этом основную работу по-прежнему выполняет функция.</p>
<p><strong>Декораторы можно не только повторно использовать, но и комбинировать!</strong></p>
<p>Это кардинально повышает их выразительную силу. Декораторы можно рассматривать как своего рода «фичи» или возможности, которые можно «нацепить» на любую функцию. Можно один, а можно несколько.</p>
<p>Скажем, используя декораторы, описанные выше, можно добавить к функции возможности по проверке типов данных, замеру времени и проверке доступа буквально одной строкой, не залезая при этом в её код, то есть (!) не увеличивая его сложность.</p>
<p>Предлагаю вашему вниманию задачи, которые помогут выяснить, насколько вы разобрались в декораторах. Далее в учебнике мы ещё встретимся с ними.</p>
</div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#логирующий-декоратор-1-аргумент" name="логирующий-декоратор-1-аргумент" class="main__anchor">Логирующий декоратор (1 аргумент)</a></h3><a href="task/logging-decorator.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Создайте декоратор <code>makeLogging(f, log)</code>, который берет функцию <code>f</code> и массив <code>log</code>.</p>
<p>Он должен возвращать обёртку вокруг <code>f</code>, которая при каждом вызове записывает («логирует») аргументы в <code>log</code>, а затем передает вызов в <code>f</code>.</p>
<p><strong>В этой задаче можно считать, что у функции <code>f</code> ровно один аргумент.</strong></p>
<p>Работать должно так:</p>
<div data-trusted="1" class="code-example" data-highlight-block="13-13">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function work(a) {
  /* ... */ // work - произвольная функция, один аргумент
}

function makeLogging(f, log) { /* ваш код */ }

var log = [];
work = makeLogging(work, log);

work(1); // 1, добавлено в log
work(5); // 5, добавлено в log

for (var i = 0; i &lt; log.length; i++) {
  alert( 'Лог:' + log[i] ); // &quot;Лог:1&quot;, затем &quot;Лог:5&quot;
}</code></pre>
        </div>
      </div>
      
      </div><p><a href="http://plnkr.co/edit/XgcMCDSlAeuAnM9YAAJ9?p=preview" target="_blank" data-plunk-id="XgcMCDSlAeuAnM9YAAJ9">Открыть песочницу с тестами для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Возвратим декоратор <code>wrapper</code> который будет записывать аргумент в <code>log</code> и передавать вызов в <code>f</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="6-9">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function work(a) {
  /*...*/ // work - произвольная функция, один аргумент
}

function makeLogging(f, log) {

  function wrapper(a) {
      log.push(a);
      return f.call(this, a);
    }

  return wrapper;
}

var log = [];
work = makeLogging(work, log);

work(1); // 1
work(5); // 5

for (var i = 0; i &lt; log.length; i++) {
  alert( 'Лог:' + log[i] ); // &quot;Лог:1&quot;, затем &quot;Лог:5&quot;
}</code></pre>
        </div>
      </div>
      
      </div><p><strong>Обратите внимание, вызов функции осуществляется как <code>f.call(this, a)</code>, а не просто <code>f(a)</code>.</strong></p>
<p>Передача контекста необходима, чтобы декоратор корректно работал с методами объекта. Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">user.method = makeLogging(user.method, log);</code></pre>
        </div>
      </div>
      
      </div><p>Теперь при вызове <code>user.method(...)</code> в декоратор будет передаваться контекст <code>this</code>, который надо передать исходной функции через <code>call/apply</code>.</p>
<p><a href="http://plnkr.co/edit/ndvqPD82NolUJGAdnVxo?p=preview" target="_blank" data-plunk-id="ndvqPD82NolUJGAdnVxo">Открыть решение с тестами в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#логирующий-декоратор-много-аргументов" name="логирующий-декоратор-много-аргументов" class="main__anchor">Логирующий декоратор (много аргументов)</a></h3><a href="task/logging-decorator-arguments.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 3</span></div><div class="task__content"><p>Создайте декоратор <code>makeLogging(func, log)</code>, для функции <code>func</code> возвращающий обёртку, которая при каждом вызове добавляет её аргументы в массив <code>log</code>.</p>
<p>Условие аналогично задаче <a href="task/logging-decorator.htm">Логирующий декоратор (1 аргумент)</a>, но допускается <code>func</code> с любым набором аргументов.</p>
<p>Работать должно так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function work(a, b) {
  alert( a + b ); // work - произвольная функция
}

function makeLogging(f, log) { /* ваш код */ }

var log = [];
work = makeLogging(work, log);

work(1, 2); // 3
work(4, 5); // 9

for (var i = 0; i &lt; log.length; i++) {
  var args = log[i]; // массив из аргументов i-го вызова
  alert( 'Лог:' + args.join() ); // &quot;Лог:1,2&quot;, &quot;Лог:4,5&quot;
}</code></pre>
        </div>
      </div>
      
      </div><p><a href="http://plnkr.co/edit/WNnKln40Ttn4B17WP7oE?p=preview" target="_blank" data-plunk-id="WNnKln40Ttn4B17WP7oE">Открыть песочницу с тестами для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Решение аналогично задаче <a href="task/logging-decorator.htm">Логирующий декоратор (1 аргумент)</a>, разница в том, что в лог вместо одного аргумента идет весь объект <code>arguments</code>.</p>
<p>Для передачи вызова с произвольным количеством аргументов используем <code>f.apply(this, arguments)</code>.</p>
<div data-trusted="1" class="code-example" data-highlight-block="6-9">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function work(a, b) {
  alert( a + b ); // work - произвольная функция
}

function makeLogging(f, log) {

  function wrapper() {
      log.push([].slice.call(arguments));
      return f.apply(this, arguments);
    }

  return wrapper;
}

var log = [];
work = makeLogging(work, log);

work(1, 2); // 3
work(4, 5); // 9

for (var i = 0; i &lt; log.length; i++) {
  var args = log[i]; // массив из аргументов i-го вызова
  alert( 'Лог:' + args.join() ); // &quot;Лог:1,2&quot;, &quot;Лог:4,5&quot;
}</code></pre>
        </div>
      </div>
      
      </div><p><a href="http://plnkr.co/edit/yc6E0NO4MAcle7JAjSTy?p=preview" target="_blank" data-plunk-id="yc6E0NO4MAcle7JAjSTy">Открыть решение с тестами в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#кеширующий-декоратор" name="кеширующий-декоратор" class="main__anchor">Кеширующий декоратор</a></h3><a href="task/caching-decorator.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Создайте декоратор <code>makeCaching(f)</code>, который берет функцию <code>f</code> и возвращает обертку, которая кеширует её результаты.</p>
<p><strong>В этой задаче функция <code>f</code> имеет только один аргумент, и он является числом.</strong></p>
<ol>
<li>При первом вызове обертки с определенным аргументом – она вызывает <code>f</code> и запоминает значение.</li>
<li>При втором и последующих вызовах с тем же аргументом возвращается запомненное значение.</li>
</ol>
<p>Должно работать так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f(x) {
  return Math.random() * x; // random для удобства тестирования
}

function makeCaching(f) { /* ваш код */ }

f = makeCaching(f);

var a, b;

a = f(1);
b = f(1);
alert( a == b ); // true (значение закешировано)

b = f(2);
alert( a == b ); // false, другой аргумент =&gt; другое значение</code></pre>
        </div>
      </div>
      
      </div><p><a href="http://plnkr.co/edit/F2aA4cSTOwlR7BSFT9Np?p=preview" target="_blank" data-plunk-id="F2aA4cSTOwlR7BSFT9Np">Открыть песочницу с тестами для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Запоминать результаты вызова функции будем в замыкании, в объекте <code>cache: { ключ:значение }</code>.</p>
<div data-trusted="1" class="code-example" data-highlight-block="4-14">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f(x) {
  return Math.random()*x;
}

function makeCaching(f) {
  var cache = {};

  return function(x) {
    if (!(x in cache)) {
      cache[x] = f.call(this, x);
    }
    return cache[x];
  };

}

f = makeCaching(f);

var a = f(1);
var b = f(1);
alert( a == b ); // true (значение закешировано)

b = f(2);
alert( a == b ); // false, другой аргумент =&gt; другое значение</code></pre>
        </div>
      </div>
      
      </div><p>Обратите внимание: проверка на наличие уже подсчитанного значения выглядит так: <code>if (x in cache)</code>. Менее универсально можно проверить так: <code>if (cache[x])</code>, это если мы точно знаем, что <code>cache[x]</code> никогда не будет <code>false</code>, <code>0</code> и т.п.</p>
<p><a href="http://plnkr.co/edit/3uOIJhJ8Tegf9rc7SuHn?p=preview" target="_blank" data-plunk-id="3uOIJhJ8Tegf9rc7SuHn">Открыть решение с тестами в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>