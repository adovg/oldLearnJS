<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="js.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Язык JavaScript</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="data-structures.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Структуры данных</span></a></li></ol><h1 class="main__header-title">Массивы: методы</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Массивы: методы"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>В этой главе мы рассмотрим встроенные методы массивов JavaScript.</p>
<h2><a class="main__anchor" name="метод-split" href="#метод-split">Метод split</a></h2><p>Ситуация из реальной жизни. Мы пишем сервис отсылки сообщений и посетитель вводит имена тех, кому его отправить: <code>Маша, Петя, Марина, Василий...</code>. Но нам-то гораздо удобнее работать с массивом имен, чем с одной строкой.</p>
<p>К счастью, есть метод <code>split(s)</code>, который позволяет превратить строку в массив, разбив ее по разделителю <code>s</code>. В примере ниже таким разделителем является строка из запятой и пробела.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var names = 'Маша, Петя, Марина, Василий';

var arr = names.split(', ');

for (var i = 0; i &lt; arr.length; i++) {
  alert( 'Вам сообщение ' + arr[i] );
}</code></pre>
        </div>
      </div>
      
      </div><div class="important important_smart">
            <div class="important__header"><span class="important__type">Второй аргумент <code>split</code></span></div>
            <div class="important__content"><p>У метода <code>split</code> есть необязательный второй аргумент – ограничение на количество элементов в массиве. Если их больше, чем указано – остаток массива будет отброшен:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:28-29">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( &quot;a,b,c,d&quot;.split(',', 2) ); // a,b</code></pre>
        </div>
      </div>
      
      </div></div></div>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Разбивка по буквам</span></div>
            <div class="important__content"><p>Вызов <code>split</code> с пустой строкой разобьёт по буквам:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var str = &quot;тест&quot;;

alert( str.split('') ); // т,е,с,т</code></pre>
        </div>
      </div>
      
      </div></div></div>
<h2><a class="main__anchor" name="метод-join" href="#метод-join">Метод join</a></h2><p>Вызов <code>arr.join(str)</code> делает в точности противоположное <code>split</code>. Он берет массив и склеивает его в строку, используя <code>str</code> как разделитель.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = ['Маша', 'Петя', 'Марина', 'Василий'];

var str = arr.join(';');

alert( str ); // Маша;Петя;Марина;Василий</code></pre>
        </div>
      </div>
      
      </div><div class="important important_smart">
            <div class="important__header"><span class="important__type">new Array + join = Повторение строки</span></div>
            <div class="important__content"><p>Код для повторения строки <code>3</code> раза:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert( new Array(4).join(&quot;ля&quot;) ); // ляляля</code></pre>
        </div>
      </div>
      
      </div><p>Как видно, <code>new Array(4)</code> делает массив без элементов длины 4, который <code>join</code> объединяет в строку, вставляя <em>между его элементами</em> строку <code>&quot;ля&quot;</code>.</p>
<p>В результате, так как элементы пусты, получается повторение строки. Такой вот небольшой трюк.</p>
</div></div>
<h2><a class="main__anchor" name="удаление-из-массива" href="#удаление-из-массива">Удаление из массива</a></h2><p>Так как массивы являются объектами, то для удаления ключа можно воспользоваться обычным <code>delete</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [&quot;Я&quot;, &quot;иду&quot;, &quot;домой&quot;];

delete arr[1]; // значение с индексом 1 удалено

// теперь arr = [&quot;Я&quot;, undefined, &quot;домой&quot;];
alert( arr[1] ); // undefined</code></pre>
        </div>
      </div>
      
      </div><p>Да, элемент удален из массива, но не так, как нам этого хочется. Образовалась «дырка».</p>
<p>Это потому, что оператор <code>delete</code> удаляет пару «ключ-значение». Это – все, что он делает. Обычно же при удалении из массива мы хотим, чтобы оставшиеся элементы сдвинулись и заполнили образовавшийся промежуток.</p>
<p>Поэтому для удаления используются специальные методы: из начала – <code>shift</code>, с конца – <code>pop</code>, а из середины – <code>splice</code>, с которым мы сейчас познакомимся.</p>
<h2><a class="main__anchor" name="метод-splice" href="#метод-splice">Метод splice</a></h2><p>Метод <code>splice</code> – это универсальный раскладной нож для работы с массивами. Умеет все: удалять элементы, вставлять элементы, заменять элементы – по очереди и одновременно.</p>
<p>Его синтаксис:</p>
<dl>
<dt><code>arr.splice(index[, deleteCount, elem1, ..., elemN])</code></dt>
<dd>Удалить <code>deleteCount</code> элементов, начиная с номера <code>index</code>, а затем вставить <code>elem1, ..., elemN</code> на их место. Возвращает массив из удалённых элементов.</dd>
</dl>
<p>Этот метод проще всего понять, рассмотрев примеры.</p>
<p>Начнём с удаления:</p>
<div data-trusted="1" class="code-example" data-highlight-block="2-2">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [&quot;Я&quot;, &quot;изучаю&quot;, &quot;JavaScript&quot;];

arr.splice(1, 1); // начиная с позиции 1, удалить 1 элемент

alert( arr ); //  осталось [&quot;Я&quot;, &quot;JavaScript&quot;]</code></pre>
        </div>
      </div>
      
      </div><p>В следующем примере мы удалим 3 элемента и вставим другие на их место:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:11-35,5:24-39">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [&quot;Я&quot;, &quot;сейчас&quot;, &quot;изучаю&quot;, &quot;JavaScript&quot;];

// удалить 3 первых элемента и добавить другие вместо них
arr.splice(0, 3, &quot;Мы&quot;, &quot;изучаем&quot;)

alert( arr ) // теперь [&quot;Мы&quot;, &quot;изучаем&quot;, &quot;JavaScript&quot;]</code></pre>
        </div>
      </div>
      
      </div><p>Здесь видно, что <code>splice</code> возвращает массив из удаленных элементов:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:11-25">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [&quot;Я&quot;, &quot;сейчас&quot;, &quot;изучаю&quot;, &quot;JavaScript&quot;];

// удалить 2 первых элемента
var removed = arr.splice(0, 2);

alert( removed ); // &quot;Я&quot;, &quot;сейчас&quot; &lt;-- array of removed elements</code></pre>
        </div>
      </div>
      
      </div><p>Метод <code>splice</code> также может вставлять элементы без удаления, для этого достаточно установить <code>deleteCount</code> в <code>0</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [&quot;Я&quot;, &quot;изучаю&quot;, &quot;JavaScript&quot;];

// с позиции 2
// удалить 0
// вставить &quot;сложный&quot;, &quot;язык&quot;
arr.splice(2, 0, &quot;сложный&quot;, &quot;язык&quot;);

alert( arr ); // &quot;Я&quot;, &quot;изучаю&quot;, &quot;сложный&quot;, &quot;язык&quot;, &quot;JavaScript&quot;</code></pre>
        </div>
      </div>
      
      </div><p>Допускается использование отрицательного номера позиции, которая в этом случае отсчитывается с конца:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [1, 2, 5]

// начиная с позиции индексом -1 (перед последним элементом)
// удалить 0 элементов,
// затем вставить числа 3 и 4
arr.splice(-1, 0, 3, 4);

alert( arr ); // результат: 1,2,3,4,5</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="метод-slice" href="#метод-slice">Метод slice</a></h2><p>Метод <code>slice(begin, end)</code> копирует участок массива от <code>begin</code> до <code>end</code>, не включая <code>end</code>. Исходный массив при этом не меняется.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [&quot;Почему&quot;, &quot;надо&quot;, &quot;учить&quot;, &quot;JavaScript&quot;];

var arr2 = arr.slice(1, 3); // элементы 1, 2 (не включая 3)

alert( arr2 ); // надо, учить</code></pre>
        </div>
      </div>
      
      </div><p>Аргументы ведут себя так же, как и в строковом <code>slice</code>:</p>
<ul>
<li>
<p>Если не указать <code>end</code> – копирование будет до конца массива:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [&quot;Почему&quot;, &quot;надо&quot;, &quot;учить&quot;, &quot;JavaScript&quot;];

alert( arr.slice(1) ); // взять все элементы, начиная с номера 1</code></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p>Можно использовать отрицательные индексы, они отсчитываются с конца:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr2 = arr.slice(-2); // копировать от 2-го элемента с конца и дальше</code></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p>Если вообще не указать аргументов – скопируется весь массив:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var fullCopy = arr.slice();</code></pre>
        </div>
      </div>
      
      </div></li>
</ul>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Совсем как в строках</span></div>
            <div class="important__content"><p>Синтаксис метода <code>slice</code> одинаков для строк и для массивов. Тем проще его запомнить.</p>
</div></div>
<h2><a class="main__anchor" name="сортировка-метод-sort-fn" href="#сортировка-метод-sort-fn">Сортировка, метод sort(fn)</a></h2><p>Метод <code>sort()</code> сортирует массив <em>на месте</em>. Например:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="4:18-26">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [ 1, 2, 15 ];

arr.sort();

alert( arr );  // 1, 15, 2</code></pre>
        </div>
      </div>
      
      </div><p>Не заметили ничего странного в этом примере?</p>
<p>Порядок стал <code>1, 15, 2</code>, это точно не сортировка чисел. Почему?</p>
<p><strong>Это произошло потому, что по умолчанию <code>sort</code> сортирует, преобразуя элементы к строке.</strong></p>
<p>Поэтому и порядок у них строковый, ведь <code>&quot;2&quot; &gt; &quot;15&quot;</code>.</p>
<h3><a class="main__anchor" name="свой-порядок-сортировки" href="#свой-порядок-сортировки">Свой порядок сортировки</a></h3><p>Для указания своего порядка сортировки в метод <code>arr.sort(fn)</code> нужно передать функцию <code>fn</code> от двух элементов, которая умеет сравнивать их.</p>
<p>Внутренний алгоритм функции сортировки умеет сортировать любые массивы – апельсинов, яблок, пользователей, и тех и других и третьих – чего угодно. Но для этого ему нужно знать, как их сравнивать. Эту роль и выполняет <code>fn</code>.</p>
<p>Если эту функцию не указать, то элементы сортируются как строки.</p>
<p>Например, укажем эту функцию явно, отсортируем элементы массива как числа:</p>
<div data-trusted="1" class="code-example" data-highlight-block="7-7" data-highlight-inline="9:16-24">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function compareNumeric(a, b) {
  if (a &gt; b) return 1;
  if (a &lt; b) return -1;
}

var arr = [ 1, 2, 15 ];

arr.sort(compareNumeric);

alert(arr);  // 1, 2, 15</code></pre>
        </div>
      </div>
      
      </div><p>Обратите внимание, мы передаём в <code>sort()</code> именно саму функцию <code>compareNumeric</code>, без вызова через скобки. Был бы ошибкой следующий код:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="0:24-26">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">arr.sort( compareNumeric() );  // не сработает</code></pre>
        </div>
      </div>
      
      </div><p>Как видно из примера выше, функция, передаваемая <code>sort</code>, должна иметь два аргумента.</p>
<p>Алгоритм сортировки, встроенный в JavaScript, будет передавать ей для сравнения элементы массива. Она должна возвращать:</p>
<ul>
<li>Положительное значение, если <code>a &gt; b</code>,</li>
<li>Отрицательное значение, если <code>a &lt; b</code>,</li>
<li>Если равны – можно <code>0</code>, но вообще – не важно, что возвращать, если их взаимный порядок не имеет значения.</li>
</ul>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Алгоритм сортировки</span></div>
            <div class="important__content"><p>В методе <code>sort</code>, внутри самого интерпретатора JavaScript, реализован универсальный алгоритм сортировки. Как правило, это <a href="http://algolist.manual.ru/sort/quick_sort.php">««быстрая сортировка»»</a>, дополнительно оптимизированная для небольших массивов.</p>
<p>Он решает, какие пары элементов и когда сравнивать, чтобы отсортировать побыстрее. Мы даём ему функцию – способ сравнения, дальше он вызывает её сам.</p>
<p>Кстати, те значения, с которыми <code>sort</code> вызывает функцию сравнения, можно увидеть, если вставить в неё <code>alert</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">[1, -2, 15, 2, 0, 8].sort(function(a, b) {
  alert( a + &quot; &lt;&gt; &quot; + b );
});</code></pre>
        </div>
      </div>
      
      </div></div></div>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Сравнение <code>compareNumeric</code> в одну строку</span></div>
            <div class="important__content"><p>Функцию <code>compareNumeric</code> для сравнения элементов-чисел можно упростить до одной строчки.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function compareNumeric(a, b) {
  return a - b;
}</code></pre>
        </div>
      </div>
      
      </div><p>Эта функция вполне подходит для <code>sort</code>, так как возвращает положительное число, если <code>a &gt; b</code>, отрицательное, если наоборот, и <code>0</code>, если числа равны.</p>
</div></div>
<h2><a class="main__anchor" name="reverse" href="#reverse">reverse</a></h2><p>Метод <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/reverse">arr.reverse()</a> меняет порядок элементов в массиве на обратный.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [1, 2, 3];
arr.reverse();

alert( arr ); // 3,2,1</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="concat" href="#concat">concat</a></h2><p>Метод <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/concat">arr.concat(value1, value2, … valueN)</a> создаёт новый массив, в который копируются элементы из <code>arr</code>, а также <code>value1, value2, ... valueN</code>.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-1">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [1, 2];
var newArr = arr.concat(3, 4);

alert( newArr ); // 1,2,3,4</code></pre>
        </div>
      </div>
      
      </div><p>У <code>concat</code> есть одна забавная особенность.</p>
<p>Если аргумент <code>concat</code> – массив, то <code>concat</code> добавляет элементы из него.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example" data-highlight-block="2-2">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [1, 2];

var newArr = arr.concat([3, 4], 5); // то же самое, что arr.concat(3,4,5)

alert( newArr ); // 1,2,3,4,5</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="indexof-lastindexof" href="#indexof-lastindexof">indexOf/lastIndexOf</a></h2><p>Эти методы не поддерживаются в IE8-. Для их поддержки подключите библиотеку <a href="https://github.com/kriskowal/es5-shim">ES5-shim</a>.</p>
<p>Метод <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf">«arr.indexOf(searchElement[, fromIndex])»</a> возвращает номер элемента <code>searchElement</code> в массиве <code>arr</code> или <code>-1</code>, если его нет.</p>
<p>Поиск начинается с номера <code>fromIndex</code>, если он указан. Если нет – с начала массива.</p>
<p><strong>Для поиска используется строгое сравнение <code>===</code>.</strong></p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [1, 0, false];

alert( arr.indexOf(0) ); // 1
alert( arr.indexOf(false) ); // 2
alert( arr.indexOf(null) ); // -1</code></pre>
        </div>
      </div>
      
      </div><p>Как вы могли заметить, по синтаксису он полностью аналогичен методу <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/indexOf">indexOf для строк</a>.</p>
<p>Метод <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf">«arr.lastIndexOf(searchElement[, fromIndex])»</a> ищет справа-налево: с конца массива или с номера <code>fromIndex</code>, если он указан.</p>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">Методы <code>indexOf/lastIndexOf</code> осуществляют поиск перебором</span></div>
            <div class="important__content"><p>Если нужно проверить, существует ли значение в массиве – его нужно перебрать. Только так. Внутренняя реализация <code>indexOf/lastIndexOf</code> осуществляет полный перебор, аналогичный циклу <code>for</code> по массиву. Чем длиннее массив, тем дольше он будет работать.</p>
</div></div>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Коллекция уникальных элементов</span></div>
            <div class="important__content"><p>Рассмотрим задачу – есть коллекция строк, и нужно быстро проверять: есть ли в ней какой-то элемент. Массив для этого не подходит из-за медленного <code>indexOf</code>. Но подходит объект! Доступ к свойству объекта осуществляется очень быстро, так что можно сделать все элементы ключами объекта и проверять, есть ли уже такой ключ.</p>
<p>Например, организуем такую проверку для коллекции строк <code>&quot;div&quot;</code>, <code>&quot;a&quot;</code> и <code>&quot;form&quot;</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var store = {}; // объект для коллекции

var items = [&quot;div&quot;, &quot;a&quot;, &quot;form&quot;];

for (var i = 0; i &lt; items.length; i++) {
  var key = items[i]; // для каждого элемента создаём свойство
  store[key] = true; // значение здесь не важно
}</code></pre>
        </div>
      </div>
      
      </div><p>Теперь для проверки, есть ли ключ <code>key</code>, достаточно выполнить <code>if (store[key])</code>. Если есть – можно использовать значение, если нет – добавить.</p>
<p>Такое решение работает только со строками, но применимо к любым элементам, для которых можно вычислить строковый  «уникальный ключ».</p>
</div></div>
<h2><a class="main__anchor" name="object-keys-obj" href="#object-keys-obj">Object.keys(obj)</a></h2><p>Ранее мы говорили о том, что свойства объекта можно перебрать в цикле <code>for..in</code>.</p>
<p>Если мы хотим работать с ними в виде массива, то к нашим услугам – замечательный метод <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/keys">Object.keys(obj)</a>. Он поддерживается везде, кроме IE8-:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var user = {
  name: &quot;Петя&quot;,
  age: 30
}

var keys = Object.keys(user);

alert( keys ); // name, age</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><p>Методы массивов:</p>
<ul>
<li><code>push/pop</code>, <code>shift/unshift</code>, <code>splice</code> – для добавления и удаления элементов.</li>
<li><code>join/split</code> – для преобразования строки в массив и обратно.</li>
<li><code>slice</code> – копирует участок массива.</li>
<li><code>sort</code> – для сортировки массива. Если не передать функцию сравнения – сортирует элементы как строки.</li>
<li><code>reverse</code> – меняет порядок элементов на обратный.</li>
<li><code>concat</code> – объединяет массивы.</li>
<li><code>indexOf/lastIndexOf</code> – возвращают позицию элемента в массиве (не поддерживается в IE8-).</li>
</ul>
<p>Дополнительно:</p>
<ul>
<li><code>Object.keys(obj)</code> возвращает массив свойств объекта.</li>
</ul>
<p>Изученных нами методов достаточно в 95% случаях, но существуют и другие. Для знакомства с ними рекомендуется заглянуть в справочник <a href="http://javascript.ru/Array">Array</a> и <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array">Array в Mozilla Developer Network</a>.</p>
</div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#добавить-класс-в-строку" name="добавить-класс-в-строку" class="main__anchor">Добавить класс в строку</a></h3><a href="task/add-class.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>В объекте есть свойство <code>className</code>, которое содержит список «классов» – слов, разделенных пробелом:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var obj = {
  className: 'open menu'
}</code></pre>
        </div>
      </div>
      
      </div><p>Создайте функцию <code>addClass(obj, cls)</code>, которая добавляет в список класс <code>cls</code>, но только если его там еще нет:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">addClass(obj, 'new'); // obj.className='open menu new'
addClass(obj, 'open'); // без изменений (класс уже существует)
addClass(obj, 'me'); // obj.className='open menu new me'

alert( obj.className ); // &quot;open menu new me&quot;</code></pre>
        </div>
      </div>
      
      </div><p>P.S. Ваша функция не должна добавлять лишних пробелов.</p>
<p><a href="http://plnkr.co/edit/uZfegfepTVaKi2836ORL?p=preview" target="_blank" data-plunk-id="uZfegfepTVaKi2836ORL">Открыть песочницу с тестами для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Решение заключается в превращении <code>obj.className</code> в массив при помощи <code>split</code>.
После этого в нем можно проверить наличие класса, и если нет – добавить.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function addClass(obj, cls) {
  var classes = obj.className ? obj.className.split(' ') : [];

  for (var i = 0; i &lt; classes.length; i++) {
    if (classes[i] == cls) return; // класс уже есть
  }

  classes.push(cls); // добавить

  obj.className = classes.join(' '); // и обновить свойство
}

var obj = {
  className: 'open menu'
};

addClass(obj, 'new');
addClass(obj, 'open');
addClass(obj, 'me');
alert(obj.className) // open menu new me</code></pre>
        </div>
      </div>
      
      </div><p>P.S. «Альтернативный» подход к проверке наличия класса вызовом <code>obj.className.indexOf(cls)</code> был бы неверным. В частности, он найдёт <code>cls = &quot;menu&quot;</code> в строке классов <code>obj.className = &quot;open mymenu&quot;</code>.</p>
<p>P.P.S. Проверьте, нет ли в вашем решении присвоения <code>obj.className += &quot; &quot; + cls</code>. Не добавляет ли оно лишний пробел в случае, если изначально <code>obj.className = &quot;&quot;</code>?</p>
<p><a href="http://plnkr.co/edit/Ole81ZiLMSaGRGbwUtfo?p=preview" target="_blank" data-plunk-id="Ole81ZiLMSaGRGbwUtfo">Открыть решение с тестами в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#перевести-текст-вида-border-left-width-в-borderleftwidth" name="перевести-текст-вида-border-left-width-в-borderleftwidth" class="main__anchor">Перевести текст вида border-left-width в borderLeftWidth</a></h3><a href="task/camelcase.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 3</span></div><div class="task__content"><p>Напишите функцию <code>camelize(str)</code>, которая преобразует строки вида «my-short-string» в «myShortString».</p>
<p>То есть, дефисы удаляются, а все слова после них получают заглавную букву.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">camelize(&quot;background-color&quot;) == 'backgroundColor';
camelize(&quot;list-style-image&quot;) == 'listStyleImage';
camelize(&quot;-webkit-transition&quot;) == 'WebkitTransition';</code></pre>
        </div>
      </div>
      
      </div><p>Такая функция полезна при работе с CSS.</p>
<p>P.S. Вам пригодятся методы строк <code>charAt</code>, <code>split</code> и <code>toUpperCase</code>.</p>
<p><a href="http://plnkr.co/edit/F07td8jtAb35ExFrc0vM?p=preview" target="_blank" data-plunk-id="F07td8jtAb35ExFrc0vM">Открыть песочницу с тестами для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__step"><button type="button" class="task__step-show">Идея</button><div class="task__answer-content"><h4 class="task__step-title">Идея</h4><p>Задача может быть решена несколькими способами. Один из них – разбить строку по дефису <code>str.split('-')</code>, затем последовательно сконструировать новую.</p>
</div></div><div class="task__step"><button type="button" class="task__step-show">Решение</button><div class="task__answer-content"><h4 class="task__step-title">Решение</h4><p>Разобьем строку в массив, а затем преобразуем его элементы и сольём обратно:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function camelize(str) {
  var arr = str.split('-');

  for (var i = 1; i &lt; arr.length; i++) {
    // преобразовать: первый символ с большой буквы
    arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);
  }

  return arr.join('');
}

alert( camelize(&quot;background-color&quot;) ); // backgroundColor
alert( camelize(&quot;list-style-image&quot;) ); // listStyleImage
alert( camelize(&quot;-webkit-transition&quot;) ); // WebkitTransition</code></pre>
        </div>
      </div>
      
      </div><p><a href="http://plnkr.co/edit/WJbKs361mp4bpfQ6ZbQy?p=preview" target="_blank" data-plunk-id="WJbKs361mp4bpfQ6ZbQy">Открыть решение с тестами в песочнице.</a></p></div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#функция-removeclass" name="функция-removeclass" class="main__anchor">Функция removeClass</a></h3><a href="task/remove-class.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>У объекта есть свойство <code>className</code>, которое хранит список «классов» – слов, разделенных пробелами:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var obj = {
  className: 'open menu'
};</code></pre>
        </div>
      </div>
      
      </div><p>Напишите функцию <code>removeClass(obj, cls)</code>, которая удаляет класс <code>cls</code>, если он есть:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">removeClass(obj, 'open'); // obj.className='menu'
removeClass(obj, 'blabla'); // без изменений (нет такого класса)</code></pre>
        </div>
      </div>
      
      </div><p>P.S. Дополнительное усложнение. Функция должна корректно обрабатывать дублирование класса в строке:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">obj = {
  className: 'my menu menu'
};
removeClass(obj, 'menu');
alert( obj.className ); // 'my'</code></pre>
        </div>
      </div>
      
      </div><p>Лишних пробелов после функции образовываться не должно.</p>
<p><a href="http://plnkr.co/edit/t8IrFKntrcx6IzdmbZuE?p=preview" target="_blank" data-plunk-id="t8IrFKntrcx6IzdmbZuE">Открыть песочницу с тестами для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Решение заключается в том, чтобы разбить <code>className</code> в массив классов, а затем пройтись по нему циклом. Если класс есть – удаляем его <code>splice</code>, заново объединяем массив в строку и присваиваем объекту.</p>
<div data-trusted="1" class="code-example" data-highlight-block="6-6">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function removeClass(obj, cls) {
  var classes = obj.className.split(' ');

  for (var i = 0; i &lt; classes.length; i++) {
    if (classes[i] == cls) {
      classes.splice(i, 1); // удалить класс
      i--; // (*)
    }
  }
  obj.className = classes.join(' ');

}

var obj = {
  className: 'open menu menu'
}

removeClass(obj, 'blabla');
removeClass(obj, 'menu')
alert(obj.className) // open</code></pre>
        </div>
      </div>
      
      </div><p>В примере выше есть тонкий момент. Элементы массива проверяются один за другим. При вызове <code>splice</code> удаляется текущий, <code>i-й</code> элемент, и те элементы, которые идут дальше, сдвигаются на его место.</p>
<p>Таким образом, <strong>на месте <code>i</code> оказывается новый, непроверенный элемент</strong>.</p>
<p>Чтобы это учесть, строчка <code>(*)</code> уменьшает <code>i</code>, чтобы следующая итерация цикла заново проверила  элемент с номером <code>i</code>. Без нее функция будет работать с ошибками.</p>
<p><a href="http://plnkr.co/edit/jYEzRteqAia6MfPfe4hJ?p=preview" target="_blank" data-plunk-id="jYEzRteqAia6MfPfe4hJ">Открыть решение с тестами в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#фильтрация-массива-на-месте" name="фильтрация-массива-на-месте" class="main__anchor">Фильтрация массива &quot;на месте&quot;</a></h3><a href="task/filter-in-place.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 4</span></div><div class="task__content"><p>Создайте функцию <code>filterRangeInPlace(arr, a, b)</code>, которая получает массив с числами <code>arr</code> и удаляет из него все числа вне диапазона <code>a..b</code>.
То есть, проверка имеет вид <code>a ≤ arr[i] ≤ b</code>. Функция должна менять сам массив и ничего не возвращать.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">arr = [5, 3, 8, 1];

filterRangeInPlace(arr, 1, 4); // удалены числа вне диапазона 1..4

alert( arr ); // массив изменился: остались [3, 1]</code></pre>
        </div>
      </div>
      
      </div><p><a href="http://plnkr.co/edit/yYf5PLH48NAWDDq82yQe?p=preview" target="_blank" data-plunk-id="yYf5PLH48NAWDDq82yQe">Открыть песочницу с тестами для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function filterRangeInPlace(arr, a, b) {

  for (var i = 0; i &lt; arr.length; i++) {
    var val = arr[i];
    if (val &lt; a || val &gt; b) {
      arr.splice(i--, 1);
    }
  }

}

var arr = [5, 3, 8, 1];

filterRangeInPlace(arr, 1, 4);
alert( arr ); // [3, 1]</code></pre>
        </div>
      </div>
      
      </div><p><a href="http://plnkr.co/edit/2XeK0HsPJQyYQsjq9Qig?p=preview" target="_blank" data-plunk-id="2XeK0HsPJQyYQsjq9Qig">Открыть решение с тестами в песочнице.</a></p></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#сортировать-в-обратном-порядке" name="сортировать-в-обратном-порядке" class="main__anchor">Сортировать в обратном порядке</a></h3><a href="task/sort-back.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Как отсортировать массив чисел в обратном порядке?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [5, 2, 1, -10, 8];

// отсортируйте?

alert( arr ); // 8, 5, 2, 1, -10</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [5, 2, 1, -10, 8];

function compareReversed(a, b) {
  return b - a;
}

arr.sort(compareReversed);

alert( arr );</code></pre>
        </div>
      </div>
      
      </div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#скопировать-и-отсортировать-массив" name="скопировать-и-отсортировать-массив" class="main__anchor">Скопировать и отсортировать массив</a></h3><a href="task/copy-sort-array.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Есть массив строк <code>arr</code>. Создайте массив <code>arrSorted</code> – из тех же элементов, но отсортированный.</p>
<p>Исходный массив не должен меняться.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [&quot;HTML&quot;, &quot;JavaScript&quot;, &quot;CSS&quot;];

// ... ваш код ...

alert( arrSorted ); // CSS, HTML, JavaScript
alert( arr ); // HTML, JavaScript, CSS (без изменений)</code></pre>
        </div>
      </div>
      
      </div><p>Постарайтесь сделать код как можно короче.</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Для копирования массива используем <code>slice()</code>, и тут же – сортировку:</p>
<div data-trusted="1" class="code-example" data-highlight-block="2-2">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [&quot;HTML&quot;, &quot;JavaScript&quot;, &quot;CSS&quot;];

var arrSorted = arr.slice().sort();

alert( arrSorted );
alert( arr );</code></pre>
        </div>
      </div>
      
      </div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#случайный-порядок-в-массиве" name="случайный-порядок-в-массиве" class="main__anchor">Случайный порядок в массиве</a></h3><a href="task/shuffle-array.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 3</span></div><div class="task__content"><p>Используйте функцию <code>sort</code> для того, чтобы «перетрясти» элементы массива в случайном порядке.</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [1, 2, 3, 4, 5];

arr.sort(ваша функция);

alert( arr ); // элементы в случайном порядке, например [3,5,1,2,4]</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__step"><button type="button" class="task__step-show">Подсказка</button><div class="task__answer-content"><h4 class="task__step-title">Подсказка</h4><p>Функция сортировки должна возвращать случайный результат сравнения. Используйте для этого <a href="http://javascript.ru/Math.random">Math.random</a>.</p>
</div></div><div class="task__step"><button type="button" class="task__step-show">Решение</button><div class="task__answer-content"><h4 class="task__step-title">Решение</h4><p>Обычно <code>Math.random()</code> возвращает результат от <code>0</code> до <code>1</code>. Вычтем <code>0.5</code>, чтобы область значений стала <code>[-0.5 ... 0.5)</code>.</p>
<div data-trusted="1" class="code-example" data-highlight-block="2-6">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [1, 2, 3, 4, 5];

function compareRandom(a, b) {
  return Math.random() - 0.5;
}

arr.sort(compareRandom);

alert( arr ); // элементы в случайном порядке, например [3,5,1,2,4]</code></pre>
        </div>
      </div>
      
      </div></div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#сортировка-объектов" name="сортировка-объектов" class="main__anchor">Сортировка объектов</a></h3><a href="task/sort-objects.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Напишите код, который отсортирует массив объектов <code>people</code> по полю <code>age</code>.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var vasya = { name: &quot;Вася&quot;, age: 23 };
var masha = { name: &quot;Маша&quot;, age: 18 };
var vovochka = { name: &quot;Вовочка&quot;, age: 6 };

var people = [ vasya , masha , vovochka ];

... ваш код ...

// теперь people: [vovochka, masha, vasya]
alert(people[0].age) // 6</code></pre>
        </div>
      </div>
      
      </div><p>Выведите список имён в массиве после сортировки.</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Для сортировки объявим и передадим в <code>sort</code> функцию, которая сравнивает объекты по полю <code>age</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="0-3">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// Наша функция сравнения
function compareAge(personA, personB) {
  return personA.age - personB.age;
}

// проверка
var vasya = { name: &quot;Вася&quot;, age: 23 };
var masha = { name: &quot;Маша&quot;, age: 18 };
var vovochka = { name: &quot;Вовочка&quot;, age: 6 };

var people = [ vasya , masha , vovochka ];

people.sort(compareAge);

// вывести
for(var i = 0; i &lt; people.length; i++) {
  alert(people[i].name); // Вовочка Маша Вася
}</code></pre>
        </div>
      </div>
      
      </div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#вывести-односвязный-список" name="вывести-односвязный-список" class="main__anchor">Вывести односвязный список</a></h3><a href="task/output-single-linked-list/default.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p><a href="http://ru.wikipedia.org/wiki/%D0%A1%D0%B2%D1%8F%D0%B7%D0%BD%D1%8B%D0%B9_%D1%81%D0%BF%D0%B8%D1%81%D0%BE%D0%BA">Односвязный список</a> – это структура данных, которая состоит из <em>элементов</em>, каждый из которых хранит ссылку на следующий. Последний элемент может не иметь ссылки, либо она равна <code>null</code>.</p>
<p>Например, объект ниже задаёт односвязный список, в <code>next</code> хранится ссылка на следующий элемент:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var list = {
  value: 1,
  next: {
    value: 2,
    next: {
      value: 3,
      next: {
        value: 4,
        next: null
      }
    }
  }
};</code></pre>
        </div>
      </div>
      
      </div><p>Графическое представление этого списка:
<img src="task/output-single-linked-list/linked-list.png" alt="" width="615" height="77"></p>
<p>Альтернативный способ создания:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var list = { value: 1 };
list.next = { value: 2 };
list.next.next = { value: 3 };
list.next.next.next = { value: 4 };</code></pre>
        </div>
      </div>
      
      </div><p>Такая структура данных интересна тем, что можно очень быстро разбить список на части, объединить списки, удалить или добавить элемент в любое место, включая начало. При использовании массива такие действия требуют обширных перенумерований.</p>
<p>Задачи:</p>
<ol>
<li>Напишите функцию <code>printList(list)</code>, которая выводит элементы списка по очереди, при помощи цикла.</li>
<li>Напишите функцию <code>printList(list)</code> при помощи рекурсии.</li>
<li>Напишите функцию <code>printReverseList(list)</code>, которая выводит элементы списка в обратном порядке, при помощи рекурсии.
Для списка выше она должна выводить <code>4</code>,<code>3</code>,<code>2</code>,<code>1</code></li>
<li>Сделайте вариант <code>printReverseList(list)</code>, использующий не рекурсию, а цикл.</li>
</ol>
<p>Как лучше – с рекурсией или без?</p>
<button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__step"><button type="button" class="task__step-show">Вывод списка в цикле</button><div class="task__answer-content"><h4 class="task__step-title">Вывод списка в цикле</h4><div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var list = {
  value: 1,
  next: {
    value: 2,
    next: {
      value: 3,
      next: {
        value: 4,
        next: null
      }
    }
  }
};

function printList(list) {
  var tmp = list;

  while (tmp) {
    alert( tmp.value );
    tmp = tmp.next;
  }

}

printList(list);</code></pre>
        </div>
      </div>
      
      </div><p>Обратите внимание, что для прохода по списку используется временная переменная <code>tmp</code>, а не <code>list</code>. Можно было бы и бегать по списку, используя входной параметр функции:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="2:8-12">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function printList(list) {

  while(list) {
    alert( list.value );
    list = list.next;
  }

}</code></pre>
        </div>
      </div>
      
      </div><p>…Но при этом мы в будущем не сможем расширить функцию и сделать со списком что-то ещё, ведь после окончания цикла начало списка уже нигде не хранится.</p>
<p>Поэтому и используется временная переменная – чтобы сделать код расширяемым, и, кстати, более понятным, ведь роль <code>tmp</code> – исключительно обход списка, как <code>i</code> в цикле <code>for</code>.</p>
</div></div><div class="task__step"><button type="button" class="task__step-show">Вывод списка с рекурсией</button><div class="task__answer-content"><h4 class="task__step-title">Вывод списка с рекурсией</h4><p>Рекурсивный вариант <code>printList(list)</code> следует простой логике: вывести текущее значение <code>(1)</code>, а затем пропустить через себя следующее  <code>(2)</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var list = {
  value: 1,
  next: {
    value: 2,
    next: {
      value: 3,
      next: {
        value: 4,
        next: null
      }
    }
  }
};

function printList(list) {

  alert( list.value ); // (1)

  if (list.next) {
    printList(list.next); // (2)
  }

}

printList(list);</code></pre>
        </div>
      </div>
      
      </div></div></div><div class="task__step"><button type="button" class="task__step-show">Обратный вывод с рекурсией</button><div class="task__answer-content"><h4 class="task__step-title">Обратный вывод с рекурсией</h4><p>Обратный вывод – почти то же самое, что прямой, просто сначала мы обрабатываем следующее значение, а потом – текущее:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var list = {
  value: 1,
  next: {
    value: 2,
    next: {
      value: 3,
      next: {
        value: 4,
        next: null
      }
    }
  }
};

function printReverseList(list) {

  if (list.next) {
    printReverseList(list.next);
  }

  alert( list.value );
}

printReverseList(list);</code></pre>
        </div>
      </div>
      
      </div></div></div><div class="task__step"><button type="button" class="task__step-show">Обратный вывод без рекурсии</button><div class="task__answer-content"><h4 class="task__step-title">Обратный вывод без рекурсии</h4><div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var list = {
  value: 1,
  next: {
    value: 2,
    next: {
      value: 3,
      next: {
        value: 4,
        next: null
      }
    }
  }
};

function printReverseList(list) {
  var arr = [];
  var tmp = list;

  while (tmp) {
    arr.push(tmp.value);
    tmp = tmp.next;
  }

  for (var i = arr.length - 1; i &gt;= 0; i--) {
    alert( arr[i] );
  }
}

printReverseList(list);</code></pre>
        </div>
      </div>
      
      </div><p><strong>Обратный вывод без рекурсии быстрее.</strong></p>
<p>По сути, рекурсивный вариант и нерекурсивный работают одинаково: они проходят список и запоминают его элементы, а потом выводят в обратном порядке.</p>
<p>В случае с массивом это очевидно, а для рекурсии запоминание происходит в стеке (внутренней специальной структуре данных): когда вызывается вложенная функция, то интерпретатор сохраняет в стек текущие параметры. Вложенные вызовы заполняют стек, а потом он выводится в обратном порядке.</p>
<p>При этом, при рекурсии в стеке сохраняется не только элемент списка, а другая вспомогательная информация, необходимая для возвращения из вложенного вызова. Поэтому тратится больше памяти. Все эти расходы отсутствуют в варианте без рекурсии, так как в массиве хранится именно то, что нужно.</p>
<p>Преимущество рекурсии, с другой стороны – более короткий и, зачастую, более простой код.</p>
</div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#отфильтровать-анаграммы" name="отфильтровать-анаграммы" class="main__anchor">Отфильтровать анаграммы</a></h3><a href="task/filter-anagrams.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 3</span></div><div class="task__content"><p><em>Анаграммы</em> – слова, состоящие из одинакового количества одинаковых букв, но в разном порядке.
Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-none"><code class="language-none">воз - зов
киборг - гробик
корсет - костер - сектор</code></pre>
        </div>
      </div>
      
      </div><p>Напишите функцию <code>aclean(arr)</code>, которая возвращает массив слов, очищенный от анаграмм.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var arr = [&quot;воз&quot;, &quot;киборг&quot;, &quot;корсет&quot;, &quot;ЗОВ&quot;, &quot;гробик&quot;, &quot;костер&quot;, &quot;сектор&quot;];

alert( aclean(arr) ); // &quot;воз,киборг,корсет&quot; или &quot;ЗОВ,гробик,сектор&quot;</code></pre>
        </div>
      </div>
      
      </div><p>Из каждой группы анаграмм должно остаться только одно слово, не важно какое.</p>
<p><a href="http://plnkr.co/edit/FMAFGPrWX5WN0oIJZyl7?p=preview" target="_blank" data-plunk-id="FMAFGPrWX5WN0oIJZyl7">Открыть песочницу с тестами для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__step"><button type="button" class="task__step-show">Решение</button><div class="task__answer-content"><h4 class="task__step-title">Решение</h4><p>Чтобы обнаружить анаграммы, разобьём каждое слово на буквы и отсортируем их. В отсортированном по буквам виде все анаграммы одинаковы.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-none"><code class="language-none">воз, зов -&gt; взо
киборг, гробик -&gt; бгикор
...</code></pre>
        </div>
      </div>
      
      </div><p>По такой последовательности будем делать массив уникальным.</p>
<p>Для этого воспользуемся вспомогательным объектом, в который будем записывать слова по отсортированному ключу:</p>
<div data-trusted="1" class="code-example" data-highlight-block="6-6">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function aclean(arr) {
  // этот объект будем использовать для уникальности
  var obj = {};

  for (var i = 0; i &lt; arr.length; i++) {
    // разбить строку на буквы, отсортировать и слить обратно
    var sorted = arr[i].toLowerCase().split('').sort().join(''); // (*)

    obj[sorted] = arr[i]; // сохраняет только одно значение с таким ключом
  }

  var result = [];

  // теперь в obj находится для каждого ключа ровно одно значение
  for (var key in obj) result.push(obj[key]);

  return result;
}

var arr = [&quot;воз&quot;, &quot;киборг&quot;, &quot;корсет&quot;, &quot;ЗОВ&quot;, &quot;гробик&quot;, &quot;костер&quot;, &quot;сектор&quot;];

alert( aclean(arr) );</code></pre>
        </div>
      </div>
      
      </div><p>Приведение слова к  сортированному по буквам виду осуществляется цепочкой вызовов в строке <code>(*)</code>.</p>
<p>Для удобства комментирования разобьём её на несколько строк (JavaScript это позволяет):</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var sorted = arr[i] // ЗОВ
  .toLowerCase() // зов
  .split('') // ['з','о','в']
  .sort() // ['в','з','о']
  .join(''); // взо</code></pre>
        </div>
      </div>
      
      </div><p>Получится, что два разных слова <code>'ЗОВ'</code> и <code>'воз'</code> получат одинаковую отсортированную форму <code>'взо'</code>.</p>
<p>Следующая строка:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">obj[sorted] = arr[i];</code></pre>
        </div>
      </div>
      
      </div><p>В объект <code>obj</code> будет записано сначала первое из слов <code>obj['взо'] = &quot;воз&quot;</code>, а затем <code>obj['взо'] = 'ЗОВ'</code>.</p>
<p>Обратите внимание, ключ – отсортирован, а само слово – в исходной форме, чтобы можно было потом получить его из объекта.</p>
<p>Вторая запись по тому же ключу перезапишет первую, то есть в объекте останется ровно одно слово с таким набором букв.</p>
<p><a href="http://plnkr.co/edit/1slzIyRRX68GCfZVcTvB?p=preview" target="_blank" data-plunk-id="1slzIyRRX68GCfZVcTvB">Открыть решение с тестами в песочнице.</a></p></div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#оставить-уникальные-элементы-массива" name="оставить-уникальные-элементы-массива" class="main__anchor">Оставить уникальные элементы массива</a></h3><a href="task/array-unique.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 3</span></div><div class="task__content"><p>Пусть <code>arr</code> – массив строк.</p>
<p>Напишите функцию <code>unique(arr)</code>, которая возвращает массив, содержащий только уникальные элементы <code>arr</code>.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function unique(arr) {
  /* ваш код */
}

var strings = [&quot;кришна&quot;, &quot;кришна&quot;, &quot;харе&quot;, &quot;харе&quot;,
  &quot;харе&quot;, &quot;харе&quot;, &quot;кришна&quot;, &quot;кришна&quot;, &quot;8-()&quot;
];

alert( unique(strings) ); // кришна, харе, 8-()</code></pre>
        </div>
      </div>
      
      </div><p><a href="http://plnkr.co/edit/QMnlU1GSUul4II7xJy6X?p=preview" target="_blank" data-plunk-id="QMnlU1GSUul4II7xJy6X">Открыть песочницу с тестами для задачи.</a></p><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__step"><button type="button" class="task__step-show">Решение перебором (медленное)</button><div class="task__answer-content"><h4 class="task__step-title">Решение перебором (медленное)</h4><p>Пройдём по массиву вложенным циклом.</p>
<p>Для каждого элемента мы будем искать, был ли такой уже. Если был – игнорировать:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function unique(arr) {
  var result = [];

  nextInput:
    for (var i = 0; i &lt; arr.length; i++) {
      var str = arr[i]; // для каждого элемента
      for (var j = 0; j &lt; result.length; j++) { // ищем, был ли он уже?
        if (result[j] == str) continue nextInput; // если да, то следующий
      }
      result.push(str);
    }

  return result;
}

var strings = [&quot;кришна&quot;, &quot;кришна&quot;, &quot;харе&quot;, &quot;харе&quot;,
  &quot;харе&quot;, &quot;харе&quot;, &quot;кришна&quot;, &quot;кришна&quot;, &quot;8-()&quot;
];

alert( unique(strings) ); // кришна, харе, 8-()</code></pre>
        </div>
      </div>
      
      </div><p>Давайте посмотрим, насколько быстро он будет работать.</p>
<p>Предположим, в массиве <code>100</code> элементов. Если все они одинаковые, то <code>result</code> будет состоять из одного элемента и вложенный цикл будет выполняться сразу. В этом случае всё хорошо.</p>
<p>А если все, или почти все элементы разные?</p>
<p>В этом случае для каждого элемента понадобится обойти весь текущий массив результатов, после чего – добавить в этот массив.</p>
<ol>
<li>Для первого элемента – это обойдётся в <code>0</code> операций доступа к элементам <code>result</code> (он пока пустой).</li>
<li>Для второго элемента – это обойдётся в <code>1</code> операцию доступа к элементам <code>result</code>.</li>
<li>Для третьего элемента – это обойдётся в <code>2</code> операции доступа к элементам <code>result</code>.</li>
<li>…Для n-го элемента – это обойдётся в <code>n-1</code> операций доступа к элементам <code>result</code>.</li>
</ol>
<p>Всего <code>0 + 1 + 2 + … + n-1 = (n-1)*n/2 = n<sup>2</sup>/2 – n/2</code> (как сумма арифметической прогрессии), то есть количество операций растёт примерно как квадрат от <code>n</code>.</p>
<p>Это очень быстрый рост. Для <code>100</code> элементов – <code>4950</code> операций, для <code>1000</code> – <code>499500</code> (по формуле выше).</p>
<p>Поэтому такое решение подойдёт только для небольших массивов. Вместо вложенного <code>for</code> можно использовать и <code>arr.indexOf</code>, ситуация от этого не поменяется, так как <code>indexOf</code> тоже ищет перебором.</p>
</div></div><div class="task__step"><button type="button" class="task__step-show">Решение с объектом (быстрое)</button><div class="task__answer-content"><h4 class="task__step-title">Решение с объектом (быстрое)</h4><p>Наилучшая техника для выбора уникальных строк – использование вспомогательного объекта <code>obj</code>. Ведь название свойства в объекте, с одной стороны – строка, а с другой – всегда уникально. Повторная запись в свойство с тем же именем перезапишет его.</p>
<p>Например, если <code>&quot;харе&quot;</code> попало в объект один раз (<code>obj[&quot;харе&quot;] = true</code>), то второе такое же присваивание ничего не изменит.</p>
<p>Решение ниже создаёт объект <code>obj = {}</code> и записывает в него все строки как имена свойств. А затем собирает свойства из объекта в массив через <code>Object.keys()</code>. Дубликатов уже не будет.</p>
<div data-trusted="1" class="code-example" data-highlight-block="5-5">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function unique(arr) {
  var obj = {};

  for (var i = 0; i &lt; arr.length; i++) {
    var str = arr[i];
    obj[str] = true; // запомнить строку в виде свойства объекта
  }

  return Object.keys(obj); // или собрать ключи перебором для IE8-
}

var strings = [&quot;кришна&quot;, &quot;кришна&quot;, &quot;харе&quot;, &quot;харе&quot;,
  &quot;харе&quot;, &quot;харе&quot;, &quot;кришна&quot;, &quot;кришна&quot;, &quot;8-()&quot;
];

alert( unique(strings) ); // кришна, харе, 8-()</code></pre>
        </div>
      </div>
      
      </div><p>Так что можно положить все значения как ключи в объект, а потом достать.</p>
<p><a href="http://plnkr.co/edit/yOFZHiNq7kjWVQN8wsnv?p=preview" target="_blank" data-plunk-id="yOFZHiNq7kjWVQN8wsnv">Открыть решение с тестами в песочнице.</a></p></div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>