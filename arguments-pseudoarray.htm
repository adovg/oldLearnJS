<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="js.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Язык JavaScript</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="data-structures.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Структуры данных</span></a></li></ol><h1 class="main__header-title">Псевдомассив аргументов &quot;arguments&quot;</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Псевдомассив аргументов &quot;arguments&quot;"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>В JavaScript любая функция может быть вызвана с произвольным количеством аргументов.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function go(a,b) {
  alert(&quot;a=&quot;+a+&quot;, b=&quot;+b);
}

go(1);     // a=1, b=undefined
go(1,2);   // a=1, b=2
go(1,2,3); // a=1, b=2, третий аргумент не вызовет ошибку</code></pre>
        </div>
      </div>
      
      </div><div class="important important_smart">
            <div class="important__header"><span class="important__type">В JavaScript нет «перегрузки» функций</span></div>
            <div class="important__content"><p>В некоторых языках программист может создать две функции с одинаковым именем, но разным набором аргументов, а при вызове интерпретатор сам выберет нужную:</p>
<div data-trusted="1" class="code-example" data-highlight-block="8-9">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function log(a) {
  ...
}

function log(a, b, c) {
  ...
}

log(a); // вызовется первая функция
log(a, b, c); // вызовется вторая функция</code></pre>
        </div>
      </div>
      
      </div><p>Это называется «полиморфизмом функций» или «перегрузкой функций». В JavaScript ничего подобного нет.</p>
<p><strong>Может быть только одна функция с именем <code>log</code>, которая вызывается с любыми аргументами.</strong></p>
<p>А уже внутри она может посмотреть, с чем вызвана и по-разному отработать.</p>
<p>В примере выше второе объявление <code>log</code> просто переопределит первое.</p>
</div></div>
<h2><a class="main__anchor" name="доступ-к-лишним-аргументам" href="#доступ-к-лишним-аргументам">Доступ к «лишним» аргументам</a></h2><p>Как получить значения аргументов, которых нет в списке параметров?</p>
<p>Доступ к ним осуществляется через «псевдо-массив» <a href="https://developer.mozilla.org/en/JavaScript/Reference/functions_and_function_scope/arguments">arguments</a>.</p>
<p>Он содержит список аргументов по номерам: <code>arguments[0]</code>, <code>arguments[1]</code>…, а также свойство <code>length</code>.</p>
<p>Например, выведем список всех аргументов:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function sayHi() {
  for (var i = 0; i &lt; arguments.length; i++) {
    alert( &quot;Привет, &quot; + arguments[i] );
  }
}

sayHi(&quot;Винни&quot;, &quot;Пятачок&quot;); // 'Привет, Винни', 'Привет, Пятачок'</code></pre>
        </div>
      </div>
      
      </div><p>Все параметры находятся в <code>arguments</code>, даже если они есть в списке. Код выше сработал бы также, будь функция объявлена <code>sayHi(a,b,c)</code>.</p>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">Связь между <code>arguments</code> и параметрами</span></div>
            <div class="important__content"><p><strong>В старом стандарте JavaScript псевдо-массив <code>arguments</code> и переменные-параметры ссылаются на одни и те же значения.</strong></p>
<p>В результате изменения <code>arguments</code> влияют на параметры и наоборот.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f(x) {
  arguments[0] = 5; // меняет переменную x
  alert( x ); // 5
}

f(1);</code></pre>
        </div>
      </div>
      
      </div><p>Наоборот:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f(x) {
  x = 5;
  alert( arguments[0] ); // 5, обновленный x
}

f(1);</code></pre>
        </div>
      </div>
      
      </div><p>В современной редакции стандарта это поведение изменено. Аргументы отделены от локальных переменных:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f(x) {
  &quot;use strict&quot;; // для браузеров с поддержкой строгого режима

  arguments[0] = 5;
  alert( x ); // не 5, а 1! Переменная &quot;отвязана&quot; от arguments
}

f(1);</code></pre>
        </div>
      </div>
      
      </div><p><strong>Если вы не используете строгий режим, то чтобы переменные не менялись «неожиданно», рекомендуется никогда не изменять <code>arguments</code>.</strong></p>
</div></div>
<h3><a class="main__anchor" name="arguments-это-не-массив" href="#arguments-это-не-массив">arguments – это не массив</a></h3><p>Частая ошибка новичков – попытка применить методы <code>Array</code> к <code>arguments</code>. Это невозможно:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function sayHi() {
  var a = arguments.shift(); // ошибка! нет такого метода!
}

sayHi(1);</code></pre>
        </div>
      </div>
      
      </div><p>Дело в том, что <code>arguments</code> – это не массив <code>Array</code>.</p>
<p>В действительности, это обычный объект, просто ключи числовые и есть <code>length</code>. На этом сходство заканчивается. Никаких особых методов у него нет, и методы массивов он тоже не поддерживает.</p>
<p>Впрочем, никто не мешает сделать обычный массив из <code>arguments</code>, например так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var args = [];
for (var i = 0; i &lt; arguments.length; i++) {
  args[i] = arguments[i];
}</code></pre>
        </div>
      </div>
      
      </div><p>Такие объекты иногда называют <em>«коллекциями»</em> или <em>«псевдомассивами»</em>.</p>
<h2><a class="main__anchor" name="copy" href="#copy">Пример: копирование свойств copy(dst, src1, src2...)</a></h2><p>Иногда встаёт задача – скопировать в существующий объект свойства из одного или нескольких других.</p>
<p>Напишем для этого функцию <code>copy</code>. Она будет работать с любым числом аргументов, благодаря использованию <code>arguments</code>.</p>
<p>Синтаксис:</p>
<dl>
<dt>copy(dst, src1, src2…)</dt>
<dd>Копирует свойства из объектов <code>src1, src2,...</code> в объект <code>dst</code>. Возвращает получившийся объект.</dd>
</dl>
<p>Использование:</p>
<ul>
<li>
<p>Для объединения нескольких объектов в один:</p>
<div data-trusted="1" class="code-example" data-highlight-block="16-16">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var vasya = {
  age: 21,
  name: 'Вася',
  surname: 'Петров'
};

var user = {
  isAdmin: false,
  isEmailConfirmed: true
};

var student = {
  university: 'My university'
};

// добавить к vasya свойства из user и student
copy(vasya, user, student);

alert( vasya.isAdmin ); // false
alert( vasya.university ); // My university</code></pre>
        </div>
      </div>
      
      </div></li>
<li>
<p>Для создания копии объекта <code>user</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// скопирует все свойства в пустой объект
var userClone = copy({}, user);</code></pre>
        </div>
      </div>
      
      </div><p>Такой «клон» объекта может пригодиться там, где мы хотим изменять его свойства, при этом не трогая исходный объект <code>user</code>.</p>
<p>В нашей реализации мы будем копировать только свойства первого уровня, то есть вложенные объекты как-то особым образом не обрабатываются. Впрочем, её можно расширить.</p>
</li>
</ul>
<p>А вот и реализация:</p>
<div data-trusted="1" class="code-example" data-autorun="true">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function copy() {
  var dst = arguments[0];

  for (var i = 1; i &lt; arguments.length; i++) {
    var arg = arguments[i];
    for (var key in arg) {
      dst[key] = arg[key];
    }
  }

  return dst;
}</code></pre>
        </div>
      </div>
      
      </div><p>Здесь первый аргумент <code>copy</code> – это объект, в который нужно копировать, он назван <code>dst</code>. Для упрощения доступа к нему можно указать его прямо в объявлении функции:</p>
<div data-trusted="1" class="code-example" data-highlight-block="0-0">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function copy(dst) {
  // остальные аргументы остаются безымянными
  for (var i = 1; i &lt; arguments.length; i++) {
    var arg = arguments[i];
    for (var key in arg) {
      dst[key] = arg[key];
    }
  }

  return dst;
}</code></pre>
        </div>
      </div>
      
      </div><h3><a class="main__anchor" name="аргументы-по-умолчанию-через" href="#аргументы-по-умолчанию-через">Аргументы по умолчанию через ||</a></h3><p>Если функция вызвана с меньшим количеством аргументов, чем указано, то отсутствующие аргументы считаются равными <code>undefined</code>.</p>
<p>Зачастую в случае отсутствия аргумента мы хотим присвоить ему некоторое «стандартное» значение или, иначе говоря,  значение «по умолчанию». Это можно удобно сделать при помощи оператора логическое ИЛИ <code>||</code>.</p>
<p>Например, функция <code>showWarning</code>, описанная ниже, должна показывать предупреждение. Для этого она принимает ширину <code>width</code>, высоту <code>height</code>, заголовок <code>title</code> и содержимое <code>contents</code>, но большая часть этих аргументов необязательна:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function showWarning(width, height, title, contents) {
  width = width || 200; // если не указана width, то width = 200
  height = height || 100; // если нет height, то height = 100
  title = title || &quot;Предупреждение&quot;;

  //...
}</code></pre>
        </div>
      </div>
      
      </div><p>Это отлично работает в тех ситуациях, когда «нормальное» значение параметра в логическом контексте отлично от <code>false</code>. В коде выше, при передаче <code>width = 0</code> или <code>width = null</code>, оператор ИЛИ заменит его на значение по умолчанию.</p>
<p>А что, если мы хотим использовать значение по умолчанию только если <code>width === undefined</code>? В этом случае оператор ИЛИ уже не подойдёт, нужно поставить явную проверку:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function showWarning(width, height, title, contents) {
  if (width === undefined) width = 200;
  if (height === undefined) height = 100;
  if (title === undefined) title = &quot;Предупреждение&quot;;

  //...
}</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="arguments-callee" href="#arguments-callee">Устаревшее свойство arguments.callee</a></h2><div class="important important_warn">
            <div class="important__header"><span class="important__type">Используйте NFE вместо <code>arguments.callee</code></span></div>
            <div class="important__content"><p>Это свойство устарело, при <code>use strict</code> оно не работает.</p>
<p>Единственная причина, по которой оно тут – это то, что его можно встретить в старом коде, поэтому о нём желательно знать.</p>
<p>Современная спецификация рекомендует использовать <a href="named-function-expression.htm#functions-nfe">именованные функциональные выражения (NFE)</a>.</p>
</div></div>
<p>В старом стандарте JavaScript объект <code>arguments</code> не только хранил список аргументов, но и содержал в свойстве <code>arguments.callee</code> ссылку на функцию, которая выполняется в данный момент.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f() {
  alert( arguments.callee === f ); // true
}

f();</code></pre>
        </div>
      </div>
      
      </div><p>Эти два примера будут работать одинаково:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="2:22-28,7:22-43">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// подвызов через NFE
var factorial = function f(n) {
  return n==1 ? 1 : n*f(n-1);
};

// подвызов через arguments.callee
var factorial = function(n) {
  return n==1 ? 1 : n*arguments.callee(n-1);
};</code></pre>
        </div>
      </div>
      
      </div><p>В учебнике мы его использовать не будем, оно приведено для общего ознакомления.</p>
<h3><a class="main__anchor" name="arguments-callee-caller" href="#arguments-callee-caller">arguments.callee.caller</a></h3><p>Устаревшее свойство <code>arguments.callee.caller</code> хранит ссылку на <em>функцию, которая вызвала данную</em>.</p>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">Это свойство тоже устарело</span></div>
            <div class="important__content"><p>Это свойство было в старом стандарте, при <code>use strict</code> оно не работает, как и <code>arguments.callee</code>.</p>
<p>Также ранее существовало более короткое свойство <code>arguments.caller</code>. Но это уже раритет, оно даже не кросс-браузерное. А вот свойство <code>arguments.callee.caller</code> поддерживается везде, если не использован <code>use strict</code>, поэтому в старом коде оно встречается.</p>
</div></div>
<p>Пример работы:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">f1();

function f1() {
  alert( arguments.callee.caller ); // null, меня вызвали из глобального кода
  f2();
}

function f2() {
  alert( arguments.callee.caller ); // f1, функция, из которой меня вызвали
  f3();
}

function f3() {
  alert( arguments.callee.caller ); // f2, функция, из которой меня вызвали
}</code></pre>
        </div>
      </div>
      
      </div><p>В учебнике мы это свойство также не будем использовать.</p>
<h2><a class="main__anchor" name="именованные-аргументы" href="#именованные-аргументы">«Именованные аргументы»</a></h2><p><em>Именованные аргументы</em> – альтернативная техника работы с аргументами, которая вообще не использует <code>arguments</code>.</p>
<p>Некоторые языки программирования позволяют передать параметры как-то так: <code>f(width=100, height=200)</code>, то есть по именам, а что не передано, тех аргументов нет. Это очень удобно в тех случаях, когда аргументов много, сложно запомнить их порядок и большинство вообще не надо передавать, по умолчанию подойдёт.</p>
<p>Такая ситуация часто встречается в компонентах интерфейса. Например, у «меню» может быть масса настроек отображения, которые можно «подкрутить» но обычно нужно передать всего один-два главных параметра, а остальные возьмутся по умолчанию.</p>
<p>В JavaScript для этих целей используется передача аргументов в виде объекта, а в его свойствах мы передаём параметры.</p>
<p>Получается так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function showWarning(options) {
  var width = options.width || 200; // по умолчанию
  var height = options.height || 100;

  var contents = options.contents || &quot;Предупреждение&quot;;

  // ...
}</code></pre>
        </div>
      </div>
      
      </div><p>Вызвать такую функцию очень легко. Достаточно передать объект аргументов, указав в нем только нужные:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">showWarning({
  contents: &quot;Вы вызвали функцию&quot; // и всё понятно!
});</code></pre>
        </div>
      </div>
      
      </div><p>Сравним это с передачей аргументов через список:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">showWarning(null, null, &quot;Предупреждение!&quot;);
// мысль программиста &quot;а что это за null, null в начале? ох, надо глядеть описание функции&quot;</code></pre>
        </div>
      </div>
      
      </div><p>Не правда ли, объект – гораздо проще и понятнее?</p>
<p>Еще один бонус кроме красивой записи – возможность повторного использования объекта аргументов:</p>
<div data-trusted="1" class="code-example" data-highlight-block="10-10">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var opts = {
  width: 400,
  height: 200,
  contents: &quot;Текст&quot;
};

showWarning(opts);

opts.contents = &quot;Другой текст&quot;;

showWarning(opts); // вызвать с новым текстом, без копирования других аргументов</code></pre>
        </div>
      </div>
      
      </div><p>Именованные аргументы применяются во многих JavaScript-фреймворках.</p>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><ul>
<li>Полный список аргументов, с которыми вызвана функция, доступен через <code>arguments</code>.</li>
<li>Это псевдомассив, то есть объект, который похож на массив, в нём есть нумерованные свойства и <code>length</code>, но методов массива у него нет.</li>
<li>В старом стандарте было свойство <code>arguments.callee</code> со ссылкой на текущую функцию, а также свойство <code>arguments.callee.caller</code>, содержащее ссылку на функцию, которая вызвала данную. Эти свойства устарели, при <code>use strict</code> обращение к ним приведёт к ошибке.</li>
<li>Для указания аргументов по умолчанию, в тех случаях, когда они заведомо не <code>false</code>, удобен оператор <code>||</code>.</li>
</ul>
<p>В тех случаях, когда возможных аргументов много и, в особенности, когда большинство их имеют значения по умолчанию, вместо работы с <code>arguments</code> организуют передачу данных через объект, который как правило называют <code>options</code>.</p>
<p>Возможен и гибридный подход, при котором первый аргумент обязателен, а второй – <code>options</code>, который содержит всевозможные дополнительные параметры:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function showMessage(text, options) {
  // показать сообщение text, настройки показа указаны в options
}</code></pre>
        </div>
      </div>
      
      </div></div></article><div class="tasks"><h2 id="tasks" class="tasks__title"><a href="#tasks" class="main__anchor main__anchor_noicon tasks__title-anchor">Задачи</a></h2><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#проверка-на-аргумент-undefined" name="проверка-на-аргумент-undefined" class="main__anchor">Проверка на аргумент-undefined</a></h3><a href="task/check-arguments-undefined.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Как в функции отличить отсутствующий аргумент от <code>undefined</code>?</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f(x) {
  // ..ваш код..
  // выведите 1, если первый аргумент есть, и 0 - если нет
}

f(undefined); // 1
f(); // 0</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><p>Узнать количество реально переданных аргументов можно по значению <code>arguments.length</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function f(x) {
  alert( arguments.length ? 1 : 0 );
}

f(undefined);
f();</code></pre>
        </div>
      </div>
      
      </div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div><div class="task tasks__task"><div class="task__header"><div class="task__title-wrap"><h3 class="task__title"><a href="#сумма-аргументов" name="сумма-аргументов" class="main__anchor">Сумма аргументов</a></h3><a href="task/sum-arguments.htm" target="_blank" class="task__open-link"></a></div><div class="task__header-note"><span title="Насколько эта задача важна для освоения материала, от 1 до 5" class="task__importance">важность: 5</span></div><div class="task__content"><p>Напишите функцию <code>sum(...)</code>, которая возвращает сумму всех своих аргументов:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">sum() = 0
sum(1) = 1
sum(1, 2) = 3
sum(1, 2, 3) = 6
sum(1, 2, 3, 4) = 10</code></pre>
        </div>
      </div>
      
      </div><button type="button" class="task__solution">решение</button><div class="task__answer"><div class="task__answer-content"><div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function sum() {
  var result = 0;

  for (var i = 0; i &lt; arguments.length; i++) {
    result += arguments[i];
  }

  return result;
}

alert( sum() ); // 0
alert( sum(1) ); // 1
alert( sum(1, 2) ); // 3
alert( sum(1, 2, 3) ); // 6
alert( sum(1, 2, 3, 4) ); // 10</code></pre>
        </div>
      </div>
      
      </div></div><button type="button" title="закрыть" class="close-button task__answer-close"></button></div></div></div></div></div></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>