<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="webcomponents.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Веб-компоненты: взгляд в будущее</span></a></li></ol><h1 class="main__header-title">Пользовательские элементы: Custom Elements</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Пользовательские элементы: Custom Elements"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Платформа «веб-компоненты» включает в себя несколько стандартов <a href="http://www.w3.org/standards/techs/components#w3c_all">Web Components</a>, которые находятся в разработке.</p>
<p>Начнём мы со стандарта <a href="http://www.w3.org/TR/custom-elements/">Custom Elements</a>, который позволяет создавать свои типы элементов.</p>
<h2><a class="main__anchor" name="зачем-custom-elements" href="#зачем-custom-elements">Зачем Custom Elements?</a></h2><p>Критично настроенный читатель скажет: «Зачем ещё стандарт для своих типов элементов? Я могу создать любой элемент и прямо сейчас! В любом из современных браузеров можно писать любой HTML, используя свои теги: <code>&lt;mytag&gt;</code>. Или создавать элементы из JavaScript при помощи <code>document.createElement('mytag')</code>.»</p>
<p>Однако, по умолчанию элемент с нестандартным названием (например <code>&lt;mytag&gt;</code>) воспринимается браузером, как нечто неопределённо-непонятное. Ему соответствует класс <a href="http://www.w3.org/TR/html5/dom.html#htmlunknownelement">HTMLUnknownElement</a>, и у него нет каких-либо особых методов.</p>
<p><strong>Стандарт Custom Elements позволяет описывать для новых элементов свои свойства, методы, объявлять свой DOM, подобие конструктора и многое другое.</strong></p>
<p>Давайте посмотрим это на примерах.</p>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">Для примеров рекомендуется Chrome</span></div>
            <div class="important__content"><p>Так как спецификация не окончательна, то для запуска примеров рекомендуется использовать Google Chrome, лучше – последнюю сборку <a href="https://www.google.ru/chrome/browser/canary.html">Chrome Canary</a>, в которой, как правило, отражены последние изменения.</p>
</div></div>
<h2><a class="main__anchor" name="новый-элемент" href="#новый-элемент">Новый элемент</a></h2><p>Для описания нового элемента используется вызов <code>document.registerElement(имя, { prototype: прототип })</code>.</p>
<p>Здесь:</p>
<ul>
<li><code>имя</code> – имя нового тега, например <code>&quot;mega-select&quot;</code>. Оно обязано содержать дефис <code>&quot;-&quot;</code>. Спецификация требует дефис, чтобы избежать в будущем конфликтов со стандартными элементами HTML. Нельзя создать элемент <code>timer</code> или <code>myTimer</code> – будет ошибка.</li>
<li><code>прототип</code> – объект-прототип для нового элемента, он должен наследовать от <code>HTMLElement</code>, чтобы у элемента были стандартные свойства и методы.</li>
</ul>
<p>Вот, к примеру, новый элемент <code>&lt;my-timer&gt;</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-1,7-7,13-13,17-17" data-highlight-inline="3:38-53">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script&gt;
  // прототип с методами для нового элемента
  var MyTimerProto = Object.create(HTMLElement.prototype);
  MyTimerProto.tick = function() { // свой метод tick
    this.innerHTML++;
  };

  // регистрируем новый элемент в браузере
  document.registerElement(&quot;my-timer&quot;, {
    prototype: MyTimerProto
  });
&lt;/script&gt;

&lt;!-- теперь используем новый элемент --&gt;
&lt;my-timer id=&quot;timer&quot;&gt;0&lt;/my-timer&gt;

&lt;script&gt;
  // вызовем метод tick() на элементе
  setInterval(function() {
    timer.tick();
  }, 1000);
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Использовать новый элемент в HTML можно и до его объявления через <code>registerElement</code>.</p>
<p>Для этого в браузере предусмотрен специальный режим «обновления» существующих элементов.</p>
<p>Если браузер видит элемент с неизвестным именем, в котором есть дефис <code>-</code> (такие элементы называются «unresolved»), то:</p>
<ul>
<li>Он ставит такому элементу специальный CSS-псевдокласс <code>:unresolved</code>, для того, чтобы через CSS можно было показать, что он ещё «не подгрузился».</li>
<li>При вызове <code>registerElement</code> такие элементы автоматически обновятся до нужного класса.</li>
</ul>
<p>В примере ниже регистрация элемента происходит через 2 секунды после его появления в разметке:</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-1,14-14,23-23">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;style&gt;
  /* стиль для :unresolved элемента (до регистрации) */
  hello-world:unresolved {
    color: white;
  }

  hello-world {
    transition: color 3s;
  }
&lt;/style&gt;

&lt;hello-world id=&quot;hello&quot;&gt;Hello, world!&lt;/hello-world&gt;

&lt;script&gt;
  // регистрация произойдёт через 2 сек
  setTimeout(function() {
    document.registerElement(&quot;hello-world&quot;, {
      prototype: {
        __proto__: HTMLElement.prototype,
        sayHi: function() { alert('Привет!'); }
      }
    });

    // у нового типа элементов есть метод sayHi
    hello.sayHi();
  }, 2000);
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Можно создавать такие элементы и в JavaScript – обычным вызовом <code>createElement</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var timer = document.createElement('my-timer');</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="расширение-встроенных-элементов" href="#расширение-встроенных-элементов">Расширение встроенных элементов</a></h2><p>Выше мы видели пример создания элемента на основе базового <code>HTMLElement</code>. Но можно расширить и другие, более конкретные HTML-элементы.</p>
<p>Для расширения встроенных элементов у <code>registerElement</code> предусмотрен параметр <code>extends</code>, в котором можно задать, какой тег мы расширяем.</p>
<p>Например, кнопку:</p>
<div data-trusted="1" class="code-example" data-highlight-block="8-8" data-highlight-inline="1:35-62,12:8-21">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script&gt;
  var MyTimerProto = Object.create(HTMLButtonElement.prototype);
  MyTimerProto.tick = function() {
    this.innerHTML++;
  };

  document.registerElement(&quot;my-timer&quot;, {
    prototype: MyTimerProto,
    extends: 'button'
  });
&lt;/script&gt;

&lt;button is=&quot;my-timer&quot; id=&quot;timer&quot;&gt;0&lt;/button&gt;

&lt;script&gt;
  setInterval(function() {
    timer.tick();
  }, 1000);

  timer.onclick = function() {
    alert(&quot;Текущее значение: &quot; + this.innerHTML);
  };
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Важные детали:</p>
<dl>
<dt>Прототип теперь наследует не от <code>HTMLElement</code>, а от <code>HTMLButtonElement</code></dt>
<dd>Чтобы расширить элемент, нужно унаследовать прототип от его класса.</dd>
<dt>В HTML указывается при помощи атрибута <code>is=&quot;...&quot;</code></dt>
<dd>Это принципиальное отличие разметки от обычного объявления без <code>extends</code>. Теперь <code>&lt;my-timer&gt;</code> работать не будет, нужно использовать исходный тег и <code>is</code>.</dd>
<dt>Работают методы, стили и события кнопки.</dt>
<dd>При клике на кнопку её не отличишь от встроенной. И всё же, это новый элемент, со своими методами, в данном случае <code>tick</code>.</dd>
</dl>
<p>При создании нового элемента в JS, если используется <code>extends</code>, необходимо указать и исходный тег в том числе:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var timer = document.createElement(&quot;button&quot;, &quot;my-timer&quot;);</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="жизненный-цикл" href="#жизненный-цикл">Жизненный цикл</a></h2><p>В прототипе своего элемента мы можем задать специальные методы, которые будут вызываться при создании, добавлении и удалении элемента из DOM:</p>
<table>
<tr><td><code>createdCallback</code></td><td>Элемент создан</td></tr>
<tr><td><code>attachedCallback</code></td><td>Элемент добавлен в документ</td></tr>
<tr><td><code>detachedCallback</code></td><td>Элемент удалён из документа</td></tr>
<tr><td><code>attributeChangedCallback(name, prevValue, newValue)</code></td><td>Атрибут добавлен, изменён или удалён</td></tr>
</table>
<p>Как вы, наверняка, заметили, <code>createdCallback</code> является подобием конструктора. Он вызывается только при создании элемента, поэтому всю дополнительную инициализацию имеет смысл описывать в нём.</p>
<p>Давайте используем <code>createdCallback</code>, чтобы инициализировать таймер, а <code>attachedCallback</code> – чтобы автоматически запускать таймер при вставке в документ:</p>
<div data-trusted="1" class="code-example" data-highlight-block="8-10,12-14">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script&gt;
  var MyTimerProto = Object.create(HTMLElement.prototype);

  MyTimerProto.tick = function() {
    this.timer++;
    this.innerHTML = this.timer;
  };

  MyTimerProto.createdCallback = function() {
    this.timer = 0;
  };

  MyTimerProto.attachedCallback = function() {
    setInterval(this.tick.bind(this), 1000);
  };

  document.registerElement(&quot;my-timer&quot;, {
    prototype: MyTimerProto
  });
&lt;/script&gt;

&lt;my-timer id=&quot;timer&quot;&gt;0&lt;/my-timer&gt;</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><p>Мы рассмотрели, как создавать свои DOM-элементы при помощи стандарта <a href="http://www.w3.org/TR/custom-elements/">Custom Elements</a>.</p>
<p>Далее мы перейдём к изучению дополнительных возможностей по работе с DOM.</p>
</div></article></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>