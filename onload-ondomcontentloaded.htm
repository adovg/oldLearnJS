<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-2" itemprop="child" class="breadcrumbs__item"><a href="ui.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Документ, события, интерфейсы</span></a></li><li id="breadcrumb-2" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="event-details.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">События в деталях</span></a></li></ol><h1 class="main__header-title">Загрузка документа: DOMContentLoaded, load, beforeunload, unload</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Загрузка документа: DOMContentLoaded, load, beforeunload, unload"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Процесс загрузки HTML-документа, условно, состоит из трёх стадий:</p>
<ul>
<li><code>DOMContentLoaded</code> – браузер полностью загрузил HTML и построил DOM-дерево.</li>
<li><code>load</code> – браузер загрузил все ресурсы.</li>
<li><code>beforeunload/unload</code> – уход со страницы.</li>
</ul>
<p>Все эти стадии очень важны. На каждую можно повесить обработчик, чтобы совершить полезные действия:</p>
<ul>
<li><code>DOMContentLoaded</code> – означает, что все DOM-элементы разметки уже созданы, можно их искать, вешать обработчики, создавать интерфейс, но при этом, возможно, ещё не догрузились какие-то картинки или стили.</li>
<li><code>load</code> – страница и все ресурсы загружены, используется редко, обычно нет нужды ждать этого момента.</li>
<li><code>beforeunload/unload</code> – можно проверить, сохранил ли посетитель изменения, уточнить, действительно ли он хочет покинуть страницу.</li>
</ul>
<p>Далее мы рассмотрим важные детали этих событий.</p>
<h2><a class="main__anchor" name="domcontentloaded" href="#domcontentloaded">DOMContentLoaded</a></h2><p>Событие <code>DOMContentLoaded</code> происходит на <code>document</code> и поддерживается во всех браузерах, кроме IE8-. Про поддержку аналогичного функционала в старых IE мы поговорим в конце главы.</p>
<p>Обработчик на него вешается только через <code>addEventListener</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">document.addEventListener(&quot;DOMContentLoaded&quot;, ready);</code></pre>
        </div>
      </div>
      
      </div><p>Пример:</p>
<div data-trusted="1" class="code-example" data-demo-height="150" data-highlight-block="6-6">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script&gt;
  function ready() {
    alert( 'DOM готов' );
    alert( &quot;Размеры картинки: &quot; + img.offsetWidth + &quot;x&quot; + img.offsetHeight );
  }

  document.addEventListener(&quot;DOMContentLoaded&quot;, ready);
&lt;/script&gt;

&lt;img id=&quot;img&quot; src=&quot;https://js.cx/clipart/yozhik.jpg?speed=1&quot;&gt;</code></pre>
        </div>
      </div>
      
      </div><p>В примере выше обработчик <code>DOMContentLoaded</code> сработает сразу после загрузки документа, не дожидаясь получения картинки.</p>
<p>Поэтому на момент вывода <code>alert</code> и сама картинка будет невидна и её размеры – неизвестны (кроме случая, когда картинка взята из кеша браузера).</p>
<p>В своей сути, событие <code>onDOMContentLoaded</code> – простое, как пробка. Полностью создано DOM-дерево – и вот событие. Но с ним связан ряд существенных тонкостей.</p>
<h3><a class="main__anchor" name="domcontentloaded-и-скрипты" href="#domcontentloaded-и-скрипты">DOMContentLoaded и скрипты</a></h3><p>Если в документе есть теги <code>&lt;script&gt;</code>, то браузер обязан их выполнить до того, как построит DOM. Поэтому событие <code>DOMContentLoaded</code> ждёт загрузки и выполнения таких скриптов.</p>
<p>Исключением являются скрипты с атрибутами <code>async</code> и <code>defer</code>, которые подгружаются асинхронно.</p>
<p><strong>Побочный эффект: если на странице подключается скрипт с внешнего ресурса (к примеру, реклама), и он тормозит, то событие <code>DOMContentLoaded</code> и связанные с ним действия могут сильно задержаться.</strong></p>
<p>Современные системы рекламы используют атрибут <code>async</code>, либо вставляют скрипты через DOM: <code>document.createElement('script')...</code>, что работает так же как <code>async</code>: такой скрипт выполняется полностью независимо от страницы и от других скриптов – сам ничего не ждёт и ничего не блокирует.</p>
<h3><a class="main__anchor" name="domcontentloaded-и-стили" href="#domcontentloaded-и-стили">DOMContentLoaded и стили</a></h3><p>Внешние стили никак не влияют на событие <code>DOMContentLoaded</code>. Но есть один нюанс.</p>
<p><strong>Если после стиля идёт скрипт, то этот скрипт обязан дождаться, пока стиль загрузится:</strong></p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;
&lt;script&gt;
  // сработает после загрузки style.css
&lt;/script&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Такое поведение прописано в стандарте. Его причина – скрипт может захотеть получить информацию со страницы, зависящую от стилей, например, ширину элемента, и поэтому обязан дождаться загрузки <code>style.css</code>.</p>
<p><strong>Побочный эффект – так как событие <code>DOMContentLoaded</code> будет ждать выполнения скрипта, то оно подождёт и загрузки стилей, которые идут перед <code>&lt;script&gt;</code>.</strong></p>
<h3><a class="main__anchor" name="автозаполнение" href="#автозаполнение">Автозаполнение</a></h3><p>Firefox/Chrome/Opera автозаполняют формы по <code>DOMContentLoaded</code>.</p>
<p>Это означает, что если на странице есть форма для ввода логина-пароля, то браузер введёт в неё запомненные значения только по <code>DOMContentLoaded</code>.</p>
<p><strong>Побочный эффект: если <code>DOMContentLoaded</code> ожидает множества скриптов и стилей, то автозаполнение не сработает до полной их загрузки.</strong></p>
<p>Конечно, это довод в пользу того, чтобы не задерживать <code>DOMContentLoaded</code>, в частности – использовать у скриптов атрибуты <code>async</code> и <code>defer</code>.</p>
<h2><a class="main__anchor" name="window-onload" href="#window-onload">window.onload</a></h2><p>Событие <code>onload</code> на <code>window</code> срабатывает, когда загружается <em>вся</em> страница, включая ресурсы на ней – стили, картинки, ифреймы и т.п.</p>
<p>Пример ниже выведет <code>alert</code> лишь после полной загрузки окна, включая <code>IFRAME</code> и картинку:</p>
<div data-trusted="1" class="code-example" data-highlight-block="1-3">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script&gt;
  window.onload = function() {
    alert( 'Документ и все ресурсы загружены' );
  };
&lt;/script&gt;
&lt;iframe src=&quot;https://example.com/&quot; style=&quot;height:60px&quot;&gt;&lt;/iframe&gt;
&lt;img src=&quot;https://js.cx/clipart/yozhik.jpg?speed=1&quot;&gt;</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="window-onunload" href="#window-onunload">window.onunload</a></h2><p>Когда человек уходит со страницы или закрывает окно, на <code>window</code> срабатывает событие <code>unload</code>. В нём можно сделать что-то, не требующее ожидания, например, закрыть вспомогательные popup-окна, но отменить сам переход нельзя.</p>
<p>Это позволяет другое событие – <code>onbeforeunload</code>, которое поэтому используется гораздо чаще.</p>
<h2><a class="main__anchor" name="window.onbeforeunload" href="#window.onbeforeunload">window.onbeforeunload</a></h2><p>Если посетитель инициировал переход на другую страницу или нажал «закрыть окно», то обработчик <code>onbeforeunload</code> может приостановить процесс и спросить подтверждение.</p>
<p>Для этого ему нужно вернуть строку. По историческим причинам некоторые браузеры покажут ее, но большинство – стандартное сообщение.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">window.onbeforeunload = function() {
  return &quot;Данные не сохранены. Точно перейти?&quot;;
};</code></pre>
        </div>
      </div>
      
      </div><p>Кликните на кнопку в <code>IFRAME'е</code> ниже, чтобы поставить обработчик, а затем по ссылке, чтобы увидеть его в действии:</p>
<div class="code-result">
    <div class="code-result__toolbar toolbar"><div class="toolbar__tool">
        <a href="https://js.cx/article/onload-ondomcontentloaded/window-onbeforeunload/" target="_blank" title="открыть в новом окне" class="toolbar__button toolbar__button_external"></a>
      </div>
      </div>
    <iframe class="code-result__iframe" data-trusted="1" style="height:80px" src="https://js.cx/article/onload-ondomcontentloaded/window-onbeforeunload/"></iframe>
  </div><h2><a class="main__anchor" name="эмуляция-domcontentloaded-для-ie8" href="#эмуляция-domcontentloaded-для-ie8">Эмуляция DOMContentLoaded для IE8-</a></h2><p>Прежде чем что-то эмулировать, заметим, что альтернативой событию <code>onDOMContentLoaded</code> является вызов функции <code>init</code> из скрипта в самом конце <code>BODY</code>, когда основная часть DOM уже готова:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;body&gt;
  ...
  &lt;script&gt;
    init();
  &lt;/script&gt;
&lt;/body&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Причина, по которой обычно предпочитают именно событие – одна: удобство. Вешается обработчик и не надо ничего писать в конец <code>BODY</code>.</p>
<h3><a class="main__anchor" name="мини-скрипт-documentready" href="#мини-скрипт-documentready">Мини-скрипт documentReady</a></h3><p>Если вы всё же хотите использовать <code>onDOMContentLoaded</code> кросс-браузерно, то нужно либо подключить какой-нибудь фреймворк – почти все предоставляют такой функционал, либо использовать функцию из мини-библиотеки <a href="../https@github.com/couto/jquery.parts/blob/master/jquery.documentready.js.htm">jquery.documentReady.js</a>.</p>
<p>Несмотря на то, что в названии содержится слово «jquery», эта библиотечка не требует <a href="http://jquery.com/">jQuery</a>. Наоборот, она представляет собой единственную функцию с названием <code>$</code>, вызов которой <code>$(callback)</code> добавляет обработчик <code>callback</code> на <code>DOMContentLoaded</code> (можно вызывать много раз), либо, если документ уже загружен – выполняет его тут же.</p>
<p>Пример использования:</p>
<div data-trusted="1" class="code-example" data-highlight-block="3-5">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="показать" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-markup"><code class="language-markup">&lt;script src=&quot;https://js.cx/script/jquery.documentReady.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;
  $(function() {
    alert( &quot;DOMContentLoaded&quot; );
  });
&lt;/script&gt;

&lt;img src=&quot;https://js.cx/clipart/yozhik.jpg?speed=1&quot;&gt;
&lt;div&gt;Текст страницы&lt;/div&gt;</code></pre>
        </div>
      </div>
      
      </div><p>Здесь <code>alert</code> сработает до загрузки картинки, но после создания DOM, в частности, после появления текста. И так будет для всех браузеров, включая даже очень старые IE.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Как именно эмулируется <code>DOMContentLoaded</code>?</span></div>
            <div class="important__content"><p>Технически, эмуляция <code>DOMContentLoaded</code> для старых IE осуществляется очень забавно.</p>
<p>Основной приём – это попытка прокрутить документ вызовом:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">document.documentElement.doScroll(&quot;left&quot;);</code></pre>
        </div>
      </div>
      
      </div><p>Метод <code>doScroll</code> работает только в IE и «методом тыка» было обнаружено, что он бросает исключение, если DOM не полностью создан.</p>
<p>Поэтому библиотека пытается вызвать прокрутку, если не получается – через <code>setTimeout(.., 1)</code> пытается прокрутить его ещё раз, и так до тех пор, пока действие не перестанет вызывать ошибку. На этом этапе документ считается загрузившимся.</p>
<p>Внутри фреймов и в очень старых браузерах такой подход может ошибаться, поэтому дополнительно ставится резервный обработчик на <code>onload</code>, чтобы уж точно сработал.</p>
</div></div>
<h2><a class="main__anchor" name="итого" href="#итого">Итого</a></h2><ul>
<li>
<p>Самое востребованное событие из описанных – без сомнения, <code>DOMContentLoaded</code>. Многие страницы сделаны так, что инициализируют интерфейсы именно по этому событию.</p>
<p>Это удобно, ведь можно в <code>&lt;head&gt;</code> написать скрипт, который будет запущен в момент, когда все DOM-элементы доступны.</p>
<p>С другой стороны, следует иметь в виду, что событие <code>DOMContentLoaded</code> будет ждать не только, собственно, HTML-страницу, но и внешние скрипты, подключенные тегом <code>&lt;script&gt;</code> без атрибутов <code>defer/async</code>, а также стили перед такими скриптами.</p>
<p>Событие <code>DOMContentLoaded</code> не поддерживается в IE8-, но почти все фреймворки умеют его эмулировать. Если нужна отдельная функция только для кросс-браузерного аналога <code>DOMContentLoaded</code> – можно использовать <a href="../https@github.com/couto/jquery.parts/blob/master/jquery.documentready.js.htm">jquery.documentReady.js</a>.</p>
</li>
<li>
<p>Событие <code>window.onload</code> используют редко, поскольку обычно нет нужды ждать подгрузки <em>всех</em> ресурсов. Если же нужен конкретный ресурс (картинка или ифрейм), то можно поставить событие <code>onload</code> непосредственно на нём, мы посмотрим, как это сделать, далее.</p>
</li>
<li>
<p>Событие <code>window.onunload</code> почти не используется, как правило, оно бесполезно – мало что можно сделать, зная, что окно браузера прямо сейчас закроется.</p>
</li>
<li>
<p>Гораздо чаще применяется <code>window.onbeforeunload</code> – это де-факто стандарт для того, чтобы проверить, сохранил ли посетитель данные, действительно ли он хочет покинуть страницу. В системах редактирования документов оно используется повсеместно.</p>
</li>
</ul>
</div></article></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>