<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="UTF-8">
    <title>JavaScript</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css/bootstrap.min.css">
    <script src="bootstrap/js/bootstrap.min.js"></script>
    <script src="js/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/all.min.css">
</head>

<body>
<div id="get_left_menu"></div>
    <div class="navbar-wrapper">
        <div class="navbar navbar-dark bg-dark box-shadow">
            <span class="hamburger-menu" id="get_mobile_menu"><i class="fas fa-bars"></i></span>
        </div>
    </div>
    <div class="main-content-wrapper">
<div class="page__inner"><main class="main main_width-limit"><header class="main__header"><div class="main__header-inner"><ol class="breadcrumbs"><li itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemref="breadcrumb-1" class="breadcrumbs__item breadcrumbs__item_home"><a href="default.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title" class="breadcrumbs__hidden-text">Учебник</span></a></li><li id="breadcrumb-1" itemscope itemtype="http://data-vocabulary.org/Breadcrumb" itemprop="child" class="breadcrumbs__item"><a href="regular-expressions-javascript.htm" itemprop="url" class="breadcrumbs__link"><span itemprop="title">Регулярные выражения</span></a></li></ol><h1 class="main__header-title">Методы RegExp и String</h1></div></header><div class="content"><article itemscope itemtype="http://schema.org/TechArticle"><meta itemprop="name" content="Методы RegExp и String"><div itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="email" content="iliakan@gmail.com"><meta itemprop="name" content="Ilya Kantor"></div><div itemprop="articleBody"><p>Регулярные выражения в JavaScript являются объектами класса <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp">RegExp</a>.</p>
<p>Кроме того, методы для поиска по регулярным выражениям встроены прямо в обычные строки <code>String</code>.</p>
<p>К сожалению, общая структура встроенных методов слегка запутана, поэтому мы сначала рассмотрим их по отдельности, а затем – рецепты по решению стандартных задач с ними.</p>
<h2><a class="main__anchor" name="str-search-reg" href="#str-search-reg">str.search(reg)</a></h2><p>Этот метод мы уже видели.</p>
<p>Он возвращает позицию первого совпадения или <code>-1</code>, если ничего не найдено.</p>
<div data-trusted="1" class="code-example" data-highlight-inline="2:19-24">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var str = &quot;Люблю регэкспы я, но странною любовью&quot;;

alert( str.search( /лю/i ) ); // 0</code></pre>
        </div>
      </div>
      
      </div><p><strong>Ограничение метода <code>search</code> – он всегда ищет только первое совпадение.</strong></p>
<p>Нельзя заставить <code>search</code> искать дальше первого совпадения, такой синтаксис попросту не предусмотрен. Но есть другие методы, которые это умеют.</p>
<h2><a class="main__anchor" name="str-match-reg-без-флага-g" href="#str-match-reg-без-флага-g">str.match(reg) без флага g</a></h2><p>Метод <code>str.match</code> работает по-разному, в зависимости от наличия или отсутствия флага <code>g</code>, поэтому сначала мы разберём вариант, когда его нет.</p>
<p>В этом случае <code>str.match(reg)</code> находит только одно, первое совпадение.</p>
<p>Результат вызова – это массив, состоящий из этого совпадения, с дополнительными свойствами <code>index</code> – позиция, на которой оно обнаружено и <code>input</code> – строка, в которой был поиск.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="2:24-29">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var str = &quot;ОЙ-Ой-ой&quot;;

var result = str.match( /ой/i );

alert( result[0] ); // ОЙ  (совпадение)
alert( result.index ); // 0 (позиция)
alert( result.input ); // ОЙ-Ой-ой (вся поисковая строка)</code></pre>
        </div>
      </div>
      
      </div><p>У этого массива не всегда только один элемент.</p>
<p><strong>Если часть шаблона обозначена скобками, то она станет отдельным элементом массива.</strong></p>
<p>Например:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="2:24-39">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var str = &quot;javascript - это такой язык&quot;;

var result = str.match( /JAVA(SCRIPT)/i );

alert( result[0] ); // javascript (всё совпадение полностью)
alert( result[1] ); // script (часть совпадения, соответствующая скобкам)
alert( result.index ); // 0
alert( result.input ); // javascript - это такой язык</code></pre>
        </div>
      </div>
      
      </div><p>Благодаря флагу <code>i</code> поиск не обращает внимание на регистр буквы, поэтому находит <code class="match">javascript</code>. При этом часть строки, соответствующая <code class="pattern">SCRIPT</code>, выделена в отдельный элемент массива.</p>
<p>Позже мы ещё вернёмся к скобочным выражениям, они особенно удобны для поиска с заменой.</p>
<h2><a class="main__anchor" name="str-match-reg-с-флагом-g" href="#str-match-reg-с-флагом-g">str.match(reg) с флагом g</a></h2><p>При наличии флага <code>g</code>, вызов <code>match</code> возвращает обычный массив из всех совпадений.</p>
<p>Никаких дополнительных свойств у массива в этом случае нет, скобки дополнительных элементов не порождают.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="2:24-30">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var str = &quot;ОЙ-Ой-ой&quot;;

var result = str.match( /ой/ig );

alert( result ); // ОЙ, Ой, ой</code></pre>
        </div>
      </div>
      
      </div><p>Пример со скобками:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="2:24-40">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var str = &quot;javascript - это такой язык&quot;;

var result = str.match( /JAVA(SCRIPT)/gi );

alert( result[0] ); // javascript
alert( result.length ); // 1
alert( result.index ); // undefined</code></pre>
        </div>
      </div>
      
      </div><p>Из последнего примера видно, что элемент в массиве ровно один, и свойства <code>index</code> также нет. Такова особенность глобального поиска при помощи <code>match</code>  – он просто возвращает все совпадения.</p>
<p>Для расширенного глобального поиска, который позволит получить все позиции и, при желании, скобки, нужно использовать метод <a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec">RegExp#exec</a>, которые будет рассмотрен далее.</p>
<div class="important important_warn">
            <div class="important__header"><span class="important__type">В случае, если совпадений не было, <code>match</code> возвращает <code>null</code></span></div>
            <div class="important__content"><p>Обратите внимание, это важно – если <code>match</code> не нашёл совпадений, он возвращает не пустой массив, а именно <code>null</code>.</p>
<p>Это важно иметь в виду, чтобы не попасть в такую ловушку:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var str = &quot;Ой-йой-йой&quot;;

// результат match не всегда массив!
alert(str.match(/лю/gi).length) // ошибка! нет свойства length у null</code></pre>
        </div>
      </div>
      
      </div></div></div>
<h2><a class="main__anchor" name="str-split-reg-substr-limit" href="#str-split-reg-substr-limit">str.split(reg|substr, limit)</a></h2><p>Разбивает строку в массив по разделителю – регулярному выражению <code>regexp</code> или подстроке <code>substr</code>.</p>
<p>Обычно мы используем метод <code>split</code> со строками, вот так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert('12-34-56'.split('-')) // [12, 34, 56]</code></pre>
        </div>
      </div>
      
      </div><p>Можно передать в него и регулярное выражение, тогда он разобьёт строку по всем совпадениям.</p>
<p>Тот же пример с регэкспом:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">alert('12-34-56'.split(/-/)) // [12, 34, 56]</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="str-replace-reg-str-func" href="#str-replace-reg-str-func">str.replace(reg, str|func)</a></h2><p>Швейцарский нож для работы со строками, поиска и замены любого уровня сложности.</p>
<p>Его простейшее применение – поиск и замена подстроки в строке, вот так:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// заменить дефис на двоеточие
alert('12-34-56'.replace(&quot;-&quot;, &quot;:&quot;)) // 12:34-56</code></pre>
        </div>
      </div>
      
      </div><p><strong>При вызове со строкой замены <code>replace</code> всегда заменяет только первое совпадение.</strong></p>
<p>Чтобы заменить <em>все</em> совпадения, нужно использовать для поиска не строку <code>&quot;-&quot;</code>, а регулярное выражение <code class="pattern">/-/g</code>, причём обязательно с флагом <code>g</code>:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="1:27-31">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// заменить дефис на двоеточие
alert( '12-34-56'.replace( /-/g, &quot;:&quot; ) )  // 12:34:56</code></pre>
        </div>
      </div>
      
      </div><p>В строке для замены можно использовать специальные символы:</p>
<table>
    <thead>
    <tr>
        <th>Спецсимволы</th>
        <th>Действие в строке замены</th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td><code>$$</code></td>
        <td>Вставляет <code>"$"</code>.</td>
    </tr>
    <tr>
        <td><code>$&</code></td>
        <td>Вставляет всё найденное совпадение.</td>
    </tr>
    <tr>
        <td><code>$&#096;</code></td>
        <td>Вставляет часть строки до совпадения.</td>
    </tr>
    <tr>
        <td>
            <code>$'</code>
        </td>
        <td>Вставляет часть строки после совпадения.</td>
    </tr>
    <tr>
        <td>
            <code>$*n*</code>
        </td>
        <td>где <code>n</code> -- цифра или двузначное число, обозначает <code>n-ю</code> по счёту скобку, если считать слева-направо.</td>
    </tr>
    </tbody>
</table>
<p>Пример использования скобок и <code>$1</code>, <code>$2</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var str = &quot;Василий Пупкин&quot;;

alert(str.replace(/(Василий) (Пупкин)/, '$2, $1')) // Пупкин, Василий</code></pre>
        </div>
      </div>
      
      </div><p>Ещё пример, с использованием <code>$&amp;</code>:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var str = &quot;Василий Пупкин&quot;;

alert(str.replace(/Василий Пупкин/, 'Великий $&amp;!')) // Великий Василий Пупкин!</code></pre>
        </div>
      </div>
      
      </div><p><strong>Для ситуаций, которые требуют максимально «умной» замены, в качестве второго аргумента предусмотрена функция.</strong></p>
<p>Она будет вызвана для каждого совпадения, и её результат будет вставлен как замена.</p>
<p>Например:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var i = 0;

// заменить каждое вхождение &quot;ой&quot; на результат вызова функции
alert(&quot;ОЙ-Ой-ой&quot;.replace(/ой/gi, function() {
  return ++i;
})); // 1-2-3</code></pre>
        </div>
      </div>
      
      </div><p>В примере выше функция просто возвращала числа по очереди, но обычно она основывается на поисковых данных.</p>
<p>Эта функция получает следующие аргументы:</p>
<ol>
<li><code>str</code> – найденное совпадение,</li>
<li><code>p1, p2, ..., pn</code> – содержимое скобок (если есть),</li>
<li><code>offset</code> – позиция, на которой найдено совпадение,</li>
<li><code>s</code> – исходная строка.</li>
</ol>
<p>Если скобок в регулярном выражении нет, то у функции всегда будет ровно 3 аргумента: <code>replacer(str, offset, s)</code>.</p>
<p>Используем это, чтобы вывести полную информацию о совпадениях:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">// вывести и заменить все совпадения
function replacer(str, offset, s) {
  alert( &quot;Найдено: &quot; + str + &quot; на позиции: &quot; + offset + &quot; в строке: &quot; + s );
  return str.toLowerCase();
}

var result = &quot;ОЙ-Ой-ой&quot;.replace(/ой/gi, replacer);
alert( 'Результат: ' + result ); // Результат: ой-ой-ой</code></pre>
        </div>
      </div>
      
      </div><p>С двумя скобочными выражениями – аргументов уже 5:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">function replacer(str, name, surname, offset, s) {
  return surname + &quot;, &quot; + name;
}

var str = &quot;Василий Пупкин&quot;;

alert(str.replace(/(Василий) (Пупкин)/, replacer)) // Пупкин, Василий</code></pre>
        </div>
      </div>
      
      </div><p>Функция – это самый мощный инструмент для замены, какой только может быть. Она владеет всей информацией о совпадении и имеет доступ к замыканию, поэтому может всё.</p>
<h2><a class="main__anchor" name="regexp-test-str" href="#regexp-test-str">regexp.test(str)</a></h2><p>Теперь переходим к методам класса <code>RegExp</code>.</p>
<p>Метод <code>test</code> проверяет, есть ли хоть одно совпадение в строке <code>str</code>. Возвращает <code>true/false</code>.</p>
<p>Работает, по сути, так же, как и проверка <code>str.search(reg) != -1</code>, например:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="3:7-12,4:18-23">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var str = &quot;Люблю регэкспы я, но странною любовью&quot;;

// эти две проверки идентичны
alert( /лю/i.test(str) ) // true
alert( str.search(/лю/i) != -1 ) // true</code></pre>
        </div>
      </div>
      
      </div><p>Пример с отрицательным результатом:</p>
<div data-trusted="1" class="code-example" data-highlight-inline="2:7-20,3:18-31">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var str = &quot;Ой, цветёт калина...&quot;;

alert( /javascript/i.test(str) ) // false
alert( str.search(/javascript/i) != -1 ) // false</code></pre>
        </div>
      </div>
      
      </div><h2><a class="main__anchor" name="regexp-exec-str" href="#regexp-exec-str">regexp.exec(str)</a></h2><p>Для поиска мы уже видели методы:</p>
<ul>
<li><code>search</code> – ищет индекс</li>
<li><code>match</code> – если регэксп без флага <code>g</code> – ищет совпадение с подрезультатами в скобках</li>
<li><code>match</code> – если регэксп с флагом <code>g</code> – ищет все совпадения, но без скобочных групп.</li>
</ul>
<p>Метод <code>regexp.exec</code> дополняет их. Он позволяет искать и все совпадения и скобочные группы в них.</p>
<p>Он ведёт себя по-разному, в зависимости от того, есть ли у регэкспа флаг <code>g</code>.</p>
<ul>
<li>Если флага <code>g</code> нет, то <code>regexp.exec(str)</code> ищет и возвращает первое совпадение, является полным аналогом вызова <code>str.match(reg)</code>.</li>
<li>Если флаг <code>g</code> есть, то вызов <code>regexp.exec</code> возвращает первое совпадение и <em>запоминает</em> его позицию в свойстве <code>regexp.lastIndex</code>. Последующий поиск он начнёт уже с этой позиции. Если совпадений не найдено, то сбрасывает <code>regexp.lastIndex</code> в ноль.</li>
</ul>
<p>Это используют для поиска всех совпадений в цикле:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var str = 'Многое по JavaScript можно найти на сайте http://javascript.ru';

var regexp = /javascript/ig;
var result;

alert( &quot;Начальное значение lastIndex: &quot; + regexp.lastIndex );

while (result = regexp.exec(str)) {
  alert( 'Найдено: ' + result[0] + ' на позиции:' + result.index );
  alert( 'Свойство lastIndex: ' + regexp.lastIndex );
}

alert( 'Конечное значение lastIndex: ' + regexp.lastIndex );</code></pre>
        </div>
      </div>
      
      </div><p>Здесь цикл продолжается до тех пор, пока <code>regexp.exec</code> не вернёт <code>null</code>, что означает «совпадений больше нет».</p>
<p>Найденные результаты последовательно помещаются в <code>result</code>, причём находятся там в том же формате, что и <code>match</code> – с учётом скобок, со свойствами <code>result.index</code> и <code>result.input</code>.</p>
<div class="important important_smart">
            <div class="important__header"><span class="important__type">Поиск с нужной позиции</span></div>
            <div class="important__content"><p>Можно заставить <code>regexp.exec</code> искать сразу с нужной позиции, если поставить <code>lastIndex</code> вручную:</p>
<div data-trusted="1" class="code-example">
      <div class="codebox code-example__codebox">
        
        <div class="toolbar codebox__toolbar">
          <div class="toolbar__tool">
            <a href="#" title="выполнить" data-action="run" class="toolbar__button toolbar__button_run"></a>
          </div>
          <div class="toolbar__tool">
            <a href="#" title="открыть в песочнице" target="_blank" data-action="edit" class="toolbar__button toolbar__button_edit"></a>
          </div>
        </div>
        <div class="codebox__code" data-code="1">
          <pre class="line-numbers language-javascript"><code class="language-javascript">var str = 'Многое по JavaScript можно найти на сайте http://javascript.ru';

var regexp = /javascript/ig;
regexp.lastIndex = 40;

alert( regexp.exec(str).index ); // 49, поиск начат с 40-й позиции</code></pre>
        </div>
      </div>
      
      </div></div></div>
<h2><a class="main__anchor" name="итого-рецепты" href="#итого-рецепты">Итого, рецепты</a></h2><p>Методы становятся гораздо понятнее, если разбить их использование по задачам, которые нужны в реальной жизни.</p>
<dl>
<dt>Для поиска только одного совпадения:</dt>
<dd>
<ul>
<li>Найти позицию первого совпадения – <code>str.search(reg)</code>.</li>
</ul>
</dd>
</dl>
<ul>
<li>Найти само совпадение – <code>str.match(reg)</code>.</li>
<li>Проверить, есть ли хоть одно совпадение – <code>regexp.test(str)</code> или <code>str.search(reg) != -1</code>.</li>
<li>Найти совпадение с нужной позиции – <code>regexp.exec(str)</code>, начальную позицию поиска задать в <code>regexp.lastIndex</code>.</li>
</ul>
<dl>
<dt>Для поиска всех совпадений:</dt>
<dd>
<ul>
<li>Найти массив совпадений – <code>str.match(reg)</code>, с флагом <code>g</code>.</li>
</ul>
</dd>
</dl>
<ul>
<li>Получить все совпадения, с подробной информацией о каждом – <code>regexp.exec(str)</code> с флагом <code>g</code>, в цикле.</li>
</ul>
<dl>
<dt>Для поиска-и-замены:</dt>
<dd>
<ul>
<li>Замена на другую строку или результат функции – <code>str.replace(reg, str|func)</code></li>
</ul>
</dd>
<dt>Для разбивки строки на части:</dt>
<dd>
<ul>
<li><code>str.split(str|reg)</code></li>
</ul>
</dd>
</dl>
<p>Зная эти методы, мы уже можем использовать регулярные выражения.</p>
<p>Конечно, для этого желательно хорошо понимать их синтаксис и возможности, так что переходим к ним дальше.</p>
</div></article></div></div>
</div>


    <div id="mobile_menu" class="mobile-menu">
        <ul class="mobile-menu__ul">

            <li class="special-links-list__item"><a href="getting-started.htm" class="special-links-list__link">Введение</a></li>
            <li class="special-links-list__item"><a href="first-steps.htm" class="special-links-list__link">Основы JavaScript</a></li>
            <li class="special-links-list__item"><a href="writing-js.htm" class="special-links-list__link">Качество кода</a></li>
            <li class="special-links-list__item"><a href="data-structures.htm" class="special-links-list__link">Структуры данных</a></li>
            <li class="special-links-list__item"><a href="functions-closures.htm" class="special-links-list__link">Замыкания, область видимости</a></li>
            <li class="special-links-list__item"><a href="objects-more.htm" class="special-links-list__link">Методы объектов и контекст вызова</a></li>
            <li class="special-links-list__item"><a href="js-misc.htm" class="special-links-list__link">Некоторые другие возможности</a></li>
            <li class="special-links-list__item"><a href="oop.htm" class="special-links-list__link">ООП в функциональном стиле</a></li>
            <li class="special-links-list__item"><a href="prototypes.htm" class="special-links-list__link">ООП в прототипном стиле</a></li>
            <li class="special-links-list__item"><a href="es-modern.htm" class="special-links-list__link">Современные возможности ES-2015</a></li>


            <li class="special-links-list__item"><a href="document.htm" class="special-links-list__link">Документ и объекты страницы</a></li>
            <li class="special-links-list__item"><a href="events-and-interfaces.htm" class="special-links-list__link">Основы работы с событиями</a></li>
            <li class="special-links-list__item"><a href="event-details.htm" class="special-links-list__link">События в деталях</a></li>
            <li class="special-links-list__item"><a href="forms-controls.htm" class="special-links-list__link">Формы, элементы управления</a></li>
            <li class="special-links-list__item"><a href="widgets.htm" class="special-links-list__link">Создание графических компонентов</a></li>
            <li class="special-links-list__item"><a href="webcomponents.htm" class="course-bricks__brick-title-link main__anchor">Веб-компоненты: взгляд в будущее</a></li>
            <li><span class="sub-title">Дополнительно</span></li>
            <li class="special-links-list__item"><a href="ajax.htm" class="course-bricks__brick-title-link main__anchor">AJAX и COMET</a></li>
            <li class="special-links-list__item"><a href="animation.htm" class="course-bricks__brick-title-link main__anchor">Анимация</a></li>
            <li class="special-links-list__item"><a href="frames-and-windows.htm" class="course-bricks__brick-title-link main__anchor">Окна и Фреймы</a></li>
            <li class="special-links-list__item"><a href="css-for-js.htm" class="course-bricks__brick-title-link main__anchor">CSS для JavaScript-разработчика</a></li>
            <li class="special-links-list__item"><a href="tools.htm" class="course-bricks__brick-title-link main__anchor">Сундучок с инструментами</a></li>
            <li class="special-links-list__item"><a href="regular-expressions-javascript.htm" class="course-bricks__brick-title-link main__anchor">Регулярные выражения</a></li>
            <li class="special-links-list__item"><a href="extra.htm" class="course-bricks__brick-title-link main__anchor">О всякой всячине</a></li>
            <li class="special-links-list__item"><a href="about-this.htm" class="course-bricks__brick-title-link main__anchor">Об учебнике и авторе</a></li>

        </ul>
    </div>
     <script src="js/hammer.min.js"></script>
    <script src="js/hammer-time.min.js"></script>
    <script src="js/jquery.hammer.js"></script>
    <script src="js/scripts.js"></script>


</body>

</html>